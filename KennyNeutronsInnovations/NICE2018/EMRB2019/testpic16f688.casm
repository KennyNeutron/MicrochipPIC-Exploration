;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     D:\KennyNeutronsInnovations\NICE2018\EMRB2019\testpic16f688.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Wednesday, February 20, 2019 18:58:08
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F688
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_3
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_SIZE 256
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 4
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 5

//Functions
#define MX_CLK_SPEED 4000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x30d4
#endif
#ifdef HI_TECH_C
__CONFIG(0x30d4);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)



#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations



void main()

{
	//Initialization
	ansel = 0x00;
001C  1683  	BSF STATUS, RP0
001D  1303  	BCF STATUS, RP1
001E  0191  	CLRF gbl_ansel

cmcon0 = 0x07;
001F  3007  	MOVLW 0x07
0020  1283  	BCF STATUS, RP0
0021  0099  	MOVWF gbl_cmcon0



	//Interrupt initialization code
	option_reg = 0xC0;
0022  30C0  	MOVLW 0xC0
0023  1683  	BSF STATUS, RP0
0024  0081  	MOVWF gbl_option_reg



	//Output
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0025  30FB  	MOVLW 0xFB
0026  0507  	ANDWF gbl_trisc, W
0027  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0028  30FB  	MOVLW 0xFB
0029  1283  	BCF STATUS, RP0
002A  0507  	ANDWF gbl_portc, W
002B  00C2  	MOVWF CompTempVar2188
002C  3004  	MOVLW 0x04
002D  0442  	IORWF CompTempVar2188, W
002E  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Loop
	//Loop: While 1
	while (1)
002F        label3
006D  282F  	GOTO	label3

	{

		//Output
		//Output: 1 -> C4
		trisc = trisc & 0xEF;
002F  30EF  	MOVLW 0xEF
0030  1683  	BSF STATUS, RP0
0031  0507  	ANDWF gbl_trisc, W
0032  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xEF) | 0x10;
0033  30EF  	MOVLW 0xEF
0034  1283  	BCF STATUS, RP0
0035  0507  	ANDWF gbl_portc, W
0036  00C2  	MOVWF CompTempVar2189
0037  3010  	MOVLW 0x10
0038  0442  	IORWF CompTempVar2189, W
0039  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xEF;

		//Output
		//Output: 0 -> C5
		trisc = trisc & 0xDF;
003A  30DF  	MOVLW 0xDF
003B  1683  	BSF STATUS, RP0
003C  0507  	ANDWF gbl_trisc, W
003D  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xDF) | 0x20;
		else
			portc = portc & 0xDF;
003E  30DF  	MOVLW 0xDF
003F  1283  	BCF STATUS, RP0
0040  0507  	ANDWF gbl_portc, W
0041  0087  	MOVWF gbl_portc


		//Delay
		//Delay: 800 ms
		delay_ms(255);
0042  30FF  	MOVLW 0xFF
0043  00C2  	MOVWF delay_ms_00000_arg_del
0044  2010  	CALL delay_ms_00000

		delay_ms(255);
0045  30FF  	MOVLW 0xFF
0046  00C2  	MOVWF delay_ms_00000_arg_del
0047  2010  	CALL delay_ms_00000

		delay_ms(255);
0048  30FF  	MOVLW 0xFF
0049  00C2  	MOVWF delay_ms_00000_arg_del
004A  2010  	CALL delay_ms_00000

		delay_ms(35);
004B  3023  	MOVLW 0x23
004C  00C2  	MOVWF delay_ms_00000_arg_del
004D  2010  	CALL delay_ms_00000


		//Output
		//Output: 0 -> C4
		trisc = trisc & 0xEF;
004E  30EF  	MOVLW 0xEF
004F  1683  	BSF STATUS, RP0
0050  0507  	ANDWF gbl_trisc, W
0051  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xEF) | 0x10;
		else
			portc = portc & 0xEF;
0052  30EF  	MOVLW 0xEF
0053  1283  	BCF STATUS, RP0
0054  0507  	ANDWF gbl_portc, W
0055  0087  	MOVWF gbl_portc


		//Output
		//Output: 1 -> C5
		trisc = trisc & 0xDF;
0056  30DF  	MOVLW 0xDF
0057  1683  	BSF STATUS, RP0
0058  0507  	ANDWF gbl_trisc, W
0059  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xDF) | 0x20;
005A  30DF  	MOVLW 0xDF
005B  1283  	BCF STATUS, RP0
005C  0507  	ANDWF gbl_portc, W
005D  00C2  	MOVWF CompTempVar2190
005E  3020  	MOVLW 0x20
005F  0442  	IORWF CompTempVar2190, W
0060  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xDF;

		//Delay
		//Delay: 800 ms
		delay_ms(255);
0061  30FF  	MOVLW 0xFF
0062  00C2  	MOVWF delay_ms_00000_arg_del
0063  2010  	CALL delay_ms_00000

		delay_ms(255);
0064  30FF  	MOVLW 0xFF
0065  00C2  	MOVWF delay_ms_00000_arg_del
0066  2010  	CALL delay_ms_00000

		delay_ms(255);
0067  30FF  	MOVLW 0xFF
0068  00C2  	MOVWF delay_ms_00000_arg_del
0069  2010  	CALL delay_ms_00000

		delay_ms(35);
006A  3023  	MOVLW 0x23
006B  00C2  	MOVWF delay_ms_00000_arg_del
006C  2010  	CALL delay_ms_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0096  1283  	BCF STATUS, RP0
0097  1303  	BCF STATUS, RP1
0098  0E36  	SWAPF Int1BContext+D'2', W
0099  0084  	MOVWF FSR
009A  0E35  	SWAPF Int1BContext+D'1', W
009B  008A  	MOVWF PCLATH
009C  0E34  	SWAPF Int1BContext, W
009D  0083  	MOVWF STATUS
009E  0EFF  	SWAPF Int1Context, F
009F  0E7F  	SWAPF Int1Context, W
00A0  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  286E  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2896  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C2  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  3EFF  	ADDLW 0xFF
0016  1D03  	BTFSS STATUS,Z
0017  2815  	GOTO	label2
0018  0000  	NOP
0019  0BC2  	DECFSZ delay_ms_00000_arg_del, F
001A  2814  	GOTO	label1
001B  0008  	RETURN
001C        ; } delay_ms function end


006E        _startup
006E  30D5  	MOVLW 0xD5
006F  1283  	BCF STATUS, RP0
0070  1303  	BCF STATUS, RP1
0071  00A0  	MOVWF gbl_14_LSR
0072  30C4  	MOVLW 0xC4
0073  00A1  	MOVWF gbl_14_LSR+D'1'
0074  30BB  	MOVLW 0xBB
0075  00A2  	MOVWF gbl_14_LSR+D'2'
0076  30DC  	MOVLW 0xDC
0077  00A3  	MOVWF gbl_14_LSR+D'3'
0078  01A4  	CLRF gbl_15_gbl_aSig
0079  01A5  	CLRF gbl_15_gbl_aSig+D'1'
007A  01A6  	CLRF gbl_15_gbl_aSig+D'2'
007B  01A7  	CLRF gbl_15_gbl_aSig+D'3'
007C  01A8  	CLRF gbl_15_gbl_bSig
007D  01A9  	CLRF gbl_15_gbl_bSig+D'1'
007E  01AA  	CLRF gbl_15_gbl_bSig+D'2'
007F  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0080  01AC  	CLRF gbl_15_gbl_zSig
0081  01AD  	CLRF gbl_15_gbl_zSig+D'1'
0082  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0083  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0084  01BC  	CLRF gbl_15_gbl_aExp
0085  01BD  	CLRF gbl_15_gbl_bExp
0086  01B7  	CLRF gbl_15_gbl_zExp
0087  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0088  01BE  	CLRF gbl_15_gbl_aSign
0089  01BF  	CLRF gbl_15_gbl_bSign
008A  01C0  	CLRF gbl_15_gbl_zSign
008B  01C1  	CLRF gbl_15_gbl_zSigZero
008C  01B0  	CLRF gbl_15_gbl_ret
008D  01B1  	CLRF gbl_15_gbl_ret+D'1'
008E  01B2  	CLRF gbl_15_gbl_ret+D'2'
008F  01B3  	CLRF gbl_15_gbl_ret+D'3'
0090  01BA  	CLRF gbl_float_rounding_mode
0091  01BB  	CLRF gbl_float_exception_flags
0092  01B9  	CLRF gbl_float_detect_tininess
0093  118A  	BCF PCLATH,3
0094  120A  	BCF PCLATH,4
0095  281C  	GOTO	main

2007  30D4  	DW 0x30D4
