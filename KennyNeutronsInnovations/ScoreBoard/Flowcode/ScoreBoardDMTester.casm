;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     D:\KennyNeutronsInnovations\ScoreBoard\Flowcode\ScoreBoardDMTester.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Tuesday, March 05, 2019 02:28:48
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F887
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_7
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x20c2
#endif
#ifdef HI_TECH_C
__CONFIG(0x20c2);
#endif
#ifdef _BOOSTC
#pragma DATA 0x2008, 0x3eff
#endif
#ifdef HI_TECH_C
__CONFIG(0x3eff);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_off_all();
void FCM_data_bank();
void FCM_latch();
void FCM_score_data_register();
void FCM_display_score();
void FCM_display_time();
void FCM_time_data_register();
void FCM_foulperiod_data_register();
void FCM_foulperiod_display();


//Variable declarations
#define FCV_TRUE (1)
#define FCV_FALSE (0)
MX_UINT8 FCV_HOME_ONES = (0x0);
030A  01C2  	CLRF gbl_FCV_HOME_ONES

MX_BOOL FCV_DAT;
MX_UINT8 FCV_SECONDS;
MX_UINT8 FCV_PERIOD = (0x0);
030B  01C5  	CLRF gbl_FCV_PERIOD

MX_UINT8 FCV_MINUTES = (0x0);
030C  01C6  	CLRF gbl_FCV_MINUTES

MX_UINT8 FCV_HOME_FOUL = (0x0);
030D  01C7  	CLRF gbl_FCV_HOME_FOUL

MX_UINT8 FCV_MINUTE_TENS;
MX_UINT8 FCV_AWAY_TENS = (0x0);
030E  01C9  	CLRF gbl_FCV_AWAY_TENS

MX_UINT8 FCV_BITS = (0x0);
030F  01CA  	CLRF gbl_FCV_BITS

MX_UINT8 FCV_SECONDS_TENS;
MX_UINT8 FCV_SCORE_AWAY = (0x0);
0310  01CC  	CLRF gbl_FCV_SCORE_AWAY

MX_UINT8 FCV_DIGIT = (0x0);
0311  01CD  	CLRF gbl_FCV_DIGIT

MX_BOOL FCV_HOME_HUNDRED = (0);
0312  10C3  	BCF gbl_FCV_HOME_HUNDRED,1

MX_UINT8 FCV_MINUTE_ONES;
MX_UINT8 FCV_AWAY_ONES;
MX_UINT8 FCV_HOME_TENS = (0x0);
0313  01D0  	CLRF gbl_FCV_HOME_TENS

MX_UINT8 FCV_SECONDS_ONES;
MX_UINT8 FCV_SCORE_HOME;
MX_BOOL FCV_AWAY_HUNDREDS = (0);
0314  1143  	BCF gbl_FCV_AWAY_HUNDREDS,2

MX_UINT8 FCV_IHAP = (0x0);
0315  01D3  	CLRF gbl_FCV_IHAP

MX_UINT8 FCV_AWAY_FOUL = (0x0);
0316  01D4  	CLRF gbl_FCV_AWAY_FOUL


MX_UINT8 FCLV_LOOP1;
MX_UINT8 FCLV_LOOP2;
MX_UINT8 FCLV_LOOP3;


#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_off_all()

{

	//Digit2
	//Output: 0 -> D0
	trisd = trisd & 0xFE;
00B2  30FE  	MOVLW 0xFE
00B3  1683  	BSF STATUS, RP0
00B4  1303  	BCF STATUS, RP1
00B5  0508  	ANDWF gbl_trisd, W
00B6  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFE) | 0x01;
	else
		portd = portd & 0xFE;
00B7  30FE  	MOVLW 0xFE
00B8  1283  	BCF STATUS, RP0
00B9  0508  	ANDWF gbl_portd, W
00BA  0088  	MOVWF gbl_portd


	//Digit1
	//Output: 0 -> D1
	trisd = trisd & 0xFD;
00BB  30FD  	MOVLW 0xFD
00BC  1683  	BSF STATUS, RP0
00BD  0508  	ANDWF gbl_trisd, W
00BE  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFD) | 0x02;
	else
		portd = portd & 0xFD;
00BF  30FD  	MOVLW 0xFD
00C0  1283  	BCF STATUS, RP0
00C1  0508  	ANDWF gbl_portd, W
00C2  0088  	MOVWF gbl_portd


}
00C3  0008  	RETURN



void FCM_data_bank()

{

	//Switch
	//Switch: digit?
	switch (FCV_DIGIT)

	{
		case 1:
0114  1283  	BCF STATUS, RP0
0115  1303  	BCF STATUS, RP1
0116  084D  	MOVF gbl_FCV_DIGIT, W
0117  3A01  	XORLW 0x01
0118  1903  	BTFSC STATUS,Z
0119  2936  	GOTO	label12
0136        label12

		{
			//Calculation
			//Calculation:
			//  bits = 0b00000110
			FCV_BITS = 6;
0136  3006  	MOVLW 0x06
0137  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 2:
011A  3A03  	XORLW 0x03
011B  1903  	BTFSC STATUS,Z
011C  2939  	GOTO	label13
0139        label13

		{
			//Calculation
			//Calculation:
			//  bits = 0b01011011
			FCV_BITS = 91;
0139  305B  	MOVLW 0x5B
013A  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 3:
011D  3A01  	XORLW 0x01
011E  1903  	BTFSC STATUS,Z
011F  293C  	GOTO	label14
013C        label14

		{
			//Calculation
			//Calculation:
			//  bits = 0b01001111
			FCV_BITS = 79;
013C  304F  	MOVLW 0x4F
013D  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 4:
0120  3A07  	XORLW 0x07
0121  1903  	BTFSC STATUS,Z
0122  293F  	GOTO	label15
013F        label15

		{
			//Calculation
			//Calculation:
			//  bits = 0b01100110
			FCV_BITS = 102;
013F  3066  	MOVLW 0x66
0140  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 5:
0123  3A01  	XORLW 0x01
0124  1903  	BTFSC STATUS,Z
0125  2942  	GOTO	label16
0142        label16

		{
			//Calculation
			//Calculation:
			//  bits = 0b01101101
			FCV_BITS = 109;
0142  306D  	MOVLW 0x6D
0143  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 6:
0126  3A03  	XORLW 0x03
0127  1903  	BTFSC STATUS,Z
0128  2945  	GOTO	label17
0145        label17

		{
			//Calculation
			//Calculation:
			//  bits = 0b01111101
			FCV_BITS = 125;
0145  307D  	MOVLW 0x7D
0146  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 7:
0129  3A01  	XORLW 0x01
012A  1903  	BTFSC STATUS,Z
012B  2948  	GOTO	label18
0148        label18

		{
			//Calculation
			//Calculation:
			//  bits = 0b00000111
			FCV_BITS = 7;
0148  3007  	MOVLW 0x07
0149  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 8:
012C  3A0F  	XORLW 0x0F
012D  1903  	BTFSC STATUS,Z
012E  294B  	GOTO	label19
014B        label19

		{
			//Calculation
			//Calculation:
			//  bits = 0b01111111
			FCV_BITS = 127;
014B  307F  	MOVLW 0x7F
014C  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 9:
012F  3A01  	XORLW 0x01
0130  1903  	BTFSC STATUS,Z
0131  294E  	GOTO	label20
014E        label20

		{
			//Calculation
			//Calculation:
			//  bits = 0b01101111
			FCV_BITS = 111;
014E  306F  	MOVLW 0x6F
014F  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		case 0:
0132  3A09  	XORLW 0x09
0133  1903  	BTFSC STATUS,Z
0134  2951  	GOTO	label21
0151        label21

		{
			//Calculation
			//Calculation:
			//  bits = 0b00111111
			FCV_BITS = 63;
0151  303F  	MOVLW 0x3F
0152  00CA  	MOVWF gbl_FCV_BITS


			break;

		}
		// default:

	}

}
0135  0008  	RETURN
0138  0008  	RETURN
013B  0008  	RETURN
013E  0008  	RETURN
0141  0008  	RETURN
0144  0008  	RETURN
0147  0008  	RETURN
014A  0008  	RETURN
014D  0008  	RETURN
0150  0008  	RETURN
0153  0008  	RETURN



void FCM_latch()

{

	//reg
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
00C4  30FD  	MOVLW 0xFD
00C5  1683  	BSF STATUS, RP0
00C6  1303  	BCF STATUS, RP1
00C7  0507  	ANDWF gbl_trisc, W
00C8  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFD) | 0x02;
00C9  30FD  	MOVLW 0xFD
00CA  1283  	BCF STATUS, RP0
00CB  0507  	ANDWF gbl_portc, W
00CC  00D8  	MOVWF CompTempVar2188
00CD  3002  	MOVLW 0x02
00CE  0458  	IORWF CompTempVar2188, W
00CF  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFD;

	//reg
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
00D0  30FD  	MOVLW 0xFD
00D1  1683  	BSF STATUS, RP0
00D2  0507  	ANDWF gbl_trisc, W
00D3  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
00D4  30FD  	MOVLW 0xFD
00D5  1283  	BCF STATUS, RP0
00D6  0507  	ANDWF gbl_portc, W
00D7  0087  	MOVWF gbl_portc


}
00D8  0008  	RETURN



void FCM_score_data_register()

{

	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<8; FCLV_LOOP1++)
0077  1283  	BCF STATUS, RP0
0078  1303  	BCF STATUS, RP1
0079  01D5  	CLRF gbl_FCLV_LOOP1
007A        label6
007A  3008  	MOVLW 0x08
007B  0255  	SUBWF gbl_FCLV_LOOP1, W
007C  1803  	BTFSC STATUS,C
00B0  0AD5  	INCF gbl_FCLV_LOOP1, F
00B1  287A  	GOTO	label6

	{

		//Calculation
		//Calculation:
		//  dat = bits AND 1
		FCV_DAT = FCV_BITS & 1;
007E  3001  	MOVLW 0x01
007F  054A  	ANDWF gbl_FCV_BITS, W
0080  00D8  	MOVWF CompTempVar2189
0081  01D9  	CLRF CompTempVar2190
0082  08D8  	MOVF CompTempVar2189, F
0083  1D03  	BTFSS STATUS,Z
0084  1459  	BSF CompTempVar2190,0
0085  1043  	BCF gbl_FCV_DAT,0
0086  0859  	MOVF CompTempVar2190, W
0087  1D03  	BTFSS STATUS,Z
0088  1443  	BSF gbl_FCV_DAT,0


		//score_data
		//Output: dat -> C3
		trisc = trisc & 0xF7;
0089  30F7  	MOVLW 0xF7
008A  1683  	BSF STATUS, RP0
008B  0507  	ANDWF gbl_trisc, W
008C  0087  	MOVWF gbl_trisc

		if ((FCV_DAT))
008D  1283  	BCF STATUS, RP0
008E  1C43  	BTFSS gbl_FCV_DAT,0
008F  2897  	GOTO	label7
0097        label7

			portc = (portc & 0xF7) | 0x08;
0090  30F7  	MOVLW 0xF7
0091  0507  	ANDWF gbl_portc, W
0092  00D8  	MOVWF CompTempVar2191
0093  3008  	MOVLW 0x08
0094  0458  	IORWF CompTempVar2191, W
0095  0087  	MOVWF gbl_portc

		else
0096  289A  	GOTO	label8
009A        label8

			portc = portc & 0xF7;
0097  30F7  	MOVLW 0xF7
0098  0507  	ANDWF gbl_portc, W
0099  0087  	MOVWF gbl_portc


		//clk
		//Output: 1 -> C0
		trisc = trisc & 0xFE;
009A  30FE  	MOVLW 0xFE
009B  1683  	BSF STATUS, RP0
009C  0507  	ANDWF gbl_trisc, W
009D  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFE) | 0x01;
009E  30FE  	MOVLW 0xFE
009F  1283  	BCF STATUS, RP0
00A0  0507  	ANDWF gbl_portc, W
00A1  00D8  	MOVWF CompTempVar2192
00A2  3001  	MOVLW 0x01
00A3  0458  	IORWF CompTempVar2192, W
00A4  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFE;

		//clk
		//Output: 0 -> C0
		trisc = trisc & 0xFE;
00A5  30FE  	MOVLW 0xFE
00A6  1683  	BSF STATUS, RP0
00A7  0507  	ANDWF gbl_trisc, W
00A8  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFE) | 0x01;
		else
			portc = portc & 0xFE;
00A9  30FE  	MOVLW 0xFE
00AA  1283  	BCF STATUS, RP0
00AB  0507  	ANDWF gbl_portc, W
00AC  0087  	MOVWF gbl_portc


		//Calculation
		//Calculation:
		//  bits = bits >> 1
		FCV_BITS = FCV_BITS >> 1;
00AD  08CA  	MOVF gbl_FCV_BITS, F
00AE  1003  	BCF STATUS,C
00AF  0CCA  	RRF gbl_FCV_BITS, F



	}

}
007D  0008  	RETURN



void FCM_display_score()

{

	//Call Macro
	//Call Macro: off_all()
	FCM_off_all();
01F8  20B2  	CALL FCM_off_al_00051


	//Calculation
	//Calculation:
	//  digit = away_ones
	FCV_DIGIT = FCV_AWAY_ONES;
01F9  084F  	MOVF gbl_FCV_AWAY_ONES, W
01FA  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
01FB  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: score_data_register()
	FCM_score_data_register();
01FC  2077  	CALL FCM_score__00053


	//Calculation
	//Calculation:
	//  digit = home_ones
	FCV_DIGIT = FCV_HOME_ONES;
01FD  0842  	MOVF gbl_FCV_HOME_ONES, W
01FE  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
01FF  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: score_data_register()
	FCM_score_data_register();
0200  2077  	CALL FCM_score__00053


	//Call Macro
	//Call Macro: latch()
	FCM_latch();
0201  20C4  	CALL FCM_latch_00000


	//Digit2
	//Output: 0 -> D0
	trisd = trisd & 0xFE;
0202  30FE  	MOVLW 0xFE
0203  1683  	BSF STATUS, RP0
0204  0508  	ANDWF gbl_trisd, W
0205  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFE) | 0x01;
	else
		portd = portd & 0xFE;
0206  30FE  	MOVLW 0xFE
0207  1283  	BCF STATUS, RP0
0208  0508  	ANDWF gbl_portd, W
0209  0088  	MOVWF gbl_portd


	//Digit1
	//Output: 1 -> D1
	trisd = trisd & 0xFD;
020A  30FD  	MOVLW 0xFD
020B  1683  	BSF STATUS, RP0
020C  0508  	ANDWF gbl_trisd, W
020D  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xFD) | 0x02;
020E  30FD  	MOVLW 0xFD
020F  1283  	BCF STATUS, RP0
0210  0508  	ANDWF gbl_portd, W
0211  00D8  	MOVWF CompTempVar2194
0212  3002  	MOVLW 0x02
0213  0458  	IORWF CompTempVar2194, W
0214  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xFD;

	//Delay
	//Delay: 1 ms
	delay_ms(1);
0215  3001  	MOVLW 0x01
0216  00D8  	MOVWF delay_ms_00000_arg_del
0217  2010  	CALL delay_ms_00000


	//Comment:
	//END of Digit1

	//Call Macro
	//Call Macro: off_all()
	FCM_off_all();
0218  20B2  	CALL FCM_off_al_00051


	//Calculation
	//Calculation:
	//  digit = away_tens
	FCV_DIGIT = FCV_AWAY_TENS;
0219  0849  	MOVF gbl_FCV_AWAY_TENS, W
021A  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
021B  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: score_data_register()
	FCM_score_data_register();
021C  2077  	CALL FCM_score__00053


	//Calculation
	//Calculation:
	//  digit = home_tens
	FCV_DIGIT = FCV_HOME_TENS;
021D  0850  	MOVF gbl_FCV_HOME_TENS, W
021E  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
021F  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: score_data_register()
	FCM_score_data_register();
0220  2077  	CALL FCM_score__00053


	//Call Macro
	//Call Macro: latch()
	FCM_latch();
0221  20C4  	CALL FCM_latch_00000


	//Digit2
	//Output: 1 -> D0
	trisd = trisd & 0xFE;
0222  30FE  	MOVLW 0xFE
0223  1683  	BSF STATUS, RP0
0224  0508  	ANDWF gbl_trisd, W
0225  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xFE) | 0x01;
0226  30FE  	MOVLW 0xFE
0227  1283  	BCF STATUS, RP0
0228  0508  	ANDWF gbl_portd, W
0229  00D8  	MOVWF CompTempVar2195
022A  3001  	MOVLW 0x01
022B  0458  	IORWF CompTempVar2195, W
022C  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xFE;

	//Digit1
	//Output: 0 -> D1
	trisd = trisd & 0xFD;
022D  30FD  	MOVLW 0xFD
022E  1683  	BSF STATUS, RP0
022F  0508  	ANDWF gbl_trisd, W
0230  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFD) | 0x02;
	else
		portd = portd & 0xFD;
0231  30FD  	MOVLW 0xFD
0232  1283  	BCF STATUS, RP0
0233  0508  	ANDWF gbl_portd, W
0234  0088  	MOVWF gbl_portd


	//Delay
	//Delay: 1 ms
	delay_ms(1);
0235  3001  	MOVLW 0x01
0236  00D8  	MOVWF delay_ms_00000_arg_del
0237  2010  	CALL delay_ms_00000


}
0238  0008  	RETURN



void FCM_display_time()

{

	//Call Macro
	//Call Macro: off_all()
	FCM_off_all();
01B7  20B2  	CALL FCM_off_al_00051


	//Calculation
	//Calculation:
	//  digit = minute_ones
	FCV_DIGIT = FCV_MINUTE_ONES;
01B8  084E  	MOVF gbl_FCV_MINUTE_ONES, W
01B9  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
01BA  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: time_data_register()
	FCM_time_data_register();
01BB  203C  	CALL FCM_time_d_00056


	//Calculation
	//Calculation:
	//  digit = seconds_ones
	FCV_DIGIT = FCV_SECONDS_ONES;
01BC  0851  	MOVF gbl_FCV_SECONDS_ONES, W
01BD  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
01BE  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: time_data_register()
	FCM_time_data_register();
01BF  203C  	CALL FCM_time_d_00056


	//Call Macro
	//Call Macro: latch()
	FCM_latch();
01C0  20C4  	CALL FCM_latch_00000


	//Digit2
	//Output: 0 -> D0
	trisd = trisd & 0xFE;
01C1  30FE  	MOVLW 0xFE
01C2  1683  	BSF STATUS, RP0
01C3  0508  	ANDWF gbl_trisd, W
01C4  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFE) | 0x01;
	else
		portd = portd & 0xFE;
01C5  30FE  	MOVLW 0xFE
01C6  1283  	BCF STATUS, RP0
01C7  0508  	ANDWF gbl_portd, W
01C8  0088  	MOVWF gbl_portd


	//Digit1
	//Output: 1 -> D1
	trisd = trisd & 0xFD;
01C9  30FD  	MOVLW 0xFD
01CA  1683  	BSF STATUS, RP0
01CB  0508  	ANDWF gbl_trisd, W
01CC  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xFD) | 0x02;
01CD  30FD  	MOVLW 0xFD
01CE  1283  	BCF STATUS, RP0
01CF  0508  	ANDWF gbl_portd, W
01D0  00D8  	MOVWF CompTempVar2196
01D1  3002  	MOVLW 0x02
01D2  0458  	IORWF CompTempVar2196, W
01D3  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xFD;

	//Delay
	//Delay: 1 ms
	delay_ms(1);
01D4  3001  	MOVLW 0x01
01D5  00D8  	MOVWF delay_ms_00000_arg_del
01D6  2010  	CALL delay_ms_00000


	//Comment:
	//END of Digit1

	//Call Macro
	//Call Macro: off_all()
	FCM_off_all();
01D7  20B2  	CALL FCM_off_al_00051


	//Calculation
	//Calculation:
	//  digit = minute_tens
	FCV_DIGIT = FCV_MINUTE_TENS;
01D8  0848  	MOVF gbl_FCV_MINUTE_TENS, W
01D9  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
01DA  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: time_data_register()
	FCM_time_data_register();
01DB  203C  	CALL FCM_time_d_00056


	//Calculation
	//Calculation:
	//  digit = seconds_tens
	FCV_DIGIT = FCV_SECONDS_TENS;
01DC  084B  	MOVF gbl_FCV_SECONDS_TENS, W
01DD  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
01DE  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: time_data_register()
	FCM_time_data_register();
01DF  203C  	CALL FCM_time_d_00056


	//Call Macro
	//Call Macro: latch()
	FCM_latch();
01E0  20C4  	CALL FCM_latch_00000


	//Digit2
	//Output: 1 -> D0
	trisd = trisd & 0xFE;
01E1  30FE  	MOVLW 0xFE
01E2  1683  	BSF STATUS, RP0
01E3  0508  	ANDWF gbl_trisd, W
01E4  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xFE) | 0x01;
01E5  30FE  	MOVLW 0xFE
01E6  1283  	BCF STATUS, RP0
01E7  0508  	ANDWF gbl_portd, W
01E8  00D8  	MOVWF CompTempVar2197
01E9  3001  	MOVLW 0x01
01EA  0458  	IORWF CompTempVar2197, W
01EB  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xFE;

	//Digit1
	//Output: 0 -> D1
	trisd = trisd & 0xFD;
01EC  30FD  	MOVLW 0xFD
01ED  1683  	BSF STATUS, RP0
01EE  0508  	ANDWF gbl_trisd, W
01EF  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFD) | 0x02;
	else
		portd = portd & 0xFD;
01F0  30FD  	MOVLW 0xFD
01F1  1283  	BCF STATUS, RP0
01F2  0508  	ANDWF gbl_portd, W
01F3  0088  	MOVWF gbl_portd


	//Delay
	//Delay: 1 ms
	delay_ms(1);
01F4  3001  	MOVLW 0x01
01F5  00D8  	MOVWF delay_ms_00000_arg_del
01F6  2010  	CALL delay_ms_00000


}
01F7  0008  	RETURN



void FCM_time_data_register()

{

	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP2=0; FCLV_LOOP2<8; FCLV_LOOP2++)
003C  1283  	BCF STATUS, RP0
003D  1303  	BCF STATUS, RP1
003E  01D6  	CLRF gbl_FCLV_LOOP2
003F        label3
003F  3008  	MOVLW 0x08
0040  0256  	SUBWF gbl_FCLV_LOOP2, W
0041  1803  	BTFSC STATUS,C
0075  0AD6  	INCF gbl_FCLV_LOOP2, F
0076  283F  	GOTO	label3

	{

		//Calculation
		//Calculation:
		//  dat = bits AND 1
		FCV_DAT = FCV_BITS & 1;
0043  3001  	MOVLW 0x01
0044  054A  	ANDWF gbl_FCV_BITS, W
0045  00D8  	MOVWF CompTempVar2198
0046  01D9  	CLRF CompTempVar2199
0047  08D8  	MOVF CompTempVar2198, F
0048  1D03  	BTFSS STATUS,Z
0049  1459  	BSF CompTempVar2199,0
004A  1043  	BCF gbl_FCV_DAT,0
004B  0859  	MOVF CompTempVar2199, W
004C  1D03  	BTFSS STATUS,Z
004D  1443  	BSF gbl_FCV_DAT,0


		//time_data
		//Output: dat -> C2
		trisc = trisc & 0xFB;
004E  30FB  	MOVLW 0xFB
004F  1683  	BSF STATUS, RP0
0050  0507  	ANDWF gbl_trisc, W
0051  0087  	MOVWF gbl_trisc

		if ((FCV_DAT))
0052  1283  	BCF STATUS, RP0
0053  1C43  	BTFSS gbl_FCV_DAT,0
0054  285C  	GOTO	label4
005C        label4

			portc = (portc & 0xFB) | 0x04;
0055  30FB  	MOVLW 0xFB
0056  0507  	ANDWF gbl_portc, W
0057  00D8  	MOVWF CompTempVar2200
0058  3004  	MOVLW 0x04
0059  0458  	IORWF CompTempVar2200, W
005A  0087  	MOVWF gbl_portc

		else
005B  285F  	GOTO	label5
005F        label5

			portc = portc & 0xFB;
005C  30FB  	MOVLW 0xFB
005D  0507  	ANDWF gbl_portc, W
005E  0087  	MOVWF gbl_portc


		//clk
		//Output: 1 -> C0
		trisc = trisc & 0xFE;
005F  30FE  	MOVLW 0xFE
0060  1683  	BSF STATUS, RP0
0061  0507  	ANDWF gbl_trisc, W
0062  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFE) | 0x01;
0063  30FE  	MOVLW 0xFE
0064  1283  	BCF STATUS, RP0
0065  0507  	ANDWF gbl_portc, W
0066  00D8  	MOVWF CompTempVar2201
0067  3001  	MOVLW 0x01
0068  0458  	IORWF CompTempVar2201, W
0069  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFE;

		//clk
		//Output: 0 -> C0
		trisc = trisc & 0xFE;
006A  30FE  	MOVLW 0xFE
006B  1683  	BSF STATUS, RP0
006C  0507  	ANDWF gbl_trisc, W
006D  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFE) | 0x01;
		else
			portc = portc & 0xFE;
006E  30FE  	MOVLW 0xFE
006F  1283  	BCF STATUS, RP0
0070  0507  	ANDWF gbl_portc, W
0071  0087  	MOVWF gbl_portc


		//Calculation
		//Calculation:
		//  bits = bits >> 1
		FCV_BITS = FCV_BITS >> 1;
0072  08CA  	MOVF gbl_FCV_BITS, F
0073  1003  	BCF STATUS,C
0074  0CCA  	RRF gbl_FCV_BITS, F



	}

}
0042  0008  	RETURN



void FCM_foulperiod_data_register()

{

	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP3=0; FCLV_LOOP3<8; FCLV_LOOP3++)
00D9  1283  	BCF STATUS, RP0
00DA  1303  	BCF STATUS, RP1
00DB  01D7  	CLRF gbl_FCLV_LOOP3
00DC        label9
00DC  3008  	MOVLW 0x08
00DD  0257  	SUBWF gbl_FCLV_LOOP3, W
00DE  1803  	BTFSC STATUS,C
0112  0AD7  	INCF gbl_FCLV_LOOP3, F
0113  28DC  	GOTO	label9

	{

		//Calculation
		//Calculation:
		//  dat = bits AND 1
		FCV_DAT = FCV_BITS & 1;
00E0  3001  	MOVLW 0x01
00E1  054A  	ANDWF gbl_FCV_BITS, W
00E2  00D8  	MOVWF CompTempVar2203
00E3  01D9  	CLRF CompTempVar2204
00E4  08D8  	MOVF CompTempVar2203, F
00E5  1D03  	BTFSS STATUS,Z
00E6  1459  	BSF CompTempVar2204,0
00E7  1043  	BCF gbl_FCV_DAT,0
00E8  0859  	MOVF CompTempVar2204, W
00E9  1D03  	BTFSS STATUS,Z
00EA  1443  	BSF gbl_FCV_DAT,0


		//foulperiod_data
		//Output: dat -> C4
		trisc = trisc & 0xEF;
00EB  30EF  	MOVLW 0xEF
00EC  1683  	BSF STATUS, RP0
00ED  0507  	ANDWF gbl_trisc, W
00EE  0087  	MOVWF gbl_trisc

		if ((FCV_DAT))
00EF  1283  	BCF STATUS, RP0
00F0  1C43  	BTFSS gbl_FCV_DAT,0
00F1  28F9  	GOTO	label10
00F9        label10

			portc = (portc & 0xEF) | 0x10;
00F2  30EF  	MOVLW 0xEF
00F3  0507  	ANDWF gbl_portc, W
00F4  00D8  	MOVWF CompTempVar2205
00F5  3010  	MOVLW 0x10
00F6  0458  	IORWF CompTempVar2205, W
00F7  0087  	MOVWF gbl_portc

		else
00F8  28FC  	GOTO	label11
00FC        label11

			portc = portc & 0xEF;
00F9  30EF  	MOVLW 0xEF
00FA  0507  	ANDWF gbl_portc, W
00FB  0087  	MOVWF gbl_portc


		//clk
		//Output: 1 -> C0
		trisc = trisc & 0xFE;
00FC  30FE  	MOVLW 0xFE
00FD  1683  	BSF STATUS, RP0
00FE  0507  	ANDWF gbl_trisc, W
00FF  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFE) | 0x01;
0100  30FE  	MOVLW 0xFE
0101  1283  	BCF STATUS, RP0
0102  0507  	ANDWF gbl_portc, W
0103  00D8  	MOVWF CompTempVar2206
0104  3001  	MOVLW 0x01
0105  0458  	IORWF CompTempVar2206, W
0106  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFE;

		//clk
		//Output: 0 -> C0
		trisc = trisc & 0xFE;
0107  30FE  	MOVLW 0xFE
0108  1683  	BSF STATUS, RP0
0109  0507  	ANDWF gbl_trisc, W
010A  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFE) | 0x01;
		else
			portc = portc & 0xFE;
010B  30FE  	MOVLW 0xFE
010C  1283  	BCF STATUS, RP0
010D  0507  	ANDWF gbl_portc, W
010E  0087  	MOVWF gbl_portc


		//Calculation
		//Calculation:
		//  bits = bits >> 1
		FCV_BITS = FCV_BITS >> 1;
010F  08CA  	MOVF gbl_FCV_BITS, F
0110  1003  	BCF STATUS,C
0111  0CCA  	RRF gbl_FCV_BITS, F



	}

}
00DF  0008  	RETURN



void FCM_foulperiod_display()

{

	//Call Macro
	//Call Macro: off_all()
	FCM_off_all();
0176  20B2  	CALL FCM_off_al_00051


	//Calculation
	//Calculation:
	//  digit = away_foul
	FCV_DIGIT = FCV_AWAY_FOUL;
0177  0854  	MOVF gbl_FCV_AWAY_FOUL, W
0178  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
0179  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: foulperiod_data_register()
	FCM_foulperiod_data_register();
017A  20D9  	CALL FCM_foulpe_00057


	//Calculation
	//Calculation:
	//  digit = period
	FCV_DIGIT = FCV_PERIOD;
017B  0845  	MOVF gbl_FCV_PERIOD, W
017C  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
017D  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: foulperiod_data_register()
	FCM_foulperiod_data_register();
017E  20D9  	CALL FCM_foulpe_00057


	//Call Macro
	//Call Macro: latch()
	FCM_latch();
017F  20C4  	CALL FCM_latch_00000


	//Digit2
	//Output: 0 -> D0
	trisd = trisd & 0xFE;
0180  30FE  	MOVLW 0xFE
0181  1683  	BSF STATUS, RP0
0182  0508  	ANDWF gbl_trisd, W
0183  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFE) | 0x01;
	else
		portd = portd & 0xFE;
0184  30FE  	MOVLW 0xFE
0185  1283  	BCF STATUS, RP0
0186  0508  	ANDWF gbl_portd, W
0187  0088  	MOVWF gbl_portd


	//Digit1
	//Output: 1 -> D1
	trisd = trisd & 0xFD;
0188  30FD  	MOVLW 0xFD
0189  1683  	BSF STATUS, RP0
018A  0508  	ANDWF gbl_trisd, W
018B  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xFD) | 0x02;
018C  30FD  	MOVLW 0xFD
018D  1283  	BCF STATUS, RP0
018E  0508  	ANDWF gbl_portd, W
018F  00D8  	MOVWF CompTempVar2208
0190  3002  	MOVLW 0x02
0191  0458  	IORWF CompTempVar2208, W
0192  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xFD;

	//Delay
	//Delay: 1 ms
	delay_ms(1);
0193  3001  	MOVLW 0x01
0194  00D8  	MOVWF delay_ms_00000_arg_del
0195  2010  	CALL delay_ms_00000


	//Call Macro
	//Call Macro: off_all()
	FCM_off_all();
0196  20B2  	CALL FCM_off_al_00051


	//Calculation
	//Calculation:
	//  digit = home_foul
	FCV_DIGIT = FCV_HOME_FOUL;
0197  0847  	MOVF gbl_FCV_HOME_FOUL, W
0198  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
0199  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: foulperiod_data_register()
	FCM_foulperiod_data_register();
019A  20D9  	CALL FCM_foulpe_00057


	//Calculation
	//Calculation:
	//  digit = period
	FCV_DIGIT = FCV_PERIOD;
019B  0845  	MOVF gbl_FCV_PERIOD, W
019C  00CD  	MOVWF gbl_FCV_DIGIT


	//Call Macro
	//Call Macro: data_bank()
	FCM_data_bank();
019D  2114  	CALL FCM_data_b_00052


	//Call Macro
	//Call Macro: foulperiod_data_register()
	FCM_foulperiod_data_register();
019E  20D9  	CALL FCM_foulpe_00057


	//Call Macro
	//Call Macro: latch()
	FCM_latch();
019F  20C4  	CALL FCM_latch_00000


	//Digit2
	//Output: 1 -> D0
	trisd = trisd & 0xFE;
01A0  30FE  	MOVLW 0xFE
01A1  1683  	BSF STATUS, RP0
01A2  0508  	ANDWF gbl_trisd, W
01A3  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xFE) | 0x01;
01A4  30FE  	MOVLW 0xFE
01A5  1283  	BCF STATUS, RP0
01A6  0508  	ANDWF gbl_portd, W
01A7  00D8  	MOVWF CompTempVar2209
01A8  3001  	MOVLW 0x01
01A9  0458  	IORWF CompTempVar2209, W
01AA  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xFE;

	//Digit1
	//Output: 0 -> D1
	trisd = trisd & 0xFD;
01AB  30FD  	MOVLW 0xFD
01AC  1683  	BSF STATUS, RP0
01AD  0508  	ANDWF gbl_trisd, W
01AE  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFD) | 0x02;
	else
		portd = portd & 0xFD;
01AF  30FD  	MOVLW 0xFD
01B0  1283  	BCF STATUS, RP0
01B1  0508  	ANDWF gbl_portd, W
01B2  0088  	MOVWF gbl_portd


	//Delay
	//Delay: 1 ms
	delay_ms(1);
01B3  3001  	MOVLW 0x01
01B4  00D8  	MOVWF delay_ms_00000_arg_del
01B5  2010  	CALL delay_ms_00000


}
01B6  0008  	RETURN




void main()

{
	//Initialization
	ansel = 0;
0239  1683  	BSF STATUS, RP0
023A  1703  	BSF STATUS, RP1
023B  0188  	CLRF gbl_ansel

anselh = 0;
023C  0189  	CLRF gbl_anselh



	//Interrupt initialization code
	option_reg = 0xC0;
023D  30C0  	MOVLW 0xC0
023E  1303  	BCF STATUS, RP1
023F  0081  	MOVWF gbl_option_reg



	//Home_ONE
	//Output: 0 -> D2
	trisd = trisd & 0xFB;
0240  30FB  	MOVLW 0xFB
0241  0508  	ANDWF gbl_trisd, W
0242  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFB) | 0x04;
	else
		portd = portd & 0xFB;
0243  30FB  	MOVLW 0xFB
0244  1283  	BCF STATUS, RP0
0245  0508  	ANDWF gbl_portd, W
0246  0088  	MOVWF gbl_portd


	//Guest_ONE
	//Output: 0 -> D3
	trisd = trisd & 0xF7;
0247  30F7  	MOVLW 0xF7
0248  1683  	BSF STATUS, RP0
0249  0508  	ANDWF gbl_trisd, W
024A  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xF7) | 0x08;
	else
		portd = portd & 0xF7;
024B  30F7  	MOVLW 0xF7
024C  1283  	BCF STATUS, RP0
024D  0508  	ANDWF gbl_portd, W
024E  0088  	MOVWF gbl_portd


	//clk
	//Output: 0 -> C0
	trisc = trisc & 0xFE;
024F  30FE  	MOVLW 0xFE
0250  1683  	BSF STATUS, RP0
0251  0507  	ANDWF gbl_trisc, W
0252  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFE) | 0x01;
	else
		portc = portc & 0xFE;
0253  30FE  	MOVLW 0xFE
0254  1283  	BCF STATUS, RP0
0255  0507  	ANDWF gbl_portc, W
0256  0087  	MOVWF gbl_portc


	//reg
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
0257  30FD  	MOVLW 0xFD
0258  1683  	BSF STATUS, RP0
0259  0507  	ANDWF gbl_trisc, W
025A  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
025B  30FD  	MOVLW 0xFD
025C  1283  	BCF STATUS, RP0
025D  0507  	ANDWF gbl_portc, W
025E  0087  	MOVWF gbl_portc


	//Digit2
	//Output: 0 -> D0
	trisd = trisd & 0xFE;
025F  30FE  	MOVLW 0xFE
0260  1683  	BSF STATUS, RP0
0261  0508  	ANDWF gbl_trisd, W
0262  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xFE) | 0x01;
	else
		portd = portd & 0xFE;
0263  30FE  	MOVLW 0xFE
0264  1283  	BCF STATUS, RP0
0265  0508  	ANDWF gbl_portd, W
0266  0088  	MOVWF gbl_portd


	//Digit1
	//Output: 1 -> D1
	trisd = trisd & 0xFD;
0267  30FD  	MOVLW 0xFD
0268  1683  	BSF STATUS, RP0
0269  0508  	ANDWF gbl_trisd, W
026A  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xFD) | 0x02;
026B  30FD  	MOVLW 0xFD
026C  1283  	BCF STATUS, RP0
026D  0508  	ANDWF gbl_portd, W
026E  00D8  	MOVWF CompTempVar2210
026F  3002  	MOVLW 0x02
0270  0458  	IORWF CompTempVar2210, W
0271  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xFD;

	//Dot
	//Output: 0 -> D5
	trisd = trisd & 0xDF;
0272  30DF  	MOVLW 0xDF
0273  1683  	BSF STATUS, RP0
0274  0508  	ANDWF gbl_trisd, W
0275  0088  	MOVWF gbl_trisd

	if ((0))
		portd = (portd & 0xDF) | 0x20;
	else
		portd = portd & 0xDF;
0276  30DF  	MOVLW 0xDF
0277  1283  	BCF STATUS, RP0
0278  0508  	ANDWF gbl_portd, W
0279  0088  	MOVWF gbl_portd


	//Colon
	//Output: 1 -> D4
	trisd = trisd & 0xEF;
027A  30EF  	MOVLW 0xEF
027B  1683  	BSF STATUS, RP0
027C  0508  	ANDWF gbl_trisd, W
027D  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xEF) | 0x10;
027E  30EF  	MOVLW 0xEF
027F  1283  	BCF STATUS, RP0
0280  0508  	ANDWF gbl_portd, W
0281  00D8  	MOVWF CompTempVar2211
0282  3010  	MOVLW 0x10
0283  0458  	IORWF CompTempVar2211, W
0284  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xEF;

	//home_one
	//Output: 1 -> D2
	trisd = trisd & 0xFB;
0285  30FB  	MOVLW 0xFB
0286  1683  	BSF STATUS, RP0
0287  0508  	ANDWF gbl_trisd, W
0288  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xFB) | 0x04;
0289  30FB  	MOVLW 0xFB
028A  1283  	BCF STATUS, RP0
028B  0508  	ANDWF gbl_portd, W
028C  00D8  	MOVWF CompTempVar2212
028D  3004  	MOVLW 0x04
028E  0458  	IORWF CompTempVar2212, W
028F  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xFB;

	//away_one
	//Output: 1 -> D3
	trisd = trisd & 0xF7;
0290  30F7  	MOVLW 0xF7
0291  1683  	BSF STATUS, RP0
0292  0508  	ANDWF gbl_trisd, W
0293  0088  	MOVWF gbl_trisd

	if ((1))
		portd = (portd & 0xF7) | 0x08;
0294  30F7  	MOVLW 0xF7
0295  1283  	BCF STATUS, RP0
0296  0508  	ANDWF gbl_portd, W
0297  00D8  	MOVWF CompTempVar2213
0298  3008  	MOVLW 0x08
0299  0458  	IORWF CompTempVar2213, W
029A  0088  	MOVWF gbl_portd

	else
		portd = portd & 0xF7;

	//Loop
	//Loop: While 1
	while (1)
029B        label26
02E4  2A9B  	GOTO	label26

	{

		//Calculation
		//Calculation:
		//  score_away = 56
		//  score_home = 78
		FCV_SCORE_AWAY = 56;
029B  3038  	MOVLW 0x38
029C  00CC  	MOVWF gbl_FCV_SCORE_AWAY

		FCV_SCORE_HOME = 78;
029D  304E  	MOVLW 0x4E
029E  00D2  	MOVWF gbl_FCV_SCORE_HOME


		//Calculation
		//Calculation:
		//  away_tens = score_away / 10
		//  away_ones = score_away % 10
		//  home_tens = score_home / 10
		//  home_ones = score_home % 10
		FCV_AWAY_TENS = FCV_SCORE_AWAY / 10;
029F  084C  	MOVF gbl_FCV_SCORE_AWAY, W
02A0  00D8  	MOVWF __div_8_8_00000_arg_a
02A1  300A  	MOVLW 0x0A
02A2  00D9  	MOVWF __div_8_8_00000_arg_b
02A3  2165  	CALL __div_8_8_00000
02A4  085C  	MOVF CompTempVarRet218, W
02A5  00C9  	MOVWF gbl_FCV_AWAY_TENS

		FCV_AWAY_ONES = FCV_SCORE_AWAY % 10;
02A6  084C  	MOVF gbl_FCV_SCORE_AWAY, W
02A7  00D8  	MOVWF __rem_8_8_00000_arg_a
02A8  300A  	MOVLW 0x0A
02A9  00D9  	MOVWF __rem_8_8_00000_arg_b
02AA  2154  	CALL __rem_8_8_00000
02AB  085C  	MOVF CompTempVarRet220, W
02AC  00CF  	MOVWF gbl_FCV_AWAY_ONES

		FCV_HOME_TENS = FCV_SCORE_HOME / 10;
02AD  0852  	MOVF gbl_FCV_SCORE_HOME, W
02AE  00D8  	MOVWF __div_8_8_00000_arg_a
02AF  300A  	MOVLW 0x0A
02B0  00D9  	MOVWF __div_8_8_00000_arg_b
02B1  2165  	CALL __div_8_8_00000
02B2  085C  	MOVF CompTempVarRet218, W
02B3  00D0  	MOVWF gbl_FCV_HOME_TENS

		FCV_HOME_ONES = FCV_SCORE_HOME % 10;
02B4  0852  	MOVF gbl_FCV_SCORE_HOME, W
02B5  00D8  	MOVWF __rem_8_8_00000_arg_a
02B6  300A  	MOVLW 0x0A
02B7  00D9  	MOVWF __rem_8_8_00000_arg_b
02B8  2154  	CALL __rem_8_8_00000
02B9  085C  	MOVF CompTempVarRet220, W
02BA  00C2  	MOVWF gbl_FCV_HOME_ONES


		//Call Macro
		//Call Macro: display_score()
		FCM_display_score();
02BB  21F8  	CALL FCM_displa_00054


		//Calculation
		//Calculation:
		//  minutes = 12
		//  seconds = 34
		FCV_MINUTES = 12;
02BC  300C  	MOVLW 0x0C
02BD  00C6  	MOVWF gbl_FCV_MINUTES

		FCV_SECONDS = 34;
02BE  3022  	MOVLW 0x22
02BF  00C4  	MOVWF gbl_FCV_SECONDS


		//Calculation
		//Calculation:
		//  minute_tens = minutes / 10
		//  minute_ones = minutes % 10
		//  seconds_tens = seconds / 10
		//  seconds_ones = seconds % 10
		FCV_MINUTE_TENS = FCV_MINUTES / 10;
02C0  0846  	MOVF gbl_FCV_MINUTES, W
02C1  00D8  	MOVWF __div_8_8_00000_arg_a
02C2  300A  	MOVLW 0x0A
02C3  00D9  	MOVWF __div_8_8_00000_arg_b
02C4  2165  	CALL __div_8_8_00000
02C5  085C  	MOVF CompTempVarRet218, W
02C6  00C8  	MOVWF gbl_FCV_MINUTE_TENS

		FCV_MINUTE_ONES = FCV_MINUTES % 10;
02C7  0846  	MOVF gbl_FCV_MINUTES, W
02C8  00D8  	MOVWF __rem_8_8_00000_arg_a
02C9  300A  	MOVLW 0x0A
02CA  00D9  	MOVWF __rem_8_8_00000_arg_b
02CB  2154  	CALL __rem_8_8_00000
02CC  085C  	MOVF CompTempVarRet220, W
02CD  00CE  	MOVWF gbl_FCV_MINUTE_ONES

		FCV_SECONDS_TENS = FCV_SECONDS / 10;
02CE  0844  	MOVF gbl_FCV_SECONDS, W
02CF  00D8  	MOVWF __div_8_8_00000_arg_a
02D0  300A  	MOVLW 0x0A
02D1  00D9  	MOVWF __div_8_8_00000_arg_b
02D2  2165  	CALL __div_8_8_00000
02D3  085C  	MOVF CompTempVarRet218, W
02D4  00CB  	MOVWF gbl_FCV_SECONDS_TENS

		FCV_SECONDS_ONES = FCV_SECONDS % 10;
02D5  0844  	MOVF gbl_FCV_SECONDS, W
02D6  00D8  	MOVWF __rem_8_8_00000_arg_a
02D7  300A  	MOVLW 0x0A
02D8  00D9  	MOVWF __rem_8_8_00000_arg_b
02D9  2154  	CALL __rem_8_8_00000
02DA  085C  	MOVF CompTempVarRet220, W
02DB  00D1  	MOVWF gbl_FCV_SECONDS_ONES


		//Call Macro
		//Call Macro: display_time()
		FCM_display_time();
02DC  21B7  	CALL FCM_displa_00055


		//Calculation
		//Calculation:
		//  away_foul = 9
		//  home_foul = 8
		//  period = 3
		FCV_AWAY_FOUL = 9;
02DD  3009  	MOVLW 0x09
02DE  00D4  	MOVWF gbl_FCV_AWAY_FOUL

		FCV_HOME_FOUL = 8;
02DF  3008  	MOVLW 0x08
02E0  00C7  	MOVWF gbl_FCV_HOME_FOUL

		FCV_PERIOD = 3;
02E1  3003  	MOVLW 0x03
02E2  00C5  	MOVWF gbl_FCV_PERIOD


		//Call Macro
		//Call Macro: foulperiod_display()
		FCM_foulperiod_display();
02E3  2176  	CALL FCM_foulpe_00058



	}

	//score_data
	//Output: dat -> C3
	trisc = trisc & 0xF7;

	if ((FCV_DAT))
		portc = (portc & 0xF7) | 0x08;

	else
		portc = portc & 0xF7;


	//time_data
	//Output: dat -> C2
	trisc = trisc & 0xFB;

	if ((FCV_DAT))
		portc = (portc & 0xFB) | 0x04;

	else
		portc = portc & 0xFB;


	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
031A  1283  	BCF STATUS, RP0
031B  1303  	BCF STATUS, RP1
031C  0E36  	SWAPF Int1BContext+D'2', W
031D  0084  	MOVWF FSR
031E  0E35  	SWAPF Int1BContext+D'1', W
031F  008A  	MOVWF PCLATH
0320  0E34  	SWAPF Int1BContext, W
0321  0083  	MOVWF STATUS
0322  0EFF  	SWAPF Int1Context, F
0323  0E7F  	SWAPF Int1Context, W
0324  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2AE5  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2B1A  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08D8  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  2815  	GOTO	label2
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0BD8  	DECFSZ delay_ms_00000_arg_del, F
003A  2814  	GOTO	label1
003B  0008  	RETURN
003C        ; } delay_ms function end


0154        __rem_8_8_00000
0154        ; { __rem_8_8 ; function begin
0154  01DC  	CLRF CompTempVarRet220
0155  01DA  	CLRF __rem_8_8_00000_1_c
0156  01DB  	CLRF __rem_8_8_00000_1_i
0157        label22
0157  19DB  	BTFSC __rem_8_8_00000_1_i,3
0158  0008  	RETURN
0159  1003  	BCF STATUS,C
015A  0DDA  	RLF __rem_8_8_00000_1_c, F
015B  0DD8  	RLF __rem_8_8_00000_arg_a, F
015C  0DDC  	RLF CompTempVarRet220, F
015D  0859  	MOVF __rem_8_8_00000_arg_b, W
015E  025C  	SUBWF CompTempVarRet220, W
015F  1C03  	BTFSS STATUS,C
0160  2963  	GOTO	label23
0161  00DC  	MOVWF CompTempVarRet220
0162  145A  	BSF __rem_8_8_00000_1_c,0
0163        label23
0163  0ADB  	INCF __rem_8_8_00000_1_i, F
0164  2957  	GOTO	label22
0165        ; } __rem_8_8 function end

0165        __div_8_8_00000
0165        ; { __div_8_8 ; function begin
0165  01DA  	CLRF __div_8_8_00000_1_r
0166  01DC  	CLRF CompTempVarRet218
0167  01DB  	CLRF __div_8_8_00000_1_i
0168        label24
0168  19DB  	BTFSC __div_8_8_00000_1_i,3
0169  0008  	RETURN
016A  1003  	BCF STATUS,C
016B  0DDC  	RLF CompTempVarRet218, F
016C  0DD8  	RLF __div_8_8_00000_arg_a, F
016D  0DDA  	RLF __div_8_8_00000_1_r, F
016E  0859  	MOVF __div_8_8_00000_arg_b, W
016F  025A  	SUBWF __div_8_8_00000_1_r, W
0170  1C03  	BTFSS STATUS,C
0171  2974  	GOTO	label25
0172  00DA  	MOVWF __div_8_8_00000_1_r
0173  145C  	BSF CompTempVarRet218,0
0174        label25
0174  0ADB  	INCF __div_8_8_00000_1_i, F
0175  2968  	GOTO	label24
0176        ; } __div_8_8 function end


02E5        _startup
02E5  30D5  	MOVLW 0xD5
02E6  1283  	BCF STATUS, RP0
02E7  1303  	BCF STATUS, RP1
02E8  00A0  	MOVWF gbl_14_LSR
02E9  30C4  	MOVLW 0xC4
02EA  00A1  	MOVWF gbl_14_LSR+D'1'
02EB  30BB  	MOVLW 0xBB
02EC  00A2  	MOVWF gbl_14_LSR+D'2'
02ED  30DC  	MOVLW 0xDC
02EE  00A3  	MOVWF gbl_14_LSR+D'3'
02EF  01A4  	CLRF gbl_15_gbl_aSig
02F0  01A5  	CLRF gbl_15_gbl_aSig+D'1'
02F1  01A6  	CLRF gbl_15_gbl_aSig+D'2'
02F2  01A7  	CLRF gbl_15_gbl_aSig+D'3'
02F3  01A8  	CLRF gbl_15_gbl_bSig
02F4  01A9  	CLRF gbl_15_gbl_bSig+D'1'
02F5  01AA  	CLRF gbl_15_gbl_bSig+D'2'
02F6  01AB  	CLRF gbl_15_gbl_bSig+D'3'
02F7  01AC  	CLRF gbl_15_gbl_zSig
02F8  01AD  	CLRF gbl_15_gbl_zSig+D'1'
02F9  01AE  	CLRF gbl_15_gbl_zSig+D'2'
02FA  01AF  	CLRF gbl_15_gbl_zSig+D'3'
02FB  01BC  	CLRF gbl_15_gbl_aExp
02FC  01BD  	CLRF gbl_15_gbl_bExp
02FD  01B7  	CLRF gbl_15_gbl_zExp
02FE  01B8  	CLRF gbl_15_gbl_zExp+D'1'
02FF  01BE  	CLRF gbl_15_gbl_aSign
0300  01BF  	CLRF gbl_15_gbl_bSign
0301  01C0  	CLRF gbl_15_gbl_zSign
0302  01C1  	CLRF gbl_15_gbl_zSigZero
0303  01B0  	CLRF gbl_15_gbl_ret
0304  01B1  	CLRF gbl_15_gbl_ret+D'1'
0305  01B2  	CLRF gbl_15_gbl_ret+D'2'
0306  01B3  	CLRF gbl_15_gbl_ret+D'3'
0307  01BA  	CLRF gbl_float_rounding_mode
0308  01BB  	CLRF gbl_float_exception_flags
0309  01B9  	CLRF gbl_float_detect_tininess

0317  118A  	BCF PCLATH,3
0318  120A  	BCF PCLATH,4
0319  2A39  	GOTO	main

2007  20C2  	DW 0x20C2
2008  3EFF  	DW 0x3EFF
