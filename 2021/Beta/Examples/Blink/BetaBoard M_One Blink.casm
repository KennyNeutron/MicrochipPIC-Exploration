;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2021\Beta\Examples\Blink\BetaBoard M_One Blink.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Saturday, January 23, 2021 12:17:09
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f32
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f32);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)

MX_UINT8 FCLV_LOOP1;


#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations



void main()

{
	//Initialization
	adcon1 = 0x07;
004B  3007  	MOVLW 0x07
004C  1683  	BSF STATUS, RP0
004D  1303  	BCF STATUS, RP1
004E  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
004F  30C0  	MOVLW 0xC0
0050  0081  	MOVWF gbl_option_reg



	//Loop
	//Loop: Loop 10 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<10; FCLV_LOOP1++)
0051  1283  	BCF STATUS, RP0
0052  01C2  	CLRF gbl_FCLV_LOOP1
0053        label4
0053  300A  	MOVLW 0x0A
0054  0242  	SUBWF gbl_FCLV_LOOP1, W
0055  1803  	BTFSC STATUS,C
0056  2872  	GOTO	label5
0070  0AC2  	INCF gbl_FCLV_LOOP1, F
0071  2853  	GOTO	label4
0072        label5

	{

		//Output
		//Output: 1 -> B5
		trisb = trisb & 0xDF;
0057  30DF  	MOVLW 0xDF
0058  1683  	BSF STATUS, RP0
0059  0506  	ANDWF gbl_trisb, W
005A  0086  	MOVWF gbl_trisb

		if ((1))
			portb = (portb & 0xDF) | 0x20;
005B  30DF  	MOVLW 0xDF
005C  1283  	BCF STATUS, RP0
005D  0506  	ANDWF gbl_portb, W
005E  00C3  	MOVWF CompTempVar2188
005F  3020  	MOVLW 0x20
0060  0443  	IORWF CompTempVar2188, W
0061  0086  	MOVWF gbl_portb

		else
			portb = portb & 0xDF;

		//Delay
		//Delay: 100 ms
		delay_ms(100);
0062  3064  	MOVLW 0x64
0063  00C4  	MOVWF delay_ms_00000_arg_del
0064  2010  	CALL delay_ms_00000


		//Output
		//Output: 0 -> B5
		trisb = trisb & 0xDF;
0065  30DF  	MOVLW 0xDF
0066  1683  	BSF STATUS, RP0
0067  0506  	ANDWF gbl_trisb, W
0068  0086  	MOVWF gbl_trisb

		if ((0))
			portb = (portb & 0xDF) | 0x20;
		else
			portb = portb & 0xDF;
0069  30DF  	MOVLW 0xDF
006A  1283  	BCF STATUS, RP0
006B  0506  	ANDWF gbl_portb, W
006C  0086  	MOVWF gbl_portb


		//Delay
		//Delay: 100 ms
		delay_ms(100);
006D  3064  	MOVLW 0x64
006E  00C4  	MOVWF delay_ms_00000_arg_del
006F  2010  	CALL delay_ms_00000



	}

	//Loop
	//Loop: While 1
	while (1)
008B  2872  	GOTO	label5

	{

		//Output
		//Output: 1 -> B5
		trisb = trisb & 0xDF;
0072  30DF  	MOVLW 0xDF
0073  1683  	BSF STATUS, RP0
0074  0506  	ANDWF gbl_trisb, W
0075  0086  	MOVWF gbl_trisb

		if ((1))
			portb = (portb & 0xDF) | 0x20;
0076  30DF  	MOVLW 0xDF
0077  1283  	BCF STATUS, RP0
0078  0506  	ANDWF gbl_portb, W
0079  00C3  	MOVWF CompTempVar2189
007A  3020  	MOVLW 0x20
007B  0443  	IORWF CompTempVar2189, W
007C  0086  	MOVWF gbl_portb

		else
			portb = portb & 0xDF;

		//Delay
		//Delay: 1 s
		delay_s(1);
007D  3001  	MOVLW 0x01
007E  00C3  	MOVWF delay_s_00000_arg_del
007F  203C  	CALL delay_s_00000


		//Output
		//Output: 0 -> B5
		trisb = trisb & 0xDF;
0080  30DF  	MOVLW 0xDF
0081  1683  	BSF STATUS, RP0
0082  0506  	ANDWF gbl_trisb, W
0083  0086  	MOVWF gbl_trisb

		if ((0))
			portb = (portb & 0xDF) | 0x20;
		else
			portb = portb & 0xDF;
0084  30DF  	MOVLW 0xDF
0085  1283  	BCF STATUS, RP0
0086  0506  	ANDWF gbl_portb, W
0087  0086  	MOVWF gbl_portb


		//Delay
		//Delay: 1 s
		delay_s(1);
0088  3001  	MOVLW 0x01
0089  00C3  	MOVWF delay_s_00000_arg_del
008A  203C  	CALL delay_s_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
00B4  1283  	BCF STATUS, RP0
00B5  1303  	BCF STATUS, RP1
00B6  0E36  	SWAPF Int1BContext+D'2', W
00B7  0084  	MOVWF FSR
00B8  0E35  	SWAPF Int1BContext+D'1', W
00B9  008A  	MOVWF PCLATH
00BA  0E34  	SWAPF Int1BContext, W
00BB  0083  	MOVWF STATUS
00BC  0EFF  	SWAPF Int1Context, F
00BD  0E7F  	SWAPF Int1Context, W
00BE  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  288C  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  28B4  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C4  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  2815  	GOTO	label2
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0BC4  	DECFSZ delay_ms_00000_arg_del, F
003A  2814  	GOTO	label1
003B  0008  	RETURN
003C        ; } delay_ms function end

003C        delay_s_00000
003C        ; { delay_s ; function begin
003C        label3
003C  30FA  	MOVLW 0xFA
003D  00C4  	MOVWF delay_ms_00000_arg_del
003E  2010  	CALL delay_ms_00000
003F  30FA  	MOVLW 0xFA
0040  00C4  	MOVWF delay_ms_00000_arg_del
0041  2010  	CALL delay_ms_00000
0042  30FA  	MOVLW 0xFA
0043  00C4  	MOVWF delay_ms_00000_arg_del
0044  2010  	CALL delay_ms_00000
0045  30FA  	MOVLW 0xFA
0046  00C4  	MOVWF delay_ms_00000_arg_del
0047  2010  	CALL delay_ms_00000
0048  0BC3  	DECFSZ delay_s_00000_arg_del, F
0049  283C  	GOTO	label3
004A  0008  	RETURN
004B        ; } delay_s function end


008C        _startup
008C  30D5  	MOVLW 0xD5
008D  1283  	BCF STATUS, RP0
008E  1303  	BCF STATUS, RP1
008F  00A0  	MOVWF gbl_14_LSR
0090  30C4  	MOVLW 0xC4
0091  00A1  	MOVWF gbl_14_LSR+D'1'
0092  30BB  	MOVLW 0xBB
0093  00A2  	MOVWF gbl_14_LSR+D'2'
0094  30DC  	MOVLW 0xDC
0095  00A3  	MOVWF gbl_14_LSR+D'3'
0096  01A4  	CLRF gbl_15_gbl_aSig
0097  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0098  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0099  01A7  	CLRF gbl_15_gbl_aSig+D'3'
009A  01A8  	CLRF gbl_15_gbl_bSig
009B  01A9  	CLRF gbl_15_gbl_bSig+D'1'
009C  01AA  	CLRF gbl_15_gbl_bSig+D'2'
009D  01AB  	CLRF gbl_15_gbl_bSig+D'3'
009E  01AC  	CLRF gbl_15_gbl_zSig
009F  01AD  	CLRF gbl_15_gbl_zSig+D'1'
00A0  01AE  	CLRF gbl_15_gbl_zSig+D'2'
00A1  01AF  	CLRF gbl_15_gbl_zSig+D'3'
00A2  01BC  	CLRF gbl_15_gbl_aExp
00A3  01BD  	CLRF gbl_15_gbl_bExp
00A4  01B7  	CLRF gbl_15_gbl_zExp
00A5  01B8  	CLRF gbl_15_gbl_zExp+D'1'
00A6  01BE  	CLRF gbl_15_gbl_aSign
00A7  01BF  	CLRF gbl_15_gbl_bSign
00A8  01C0  	CLRF gbl_15_gbl_zSign
00A9  01C1  	CLRF gbl_15_gbl_zSigZero
00AA  01B0  	CLRF gbl_15_gbl_ret
00AB  01B1  	CLRF gbl_15_gbl_ret+D'1'
00AC  01B2  	CLRF gbl_15_gbl_ret+D'2'
00AD  01B3  	CLRF gbl_15_gbl_ret+D'3'
00AE  01BA  	CLRF gbl_float_rounding_mode
00AF  01BB  	CLRF gbl_float_exception_flags
00B0  01B9  	CLRF gbl_float_detect_tininess
00B1  118A  	BCF PCLATH,3
00B2  120A  	BCF PCLATH,4
00B3  284B  	GOTO	main

2007  3F32  	DW 0x3F32
