;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
0021  01C5  	CLRF Wdt_Delay__0003E_1_i
0022        label4
0022  0844  	MOVF Wdt_Delay__0003E_arg_delay, W
0023  0245  	SUBWF Wdt_Delay__0003E_1_i, W
0024  1803  	BTFSC STATUS,C
002A  0AC5  	INCF Wdt_Delay__0003E_1_i, F
002B  2822  	GOTO	label4

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0026  0064  	CLRWDT

        delay_ms(1);
0027  3001  	MOVLW 0x01
0028  00C6  	MOVWF delay_ms_00000_arg_del
0029  2010  	CALL delay_ms_00000

    }
}
0025  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\dotHex\LCD\LCD_HELLO_WORLD.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Thursday, December 19, 2019 14:19:42
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 2000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)




//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    portc
	#define LCD_1__PORT1    portb
	#define LCD_1__PORT2    portb
	#define LCD_1__PORT3    portc
	#define LCD_1__PORT4    portc
	#define LCD_1__PORT5    portc
	#define LCD_1__TRIS0    trisc
	#define LCD_1__TRIS1    trisb
	#define LCD_1__TRIS2    trisb
	#define LCD_1__TRIS3    trisc
	#define LCD_1__TRIS4    trisc
	#define LCD_1__TRIS5    trisc
	#define LCD_1__BIT0    	2
	#define LCD_1__BIT1    	3
	#define LCD_1__BIT2    	4
	#define LCD_1__BIT3    	5
	#define LCD_1__RS      	0
	#define LCD_1__E       	1
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	20

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
002C  1107  	BCF gbl_portc,2

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
002D  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
002E  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
002F  1287  	BCF gbl_portc,5

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0030  1007  	BCF gbl_portc,0

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0031  1087  	BCF gbl_portc,1

		pt = ((in >> 4) & 0x0f);
0032  0E53  	SWAPF FCD_LCDDis_00051_arg_in, W
0033  390F  	ANDLW 0x0F
0034  00D5  	MOVWF FCD_LCDDis_00051_1_pt
0035  300F  	MOVLW 0x0F
0036  05D5  	ANDWF FCD_LCDDis_00051_1_pt, F

		if (pt & 0x01)
0037  1855  	BTFSC FCD_LCDDis_00051_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0038  1507  	BSF gbl_portc,2

		if (pt & 0x02)
0039  18D5  	BTFSC FCD_LCDDis_00051_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
003A  1586  	BSF gbl_portb,3

		if (pt & 0x04)
003B  1955  	BTFSC FCD_LCDDis_00051_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
003C  1606  	BSF gbl_portb,4

		if (pt & 0x08)
003D  19D5  	BTFSC FCD_LCDDis_00051_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
003E  1687  	BSF gbl_portc,5

		if (mask)
003F  08D4  	MOVF FCD_LCDDis_00051_arg_mask, F
0040  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
0041  1407  	BSF gbl_portc,0

		LCD_1__DELAY;
0042  300A  	MOVLW 0x0A
0043  00D6  	MOVWF delay_10us_00000_arg_del
0044  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0045  1487  	BSF gbl_portc,1

		LCD_1__DELAY;
0046  300A  	MOVLW 0x0A
0047  00D6  	MOVWF delay_10us_00000_arg_del
0048  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0049  1087  	BCF gbl_portc,1

		pt = (in & 0x0f);
004A  300F  	MOVLW 0x0F
004B  0553  	ANDWF FCD_LCDDis_00051_arg_in, W
004C  00D5  	MOVWF FCD_LCDDis_00051_1_pt

		LCD_1__DELAY;
004D  300A  	MOVLW 0x0A
004E  00D6  	MOVWF delay_10us_00000_arg_del
004F  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
0050  1107  	BCF gbl_portc,2

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
0051  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0052  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0053  1287  	BCF gbl_portc,5

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0054  1007  	BCF gbl_portc,0

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0055  1087  	BCF gbl_portc,1

		if (pt & 0x01)
0056  1855  	BTFSC FCD_LCDDis_00051_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0057  1507  	BSF gbl_portc,2

		if (pt & 0x02)
0058  18D5  	BTFSC FCD_LCDDis_00051_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0059  1586  	BSF gbl_portb,3

		if (pt & 0x04)
005A  1955  	BTFSC FCD_LCDDis_00051_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
005B  1606  	BSF gbl_portb,4

		if (pt & 0x08)
005C  19D5  	BTFSC FCD_LCDDis_00051_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
005D  1687  	BSF gbl_portc,5

		if (mask)
005E  08D4  	MOVF FCD_LCDDis_00051_arg_mask, F
005F  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
0060  1407  	BSF gbl_portc,0

		LCD_1__DELAY;
0061  300A  	MOVLW 0x0A
0062  00D6  	MOVWF delay_10us_00000_arg_del
0063  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0064  1487  	BSF gbl_portc,1

		LCD_1__DELAY;
0065  300A  	MOVLW 0x0A
0066  00D6  	MOVWF delay_10us_00000_arg_del
0067  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0068  1087  	BCF gbl_portc,1

		LCD_1__DELAY;
0069  300A  	MOVLW 0x0A
006A  00D6  	MOVWF delay_10us_00000_arg_del
006B  201C  	CALL delay_10us_00000


}
006C  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
00B8  1683  	BSF STATUS, RP0
00B9  1303  	BCF STATUS, RP1
00BA  1107  	BCF gbl_trisc,2
00BB  1283  	BCF STATUS, RP0
00BC  1107  	BCF gbl_portc,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
00BD  1683  	BSF STATUS, RP0
00BE  1186  	BCF gbl_trisb,3
00BF  1283  	BCF STATUS, RP0
00C0  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
00C1  1683  	BSF STATUS, RP0
00C2  1206  	BCF gbl_trisb,4
00C3  1283  	BCF STATUS, RP0
00C4  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
00C5  1683  	BSF STATUS, RP0
00C6  1287  	BCF gbl_trisc,5
00C7  1283  	BCF STATUS, RP0
00C8  1287  	BCF gbl_portc,5

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
00C9  1683  	BSF STATUS, RP0
00CA  1007  	BCF gbl_trisc,0
00CB  1283  	BCF STATUS, RP0
00CC  1007  	BCF gbl_portc,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
00CD  1683  	BSF STATUS, RP0
00CE  1087  	BCF gbl_trisc,1
00CF  1283  	BCF STATUS, RP0
00D0  1087  	BCF gbl_portc,1


		Wdt_Delay_Ms(12);
00D1  300C  	MOVLW 0x0C
00D2  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00D3  2021  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
00D4  3033  	MOVLW 0x33
00D5  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00D6  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00D7  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00D8  3002  	MOVLW 0x02
00D9  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00DA  2021  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
00DB  3033  	MOVLW 0x33
00DC  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00DD  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00DE  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00DF  3002  	MOVLW 0x02
00E0  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00E1  2021  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
00E2  3032  	MOVLW 0x32
00E3  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00E4  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00E5  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00E6  3002  	MOVLW 0x02
00E7  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00E8  2021  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
00E9  302C  	MOVLW 0x2C
00EA  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00EB  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00EC  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00ED  3002  	MOVLW 0x02
00EE  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00EF  2021  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
00F0  3006  	MOVLW 0x06
00F1  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00F2  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00F3  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00F4  3002  	MOVLW 0x02
00F5  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00F6  2021  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
00F7  300C  	MOVLW 0x0C
00F8  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00F9  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00FA  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00FB  3002  	MOVLW 0x02
00FC  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00FD  2021  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
00FE  3001  	MOVLW 0x01
00FF  00D3  	MOVWF FCD_LCDDis_00051_arg_in
0100  01D4  	CLRF FCD_LCDDis_00051_arg_mask
0101  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
0102  3002  	MOVLW 0x02
0103  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
0104  2021  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0105  3002  	MOVLW 0x02
0106  00D3  	MOVWF FCD_LCDDis_00051_arg_in
0107  01D4  	CLRF FCD_LCDDis_00051_arg_mask
0108  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
0109  3002  	MOVLW 0x02
010A  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
010B  2021  	CALL Wdt_Delay__0003E


}
010C  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
00A7  3001  	MOVLW 0x01
00A8  1283  	BCF STATUS, RP0
00A9  1303  	BCF STATUS, RP1
00AA  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00AB  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00AC  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00AD  3002  	MOVLW 0x02
00AE  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00AF  2021  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
00B0  3002  	MOVLW 0x02
00B1  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00B2  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00B3  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00B4  3002  	MOVLW 0x02
00B5  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00B6  2021  	CALL Wdt_Delay__0003E


}
00B7  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
0089  08C3  	MOVF FCD_LCDDis_00056_arg_y, F
008A  1D03  	BTFSS STATUS,Z
008B  288F  	GOTO	label6
008F        label6

			y=0x80;
008C  3080  	MOVLW 0x80
008D  00C3  	MOVWF FCD_LCDDis_00056_arg_y

		else if (y==1)
008E  289E  	GOTO	label9
008F  0343  	DECF FCD_LCDDis_00056_arg_y, W
0090  1D03  	BTFSS STATUS,Z
0091  2895  	GOTO	label7
0095        label7

			y=0xc0;
0092  30C0  	MOVLW 0xC0
0093  00C3  	MOVWF FCD_LCDDis_00056_arg_y


		#if (LCD_1__COLCNT == 16)
			else if (y==2)
				y=0x90;
			else
				y=0xd0;
		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
0094  289E  	GOTO	label9
0095  0843  	MOVF FCD_LCDDis_00056_arg_y, W
0096  3A02  	XORLW 0x02
0097  1D03  	BTFSS STATUS,Z
0098  289C  	GOTO	label8
009C        label8

				y=0x94;
0099  3094  	MOVLW 0x94
009A  00C3  	MOVWF FCD_LCDDis_00056_arg_y

			else
009B  289E  	GOTO	label9
009E        label9

				y=0xd4;
009C  30D4  	MOVLW 0xD4
009D  00C3  	MOVWF FCD_LCDDis_00056_arg_y

		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
009E  0842  	MOVF FCD_LCDDis_00056_arg_x, W
009F  0743  	ADDWF FCD_LCDDis_00056_arg_y, W
00A0  00D3  	MOVWF FCD_LCDDis_00051_arg_in
00A1  01D4  	CLRF FCD_LCDDis_00051_arg_mask
00A2  202C  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00A3  3002  	MOVLW 0x02
00A4  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00A5  2021  	CALL Wdt_Delay__0003E


}
00A6  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)
{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
			Number = 0 - Number;
		}

		tmp_int = Number;
		if (Number >= 10000)
		{
			tmp_byte = tmp_int / 10000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10000;
				tmp_byte--;
			}
		}
		if (Number >= 1000)
		{
			tmp_byte = tmp_int / 1000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 1000;
				tmp_byte--;
			}
		}
		if (Number >= 100)
		{
			tmp_byte = tmp_int / 100;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 100;
				tmp_byte--;
			}
		}
		if (Number >= 10)
		{
			tmp_byte = tmp_int / 10;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10;
				tmp_byte--;
			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);

}

void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
006D  01D2  	CLRF FCD_LCDDis_00058_1_idx


		for (idx=0; idx<MSZ_String; idx++)
006E  01D2  	CLRF FCD_LCDDis_00058_1_idx
006F        label5
006F  0851  	MOVF FCD_LCDDis_00058_arg_MSZ_String, W
0070  0252  	SUBWF FCD_LCDDis_00058_1_idx, W
0071  1803  	BTFSC STATUS,C
0087  0AD2  	INCF FCD_LCDDis_00058_1_idx, F
0088  286F  	GOTO	label5

		{
			if (String[idx] == 0)
0073  1383  	BCF STATUS,IRP
0074  1843  	BTFSC FCD_LCDDis_00058_arg_String+D'1',0
0075  1783  	BSF STATUS,IRP
0076  0842  	MOVF FCD_LCDDis_00058_arg_String, W
0077  0752  	ADDWF FCD_LCDDis_00058_1_idx, W
0078  0084  	MOVWF FSR
0079  0880  	MOVF INDF, F
007A  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
007C  1383  	BCF STATUS,IRP
007D  1843  	BTFSC FCD_LCDDis_00058_arg_String+D'1',0
007E  1783  	BSF STATUS,IRP
007F  0842  	MOVF FCD_LCDDis_00058_arg_String, W
0080  0752  	ADDWF FCD_LCDDis_00058_1_idx, W
0081  0084  	MOVWF FSR
0082  0800  	MOVF INDF, W
0083  00D3  	MOVWF FCD_LCDDis_00051_arg_in
0084  3010  	MOVLW 0x10
0085  00D4  	MOVWF FCD_LCDDis_00051_arg_mask
0086  202C  	CALL FCD_LCDDis_00051

		}

}
0072  0008  	RETURN
007B  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations



void main()

{
	//Initialization
	adcon1 = 0x07;
010D  3007  	MOVLW 0x07
010E  1683  	BSF STATUS, RP0
010F  1303  	BCF STATUS, RP1
0110  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0111  30C0  	MOVLW 0xC0
0112  0081  	MOVWF gbl_option_reg



	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
0113  20B8  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0114  20A7  	CALL FCD_LCDDis_00053


	//Loop
	//Loop: While 1
	while (1)
0115        label10
0135  2915  	GOTO	label10

	{

		//Call Component Macro
		//Call Component Macro: Cursor(0, 0)
		FCD_LCDDisplay0_Cursor(0, 0);
0115  01C2  	CLRF FCD_LCDDis_00056_arg_x
0116  01C3  	CLRF FCD_LCDDis_00056_arg_y
0117  2089  	CALL FCD_LCDDis_00056


		//Call Component Macro
		//Call Component Macro: PrintString("HELLO WORLD!")
		FCD_LCDDisplay0_PrintString("HELLO WORLD!", 12);
0118  3020  	MOVLW 0x20
0119  00C9  	MOVWF CompTempVar2217+D'5'
011A  3021  	MOVLW 0x21
011B  00CF  	MOVWF CompTempVar2217+D'11'
011C  3044  	MOVLW 0x44
011D  00CE  	MOVWF CompTempVar2217+D'10'
011E  3045  	MOVLW 0x45
011F  00C5  	MOVWF CompTempVar2217+D'1'
0120  3048  	MOVLW 0x48
0121  00C4  	MOVWF CompTempVar2217
0122  304C  	MOVLW 0x4C
0123  00C6  	MOVWF CompTempVar2217+D'2'
0124  00C7  	MOVWF CompTempVar2217+D'3'
0125  00CD  	MOVWF CompTempVar2217+D'9'
0126  304F  	MOVLW 0x4F
0127  00C8  	MOVWF CompTempVar2217+D'4'
0128  00CB  	MOVWF CompTempVar2217+D'7'
0129  3052  	MOVLW 0x52
012A  00CC  	MOVWF CompTempVar2217+D'8'
012B  3057  	MOVLW 0x57
012C  00CA  	MOVWF CompTempVar2217+D'6'
012D  01D0  	CLRF CompTempVar2217+D'12'
012E  3000  	MOVLW HIGH(CompTempVar2217+D'0')
012F  00C3  	MOVWF FCD_LCDDis_00058_arg_String+D'1'
0130  3044  	MOVLW LOW(CompTempVar2217+D'0')
0131  00C2  	MOVWF FCD_LCDDis_00058_arg_String
0132  300C  	MOVLW 0x0C
0133  00D1  	MOVWF FCD_LCDDis_00058_arg_MSZ_String
0134  206D  	CALL FCD_LCDDis_00058



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
015E  1283  	BCF STATUS, RP0
015F  1303  	BCF STATUS, RP1
0160  0E36  	SWAPF Int1BContext+D'2', W
0161  0084  	MOVWF FSR
0162  0E35  	SWAPF Int1BContext+D'1', W
0163  008A  	MOVWF PCLATH
0164  0E34  	SWAPF Int1BContext, W
0165  0083  	MOVWF STATUS
0166  0EFF  	SWAPF Int1Context, F
0167  0E7F  	SWAPF Int1Context, W
0168  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2936  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  295E  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C6  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  307C  	MOVLW 0x7C
0015        label2
0015  3EFF  	ADDLW 0xFF
0016  1D03  	BTFSS STATUS,Z
0017  2815  	GOTO	label2
0018  0000  	NOP
0019  0BC6  	DECFSZ delay_ms_00000_arg_del, F
001A  2814  	GOTO	label1
001B  0008  	RETURN
001C        ; } delay_ms function end

001C        delay_10us_00000
001C        ; { delay_10us ; function begin
001C        label3
001C  0000  	NOP
001D  0000  	NOP
001E  0BD6  	DECFSZ delay_10us_00000_arg_del, F
001F  281C  	GOTO	label3
0020  0008  	RETURN
0021        ; } delay_10us function end


0136        _startup
0136  30D5  	MOVLW 0xD5
0137  1283  	BCF STATUS, RP0
0138  1303  	BCF STATUS, RP1
0139  00A0  	MOVWF gbl_14_LSR
013A  30C4  	MOVLW 0xC4
013B  00A1  	MOVWF gbl_14_LSR+D'1'
013C  30BB  	MOVLW 0xBB
013D  00A2  	MOVWF gbl_14_LSR+D'2'
013E  30DC  	MOVLW 0xDC
013F  00A3  	MOVWF gbl_14_LSR+D'3'
0140  01A4  	CLRF gbl_15_gbl_aSig
0141  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0142  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0143  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0144  01A8  	CLRF gbl_15_gbl_bSig
0145  01A9  	CLRF gbl_15_gbl_bSig+D'1'
0146  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0147  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0148  01AC  	CLRF gbl_15_gbl_zSig
0149  01AD  	CLRF gbl_15_gbl_zSig+D'1'
014A  01AE  	CLRF gbl_15_gbl_zSig+D'2'
014B  01AF  	CLRF gbl_15_gbl_zSig+D'3'
014C  01BC  	CLRF gbl_15_gbl_aExp
014D  01BD  	CLRF gbl_15_gbl_bExp
014E  01B7  	CLRF gbl_15_gbl_zExp
014F  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0150  01BE  	CLRF gbl_15_gbl_aSign
0151  01BF  	CLRF gbl_15_gbl_bSign
0152  01C0  	CLRF gbl_15_gbl_zSign
0153  01C1  	CLRF gbl_15_gbl_zSigZero
0154  01B0  	CLRF gbl_15_gbl_ret
0155  01B1  	CLRF gbl_15_gbl_ret+D'1'
0156  01B2  	CLRF gbl_15_gbl_ret+D'2'
0157  01B3  	CLRF gbl_15_gbl_ret+D'3'
0158  01BA  	CLRF gbl_float_rounding_mode
0159  01BB  	CLRF gbl_float_exception_flags
015A  01B9  	CLRF gbl_float_detect_tininess
015B  118A  	BCF PCLATH,3
015C  120A  	BCF PCLATH,4
015D  290D  	GOTO	main

2007  3F3A  	DW 0x3F3A
