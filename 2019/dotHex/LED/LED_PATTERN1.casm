;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\dotHex\LED\LED_PATTERN1.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Tuesday, December 17, 2019 17:15:43
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_TRUE (1)
#define FCV_FALSE (0)



#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations



void main()

{
	//Initialization
	adcon1 = 0x07;
004B  3007  	MOVLW 0x07
004C  1683  	BSF STATUS, RP0
004D  1303  	BCF STATUS, RP1
004E  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
004F  30C0  	MOVLW 0xC0
0050  0081  	MOVWF gbl_option_reg



	//Loop
	//Loop: While 1
	while (1)
0051        label4
0061  2851  	GOTO	label4

	{

		//Output
		//Output: 0b00000010 -> PORTC
		trisc = 0x00;
0051  1683  	BSF STATUS, RP0
0052  0187  	CLRF gbl_trisc

		portc = (2);
0053  3002  	MOVLW 0x02
0054  1283  	BCF STATUS, RP0
0055  0087  	MOVWF gbl_portc


		//Delay
		//Delay: 1 s
		delay_s(1);
0056  3001  	MOVLW 0x01
0057  00C2  	MOVWF delay_s_00000_arg_del
0058  203C  	CALL delay_s_00000


		//Output
		//Output: 0b00000101 -> PORTC
		trisc = 0x00;
0059  1683  	BSF STATUS, RP0
005A  0187  	CLRF gbl_trisc

		portc = (5);
005B  3005  	MOVLW 0x05
005C  1283  	BCF STATUS, RP0
005D  0087  	MOVWF gbl_portc


		//Delay
		//Delay: 1 s
		delay_s(1);
005E  3001  	MOVLW 0x01
005F  00C2  	MOVWF delay_s_00000_arg_del
0060  203C  	CALL delay_s_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
008A  1283  	BCF STATUS, RP0
008B  1303  	BCF STATUS, RP1
008C  0E36  	SWAPF Int1BContext+D'2', W
008D  0084  	MOVWF FSR
008E  0E35  	SWAPF Int1BContext+D'1', W
008F  008A  	MOVWF PCLATH
0090  0E34  	SWAPF Int1BContext, W
0091  0083  	MOVWF STATUS
0092  0EFF  	SWAPF Int1Context, F
0093  0E7F  	SWAPF Int1Context, W
0094  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2862  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  288A  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C3  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  2815  	GOTO	label2
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0BC3  	DECFSZ delay_ms_00000_arg_del, F
003A  2814  	GOTO	label1
003B  0008  	RETURN
003C        ; } delay_ms function end

003C        delay_s_00000
003C        ; { delay_s ; function begin
003C        label3
003C  30FA  	MOVLW 0xFA
003D  00C3  	MOVWF delay_ms_00000_arg_del
003E  2010  	CALL delay_ms_00000
003F  30FA  	MOVLW 0xFA
0040  00C3  	MOVWF delay_ms_00000_arg_del
0041  2010  	CALL delay_ms_00000
0042  30FA  	MOVLW 0xFA
0043  00C3  	MOVWF delay_ms_00000_arg_del
0044  2010  	CALL delay_ms_00000
0045  30FA  	MOVLW 0xFA
0046  00C3  	MOVWF delay_ms_00000_arg_del
0047  2010  	CALL delay_ms_00000
0048  0BC2  	DECFSZ delay_s_00000_arg_del, F
0049  283C  	GOTO	label3
004A  0008  	RETURN
004B        ; } delay_s function end


0062        _startup
0062  30D5  	MOVLW 0xD5
0063  1283  	BCF STATUS, RP0
0064  1303  	BCF STATUS, RP1
0065  00A0  	MOVWF gbl_14_LSR
0066  30C4  	MOVLW 0xC4
0067  00A1  	MOVWF gbl_14_LSR+D'1'
0068  30BB  	MOVLW 0xBB
0069  00A2  	MOVWF gbl_14_LSR+D'2'
006A  30DC  	MOVLW 0xDC
006B  00A3  	MOVWF gbl_14_LSR+D'3'
006C  01A4  	CLRF gbl_15_gbl_aSig
006D  01A5  	CLRF gbl_15_gbl_aSig+D'1'
006E  01A6  	CLRF gbl_15_gbl_aSig+D'2'
006F  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0070  01A8  	CLRF gbl_15_gbl_bSig
0071  01A9  	CLRF gbl_15_gbl_bSig+D'1'
0072  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0073  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0074  01AC  	CLRF gbl_15_gbl_zSig
0075  01AD  	CLRF gbl_15_gbl_zSig+D'1'
0076  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0077  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0078  01BC  	CLRF gbl_15_gbl_aExp
0079  01BD  	CLRF gbl_15_gbl_bExp
007A  01B7  	CLRF gbl_15_gbl_zExp
007B  01B8  	CLRF gbl_15_gbl_zExp+D'1'
007C  01BE  	CLRF gbl_15_gbl_aSign
007D  01BF  	CLRF gbl_15_gbl_bSign
007E  01C0  	CLRF gbl_15_gbl_zSign
007F  01C1  	CLRF gbl_15_gbl_zSigZero
0080  01B0  	CLRF gbl_15_gbl_ret
0081  01B1  	CLRF gbl_15_gbl_ret+D'1'
0082  01B2  	CLRF gbl_15_gbl_ret+D'2'
0083  01B3  	CLRF gbl_15_gbl_ret+D'3'
0084  01BA  	CLRF gbl_float_rounding_mode
0085  01BB  	CLRF gbl_float_exception_flags
0086  01B9  	CLRF gbl_float_detect_tininess
0087  118A  	BCF PCLATH,3
0088  120A  	BCF PCLATH,4
0089  284B  	GOTO	main

2007  3F3A  	DW 0x3F3A
