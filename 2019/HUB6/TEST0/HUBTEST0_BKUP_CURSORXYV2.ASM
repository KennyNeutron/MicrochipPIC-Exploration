 
;**********************************************************************
;                                                                     *
;    FILENAME:	    XXX.ASM                                           *
;    DATE:          20190904                                          *
;    FILE VERSION:                                                    *
;                                                                     *
;    AUTHOR:       KENNY NEUTRON                                      *
;    COMPANY:      GER-PER ENGINEERING                                *
;                                                                     * 
;                                                                     *
;**********************************************************************
;                                                                     *
;    FILES REQUIRED: P16F690.INC                                      *
;                                                                     *
;**********************************************************************


	LIST		P=16F690		; LIST DIRECTIVE TO DEFINE PROCESSOR
	#INCLUDE	<P16F690.INC>		; PROCESSOR SPECIFIC VARIABLE DEFINITIONS
	
	__CONFIG    _CP_OFF & _CPD_OFF & _BOR_OFF & _PWRTE_ON & _WDT_OFF & _HS_OSC & _MCLRE_OFF & _FCMEN_OFF & _IESO_OFF

; '__CONFIG' DIRECTIVE IS USED TO EMBED CONFIGURATION DATA WITHIN .ASM FILE.
; THE LABELS FOLLOWING THE DIRECTIVE ARE LOCATED IN THE RESPECTIVE .INC FILE.
; SEE RESPECTIVE DATA SHEET FOR ADDITIONAL INFORMATION ON CONFIGURATION WORD.






;***** VARIABLE DEFINITIONS
W_TEMP		EQU	0X7D			; VARIABLE USED FOR CONTEXT SAVING
STATUS_TEMP	EQU	0X7E			; VARIABLE USED FOR CONTEXT SAVING
PCLATH_TEMP	EQU	0X7F			; VARIABLE USED FOR CONTEXT SAVING


	;#DEFINE C0_ON		BSF PORTC,	0	PORTC0=====>HI
	;#DEFINE C0_OFF		BCF PORTC,	0	PORTC0=====>LO

	#DEFINE	OE_ON		BCF	PORTA, 2
	#DEFINE	OE_OFF		BSF	PORTA, 2

	#DEFINE	A_ON		BSF	PORTC, 0
	#DEFINE A_OFF		BCF	PORTC, 0
	
	#DEFINE B_ON		BSF	PORTC, 1
	#DEFINE B_OFF		BCF PORTC, 1

	#DEFINE C_ON		BSF	PORTC, 2
	#DEFINE C_OFF		BCF	PORTC, 2
	
	#DEFINE D_ON		BSF	PORTC, 3
	#DEFINE D_OFF		BCF	PORTC, 3

	#DEFINE LAT_ON		BSF	PORTB, 4
	#DEFINE LAT_OFF		BCF	PORTB, 4

	#DEFINE CLK_ON      BSF	PORTB, 6
	#DEFINE CLK_OFF		BCF	PORTB, 6


	#DEFINE R1_1		BSF	PORTC, 4
	#DEFINE R1_0		BCF	PORTC, 4
	
	#DEFINE R2_1		BSF	PORTC, 5
	#DEFINE R2_0		BCF	PORTC, 5

	#DEFINE	G1_1		BSF	PORTC, 6
	#DEFINE G1_0		BCF	PORTC, 6
	
	#DEFINE	G2_1		BSF	PORTC, 7
	#DEFINE	G2_0		BCF	PORTC, 7

	#DEFINE	BANK0		BANKSEL	PORTA
	#DEFINE	BANK1		BANKSEL	ADRESL
	#DEFINE	BANK2		BANKSEL	ANSELH

;============================	BANK	0	===========================
CBLOCK 0X20
			DRAM: .32
			DELAYUS, DELAYMS,  MILSEC, ;SEC,DELAYS,	;DELAY VARIABLES
			;=======================================================
			LOOP,COUNT0,COUNT1,COUNT2
			POINTER,BTCOUNT
			COLOR,NUMBER,ROW,FONT,STPT
			CURSORX,CURSORY,CURSORY_TEMP
			HALF0,HALF1			;UPPER HALF : LOWER HALF RAMS
			TEMPRAM:.8

ENDC
;======================================================================


;============================	BANK	1	===========================
CBLOCK 0XA0

ENDC
;======================================================================



;============================	BANK	2	===========================
CBLOCK 0X120


ENDC
;======================================================================

;**************************************************	********************
	ORG		0X000				; PROCESSOR RESET VECTOR
	GOTO	INIT				; GO TO BEGINNING OF PROGRAM


	ORG		0X004				; INTERRUPT VECTOR LOCATION
	MOVWF		W_TEMP			; SAVE OFF CURRENT W REGISTER CONTENTS
	MOVF		STATUS,W		; MOVE STATUS REGISTER INTO W REGISTER
	MOVWF		STATUS_TEMP		; SAVE OFF CONTENTS OF STATUS REGISTER
	MOVF		PCLATH,W		; MOVE PCLATH REGISTER INTO W REGISTER
	MOVWF		PCLATH_TEMP		; SAVE OFF CONTENTS OF PCLATH REGISTER


; ISR CODE CAN GO HERE OR BE LOCATED AS A CALL SUBROUTINE ELSEWHERE

	MOVF		PCLATH_TEMP,W	; RETRIEVE COPY OF PCLATH REGISTER
	MOVWF		PCLATH			; RESTORE PRE-ISR PCLATH REGISTER CONTENTS	
	MOVF		STATUS_TEMP,W	; RETRIEVE COPY OF STATUS REGISTER
	MOVWF		STATUS			; RESTORE PRE-ISR STATUS REGISTER CONTENTS
	SWAPF		W_TEMP,F
	SWAPF		W_TEMP,W		; RESTORE PRE-ISR W REGISTER CONTENTS
	RETFIE						; RETURN FROM INTERRUPT


;$$$$$$$$$$$$$$$$$$$$$	INITIALIZE	$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
INIT
BANKSEL	ANSEL
CLRW
MOVWF	ANSEL
MOVWF	ANSELH

BANKSEL	TRISA

MOVLW	0
MOVWF	TRISB

MOVLW	0
MOVWF	TRISC

BCF		TRISA,2

BANK0
A_OFF
B_OFF
C_OFF
D_OFF
CLK_OFF
LAT_OFF
R1_0
R2_0
G1_0
G2_0
OE_ON

MOVLW	4
MOVWF	NUMBER
CALL	CLR_RAM
CALL	DATAREG
MOVLW	5
MOVWF	CURSORX



;#######################	MAIN PROGRAM  ##########################
MAIN
		CALL	DISPLAY

;		MOVLW	0XAA
;		MOVWF	DRAM+01
;		MOVLW	0X55
;		MOVWF	DRAM+03
;
;		MOVLW	0X0F
;		MOVWF	DRAM+09
;
;		MOVLW	0XF0
;		MOVWF	DRAM+0A
;		
;
;
;		CALL	DATAREG
;		LAT_ON
;		LAT_OFF
;		OE_ON

GOTO	MAIN
;###################################################################

;==========	DELAY USEC =========
DELAY_US

	MOVWF	DELAYUS

USEC

	NOP
 	NOP
	NOP
	NOP
DECFSZ	DELAYUS,F

GOTO	USEC

RETURN
;=================================



;=========== DELAY ONE MS ========
DELAY_ONEMS

	MOVLW	.5
	MOVWF	LOOP

MSEC
	MOVLW	.200
	CALL	DELAY_US
	DECFSZ	LOOP,F
	GOTO	MSEC

RETURN
;==================================


;=========== DELAY MS	==========
DELAY_MS
	
	MOVWF	DELAYMS
MSEC0
	CALL	DELAY_ONEMS
	DECFSZ	DELAYMS,F
	GOTO	MSEC0
RETURN
;=================================

;=========== DELAY	ONE	SECOND ===
;DELAY_ONESEC
;
;	MOVLW	.5
;	MOVWF	SEC
;SEC0
;	MOVLW	.200
;	CALL	DELAY_MS
;	DECFSZ	SEC,F
;	GOTO	SEC0
;RETURN
;;=================================
;
;;==========	DELAY SEC =========
;DELAY_SEC
;
;	MOVWF	DELAYS
;SEC1
;	CALL	DELAY_ONESEC
;	DECFSZ	DELAYS,F
;	GOTO	SEC1
;RETURN
;;=================================


DISPLAY
		MOVLW	.16
		MOVWF	COUNT2
		MOVLW	0
		MOVWF	ROW

DISP0	
		LAT_ON
		LAT_OFF
		OE_ON
		CALL	CLR_RAM

;		MOVLW	0XAA
;		MOVWF	DRAM+08
;
;		MOVLW	0X55
;		MOVWF	DRAM+0F

		CALL	COMMAND
		MOVLW	.30
		CALL	DELAY_US
		OE_OFF
		MOVFW	ROW
		MOVWF	PORTC
		INCF	ROW
		DECFSZ	COUNT2,F
		GOTO	DISP0
		
RETURN








COMMAND

		MOVLW	9
		MOVWF	NUMBER
		MOVLW	0
		MOVWF	FONT
		MOVLW	.2
		MOVWF	CURSORX
		MOVLW	.25
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	8
		MOVWF	NUMBER
		MOVLW	.8
		MOVWF	CURSORX
		MOVLW	.24
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	7
		MOVWF	NUMBER
		MOVLW	.14
		MOVWF	CURSORX
		MOVLW	.23
		MOVWF	CURSORY
		CALL	DUMP


		MOVLW	6
		MOVWF	NUMBER
		MOVLW	.20
		MOVWF	CURSORX
		MOVLW	.22
		MOVWF	CURSORY
		CALL	DUMP


		MOVLW	5
		MOVWF	NUMBER
		MOVLW	.26
		MOVWF	CURSORX
		MOVLW	.21
		MOVWF	CURSORY
		CALL	DUMP


		MOVLW	4
		MOVWF	NUMBER
		MOVLW	.32
		MOVWF	CURSORX
		MOVLW	.20
		MOVWF	CURSORY
		CALL	DUMP


		MOVLW	3
		MOVWF	NUMBER
		MOVLW	.38
		MOVWF	CURSORX
		MOVLW	.19
		MOVWF	CURSORY
		CALL	DUMP


		MOVLW	2
		MOVWF	NUMBER
		MOVLW	.44
		MOVWF	CURSORX
		MOVLW	.18
		MOVWF	CURSORY
		CALL	DUMP


		MOVLW	1
		MOVWF	NUMBER
		MOVLW	.50
		MOVWF	CURSORX
		MOVLW	.17
		MOVWF	CURSORY
		CALL	DUMP


		MOVLW	0
		MOVWF	NUMBER
		MOVLW	.55
		MOVWF	CURSORX
		MOVLW	.16
		MOVWF	CURSORY
		CALL	DUMP





		MOVLW	0
		MOVWF	NUMBER
		MOVLW	.2
		MOVWF	CURSORX
		MOVLW	.0
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	1
		MOVWF	NUMBER
		MOVLW	.8
		MOVWF	CURSORX
		MOVLW	.1
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	2
		MOVWF	NUMBER
		MOVLW	.13
		MOVWF	CURSORX
		MOVLW	.2
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	3
		MOVWF	NUMBER
		MOVLW	.19
		MOVWF	CURSORX
		MOVLW	.3
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	4
		MOVWF	NUMBER
		MOVLW	.25
		MOVWF	CURSORX
		MOVLW	.4
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	5
		MOVWF	NUMBER
		MOVLW	.31
		MOVWF	CURSORX
		MOVLW	.5
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	6
		MOVWF	NUMBER
		MOVLW	.37
		MOVWF	CURSORX
		MOVLW	.6
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	7
		MOVWF	NUMBER
		MOVLW	.43
		MOVWF	CURSORX
		MOVLW	.7
		MOVWF	CURSORY
		CALL	DUMP


		MOVLW	8
		MOVWF	NUMBER
		MOVLW	.49
		MOVWF	CURSORX
		MOVLW	.8
		MOVWF	CURSORY
		CALL	DUMP

		MOVLW	9
		MOVWF	NUMBER
		MOVLW	.55
		MOVWF	CURSORX
		MOVLW	.9
		MOVWF	CURSORY
		CALL	DUMP



		CALL	DATAREG


RETURN


;=======================	DUMP DATA		===============
DUMP
		MOVFW	ROW
		MOVWF	BTCOUNT

		MOVFW	PCLATH
		MOVWF	PCLATH_TEMP
		MOVLW	0
		MOVWF	POINTER

		MOVLW	0XFF
		MOVWF	TEMPRAM+00
		MOVWF	TEMPRAM+01
		
		MOVFW	CURSORY
		MOVWF	CURSORY_TEMP

		MOVLW	.15
		MOVWF	W_TEMP

		MOVFW	CURSORY
		SUBWF	W_TEMP

		BTFSS	STATUS,C
		GOTO	UPPERH
		GOTO	DUMP0

UPPERH
		MOVLW	.16
		SUBWF	CURSORY


DUMP0
		MOVFW	FONT
		ADDWF	PCL
		GOTO	DMP_FONT00
		GOTO	DMP_FONT01


DMP_FONT00
		CALL	FONT00
		GOTO	DMP0
DMP_FONT01
		CALL	FONT01
		GOTO	DMP0


DMP0
		MOVWF	TEMPRAM+00

		MOVFW	PCLATH_TEMP
		MOVWF	PCLATH
		CALL	DATAINRAM

RETURN
;==========================================================	


;=======================	PUT DATA IN RAM		===============
DATAINRAM

		MOVFW	CURSORX
		BTFSC	STATUS,Z
		GOTO	DIR1   ;DIR2(0)
		CALL	CURSORX_TEST
		MOVFW	LOOP
		BTFSC	STATUS,Z
		GOTO	DIR1
DIR0
		SETC
		RRF		TEMPRAM+00
		RRF		TEMPRAM+01

		DECFSZ	LOOP,F
		GOTO	DIR0

DIR1
		NOP
		MOVLW	.15
		MOVWF	W_TEMP

		MOVFW	CURSORY_TEMP
		SUBWF	W_TEMP

		BTFSS	STATUS,C
		GOTO	DIR2
		GOTO	DIR3

DIR2
		MOVLW	0X20
		MOVWF	FSR

		MOVFW	POINTER
		ADDWF	FSR
		



		MOVFW	TEMPRAM+00
		ANDWF	INDF

		INCF	FSR

		MOVFW	TEMPRAM+01
		ANDWF	INDF

RETURN

;DIR2(0)
;		MOVFW	TEMPRAM+00
;		ANDWF	DRAM+00
;RETURN


DIR3
		MOVLW	0X28
		MOVWF	FSR
		
		MOVFW	POINTER
		ADDWF	FSR
		
		MOVFW	TEMPRAM+00
		ANDWF	INDF
		
		INCF	FSR
		
		MOVFW	TEMPRAM+01
		ANDWF	INDF
RETURN

;==========================================================	





CURSORX_TEST
		MOVWF	W_TEMP

		MOVLW	.8
		MOVWF	MILSEC ;TEMPVAR

		MOVFW	W_TEMP
		SUBWF	MILSEC

		BTFSS	STATUS,C
		GOTO	CXT08
		
		BTFSC	STATUS,Z
		GOTO	CXT08S	;CURSOR IS 16

		MOVFW	CURSORX
		MOVWF	LOOP
		
RETURN


CXT08
		MOVFW	CURSORX
		MOVWF	W_TEMP
		
		MOVLW	.16
		MOVWF	MILSEC	;TEMPVAR
		
		MOVFW	W_TEMP
		SUBWF	MILSEC
		
		BTFSS	STATUS,C
		GOTO	CXT16

		BTFSC	STATUS,Z
		GOTO	CXT16S	;CURSOR IS 24
		
		MOVFW	CURSORX
		MOVWF	LOOP
		MOVLW	.8
		SUBWF	LOOP
CXT08S
		MOVLW	1
		MOVWF	POINTER

RETURN

		
CXT16
		MOVFW	CURSORX
		MOVWF	W_TEMP
		
		MOVLW	.24
		MOVWF	MILSEC	;TEMPVAR
		
		MOVFW	W_TEMP
		SUBWF	MILSEC
		
		BTFSS	STATUS,C
		GOTO	CXT24

		BTFSC	STATUS,Z
		GOTO	CXT24S	;CURSOR IS 24
		
		MOVFW	CURSORX
		MOVWF	LOOP
		MOVLW	.16
		SUBWF	LOOP
CXT16S
		MOVLW	2
		MOVWF	POINTER

RETURN


CXT24
		MOVFW	CURSORX
		MOVWF	W_TEMP
		
		MOVLW	.32
		MOVWF	MILSEC	;TEMPVAR
		
		MOVFW	W_TEMP
		SUBWF	MILSEC
		
		BTFSS	STATUS,C
		GOTO	CXT32

		BTFSC	STATUS,Z
		GOTO	CXT32S	;CURSOR IS 32
		
		MOVFW	CURSORX
		MOVWF	LOOP
		MOVLW	.24
		SUBWF	LOOP
CXT24S
		MOVLW	3
		MOVWF	POINTER

RETURN

CXT32
		MOVFW	CURSORX
		MOVWF	W_TEMP
		
		MOVLW	.40
		MOVWF	MILSEC	;TEMPVAR
		
		MOVFW	W_TEMP
		SUBWF	MILSEC
		
		BTFSS	STATUS,C
		GOTO	CXT40

		BTFSC	STATUS,Z
		GOTO	CXT40S	;CURSOR IS 40
		
		MOVFW	CURSORX
		MOVWF	LOOP
		MOVLW	.32
		SUBWF	LOOP
CXT32S
		MOVLW	4
		MOVWF	POINTER

RETURN


CXT40
		MOVFW	CURSORX
		MOVWF	W_TEMP
		
		MOVLW	.48
		MOVWF	MILSEC	;TEMPVAR
		
		MOVFW	W_TEMP
		SUBWF	MILSEC
		
		BTFSS	STATUS,C
		GOTO	CXT48
	
		BTFSC	STATUS,Z
		GOTO	CXT48S	;CURSOR IS 48

		MOVFW	CURSORX
		MOVWF	LOOP
		MOVLW	.40
		SUBWF	LOOP
CXT40S
		MOVLW	5
		MOVWF	POINTER



RETURN

CXT48
		MOVFW	CURSORX
		MOVWF	W_TEMP
		
		MOVLW	.56
		MOVWF	MILSEC	;TEMPVAR
		
		MOVFW	W_TEMP
		SUBWF	MILSEC
		
		BTFSS	STATUS,C
		GOTO	CXT56

		BTFSC	STATUS,Z
		GOTO	CXT56S	;CURSOR IS 56
		
		MOVFW	CURSORX
		MOVWF	LOOP
		MOVLW	.48
		SUBWF	LOOP
CXT48S
		MOVLW	6
		MOVWF	POINTER

RETURN


CXT56
		MOVFW	CURSORX
		MOVWF	W_TEMP
		
		MOVLW	.64
		MOVWF	MILSEC	;TEMPVAR
		
		MOVFW	W_TEMP
		SUBWF	MILSEC
		
		BTFSS	STATUS,C
		GOTO	CXT64

		BTFSC	STATUS,Z
		GOTO	CXT64S	;CURSOR IS 64
		
		MOVFW	CURSORX
		MOVWF	LOOP
		MOVLW	.56
		SUBWF	LOOP
CXT56S
		MOVLW	7
		MOVWF	POINTER

RETURN

CXT64

		MOVFW	CURSORX
		MOVWF	W_TEMP
		
		MOVLW	.72
		MOVWF	MILSEC	;TEMPVAR
		
		MOVFW	W_TEMP
		SUBWF	MILSEC
		
		BTFSS	STATUS,C
		;GOTO	CXT64
		RETURN

		BTFSC	STATUS,Z
		;GOTO	CXT64S	;CURSOR IS 56
		RETURN
		
		MOVFW	CURSORX
		MOVWF	LOOP
		MOVLW	.56
		SUBWF	LOOP
CXT64S
		MOVLW	7
		MOVWF	POINTER

RETURN









;=======================	REGISTER DATA		===============
DATAREG

	MOVLW	0X20
	MOVWF	FSR

	MOVLW	8
	MOVWF	COUNT1
	
DR0
	MOVFW	INDF
	MOVWF	HALF0
	
	MOVLW	8
	ADDWF	FSR
	
	MOVFW	INDF
	MOVWF	HALF1

	MOVLW	8
	SUBWF	FSR
	



	MOVLW	8
	MOVWF	COUNT0

DR1
	RLF		HALF0
	BTFSS	STATUS,C
	GOTO	DATAH00
	GOTO	DATAH01

DATAH00
	R1_1
	GOTO	DR2

DATAH01
	R1_0


DR2
	RLF		HALF1
	BTFSS	STATUS,C
	GOTO	DATAH10
	GOTO	DATAH11

DATAH10
	G2_1
	GOTO	DR3

DATAH11
	G2_0

DR3


	CLK_ON
	CLK_OFF

	DECFSZ	COUNT0,F
	GOTO	DR1

	INCF	FSR	
	DECFSZ	COUNT1,F
	GOTO	DR0



RETURN
;==========================================================	
		
		


;=======================	CLEAR	RAM		===============
CLR_RAM
	BANK0
	MOVLW		.32
	MOVWF		POINTER
	MOVLW		DRAM
	MOVWF		FSR  

CLR0
	MOVLW		0XFF
	MOVWF		INDF

	INCF		FSR, F
	DECFSZ		POINTER, F
	GOTO		CLR0
	 
	RETURN
;==========================================================












ORG 0X500
FONT00

	; CHECK SA SA CURSOR Y
	MOVFW	CURSORY
	BTFSC	STATUS,Z
	GOTO	FONT00_Z
	GOTO	FONT00_NZ

FONT00_Z
	BTFSS	ROW,3
	GOTO	FONT00_RET
	
	MOVFW	ROW
	MOVWF	BTCOUNT
	MOVLW	8
	SUBWF	BTCOUNT
	GOTO	FONT00_CONT1	


FONT00_NZ
	MOVLW	.16			;MAX ROW
	MOVWF	W_TEMP

	MOVLW	.8			;SUBTRACT HEIGHT
	SUBWF	W_TEMP

	MOVFW	CURSORY
	SUBWF	W_TEMP		;SUBTRACT CURSOR Y	W_TEMP NOW IS THE STARTING ROW

;CHECK IF CURSOR Y EXCEEDS
	BTFSS	STATUS,DC
	GOTO	FONT00_EX

	MOVFW	W_TEMP
	MOVWF	STPT		;STORE TO STPT VAR
	
	MOVFW	ROW
	SUBWF	W_TEMP		;START DUMPING IN THE CORRECT ROW

	BTFSC	STATUS,DC
	GOTO	FONT00_RET
	GOTO	FONT00_CONT

FONT00_RET
;RETURN WITH VALUE OF 0XFF
	MOVLW	0XFF
RETURN

FONT00_EX
	MOVFW	CURSORY
	MOVWF	BTCOUNT
	MOVLW	8
	SUBWF	BTCOUNT
	
	MOVFW	ROW
	ADDWF	BTCOUNT

	BTFSC	BTCOUNT,3
	GOTO	FONT00_RET


	BTFSC	ROW,3
	GOTO	FONT00_RET
	GOTO	FONT00_CONT1


FONT00_CONT
	MOVFW	ROW
	MOVWF	BTCOUNT
	

	MOVFW	STPT
	SUBWF	BTCOUNT	

	BTFSC	BTCOUNT,3
	GOTO	FONT00_RET

FONT00_CONT1

	MOVLW	5
	MOVWF	PCLATH
	
	MOVFW	NUMBER
	ADDWF	PCL,F

	GOTO	F00_ZERO
	
	GOTO	F00_ONE
	
	GOTO	F00_TWO

	GOTO	F00_THREE

	GOTO	F00_FOUR
	
	GOTO	F00_FIVE

	GOTO	F00_SIX
	
	GOTO	F00_SEVEN
	
	GOTO	F00_EIGHT

	GOTO	F00_NINE




	F00_ZERO
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
	
			DT	B'11111111'
			DT	B'10001111'
			DT	B'01110111'
			DT	B'00110111'
			DT	B'01010111'
			DT	B'01100111'
			DT	B'01110111'
			DT	B'10001111'



	F00_ONE
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	7

			DT	B'11111111'
			DT	B'11011111'
			DT	B'10011111'
			DT	B'11011111'
			DT	B'11011111'
			DT	B'11011111'
			DT	B'11011111'
			DT	B'10001111'


	F00_TWO
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8

			DT	B'11111111'
			DT	B'10001111'
			DT	B'01110111'
			DT	B'11110111'
			DT	B'11101111'
			DT	B'11011111'
			DT	B'10111111'
			DT	B'00000111'





				

	F00_THREE
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8

			DT	B'11111111'
			DT	B'00000111'
			DT	B'11110111'
			DT	B'11101111'
			DT	B'11001111'
			DT	B'11110111'
			DT	B'01110111'
			DT	B'10001111'






	F00_FOUR
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8


			DT	B'11111111'
			DT	B'11101111'
			DT	B'11001111'
			DT	B'10101111'
			DT	B'01101111'
			DT	B'00000111'
			DT	B'11101111'
			DT	B'11101111'


	F00_FIVE
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8

			DT	B'11111111'
			DT	B'00000111'
			DT	B'01111111'
			DT	B'00001111'
			DT	B'11110111'
			DT	B'11110111'
			DT	B'01110111'
			DT	B'10001111'




	F00_SIX
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8



			DT	B'11111111'
			DT	B'10001111'
			DT	B'01110111'
			DT	B'01111111'
			DT	B'00001111'
			DT	B'01110111'
			DT	B'01110111'
			DT	B'10001111'


	F00_SEVEN	
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8	

			DT	B'11111111'
			DT	B'00000111'
			DT	B'11110111'
			DT	B'11101111'
			DT	B'11011111'
			DT	B'10111111'
			DT	B'10111111'
			DT	B'10111111'

				
	F00_EIGHT
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8

			DT	B'11111111'
			DT	B'10001111'
			DT	B'01110111'
			DT	B'01110111'
			DT	B'10001111'
			DT	B'01110111'
			DT	B'01110111'
			DT	B'10001111'



	F00_NINE
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'10001111'
			DT	B'01110111'
			DT	B'01110111'
			DT	B'10000111'
			DT	B'11110111'
			DT	B'01110111'
			DT	B'10001111'





ORG 0X700
FONT01
	MOVLW	7
	MOVWF	PCLATH


	MOVFW	NUMBER
	ADDWF	PCL,F

	GOTO	F01_ZERO
	
	GOTO	F01_ONE
	
	GOTO	F01_TWO

	GOTO	F01_THREE

	GOTO	F01_FOUR
	
	GOTO	F01_FIVE

	GOTO	F01_SIX
	
	GOTO	F01_SEVEN
	
	GOTO	F01_EIGHT

	GOTO	F01_NINE




	F01_ZERO
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'11111111'
			DT	B'11000111'
			DT	B'10000011'
			DT	B'00010001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00010001'
			DT	B'10000011'
			DT	B'11000111'



	F01_ONE
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	7
			DT	B'11111111'
			DT	B'11111111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'10001111'
			DT	B'00001111'
			DT	B'01001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'00000011'
			DT	B'00000011'


	F01_TWO
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'11111111'
			DT	B'10000111'
			DT	B'00000011'
			DT	B'00110001'
			DT	B'01111001'
			DT	B'11111001'
			DT	B'11111001'
			DT	B'11110001'
			DT	B'10000011'
			DT	B'00000111'
			DT	B'00111111'
			DT	B'00111101'
			DT	B'00111001'
			DT	B'00000001'
			DT	B'00000001'





				

	F01_THREE
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'11111111'
			DT	B'10000111'
			DT	B'00000011'
			DT	B'00110001'
			DT	B'01111001'
			DT	B'11111001'
			DT	B'11110001'
			DT	B'11000011'
			DT	B'11000011'
			DT	B'11110001'
			DT	B'11111001'
			DT	B'01111001'
			DT	B'00110001'
			DT	B'00000011'
			DT	B'10000111'





	F01_FOUR
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'11111111'
			DT	B'11111101'
			DT	B'11111001'
			DT	B'11101001'
			DT	B'11001001'
			DT	B'11001001'
			DT	B'10011001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00000001'
			DT	B'00000001'
			DT	B'11111001'
			DT	B'11111001'
			DT	B'11111001'
			DT	B'11111001'

	F01_FIVE
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'11111111'
			DT	B'00000001'
			DT	B'00000001'
			DT	B'00111001'
			DT	B'00111011'
			DT	B'00111111'
			DT	B'00000111'
			DT	B'00000011'
			DT	B'11110001'
			DT	B'11111001'
			DT	B'11111001'
			DT	B'01111001'
			DT	B'00110001'
			DT	B'00000011'
			DT	B'10000111'



	F01_SIX
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'11111111'
			DT	B'11000111'
			DT	B'10000011'
			DT	B'00010001'
			DT	B'00111001'
			DT	B'00111111'
			DT	B'00111111'
			DT	B'00100111'
			DT	B'00000011'
			DT	B'00010001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00010001'
			DT	B'10000011'
			DT	B'11000111'

	F01_SEVEN	
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8	
			DT	B'11111111'
			DT	B'11111111'
			DT	B'00000001'
			DT	B'00000001'
			DT	B'00111001'
			DT	B'01111001'
			DT	B'11111001'
			DT	B'11111001'
			DT	B'11110011'
			DT	B'11100111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'
			DT	B'11001111'

				
	F01_EIGHT
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'11111111'
			DT	B'11000111'
			DT	B'10000011'
			DT	B'00010001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'10010011'
			DT	B'11000111'
			DT	B'10010011'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00010001'
			DT	B'10000011'
			DT	B'11000111'


	F01_NINE
			MOVFW	BTCOUNT
			ADDWF	PCL, F

			;DT	8
			DT	B'11111111'
			DT	B'11111111'
			DT	B'11000111'
			DT	B'10000011'
			DT	B'00010001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00111001'
			DT	B'00010001'
			DT	B'10000001'
			DT	B'11001001'
			DT	B'11111001'
			DT	B'00111001'
			DT	B'00010001'
			DT	B'10000011'
			DT	B'11000111'




	ORG	0X2100				; DATA EEPROM LOCATION
	DE	1,2,3,4				; DEFINE FIRST FOUR EEPROM LOCATIONS AS 1, 2, 3, AND 4




	END                       ; DIRECTIVE 'END OF PROGRAM'

