;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
002F  01E7  	CLRF Wdt_Delay__0003E_1_i
0030        label5
0030  0866  	MOVF Wdt_Delay__0003E_arg_delay, W
0031  0267  	SUBWF Wdt_Delay__0003E_1_i, W
0032  1803  	BTFSC STATUS,C
0038  0AE7  	INCF Wdt_Delay__0003E_1_i, F
0039  2830  	GOTO	label5

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0034  0064  	CLRWDT

        delay_ms(1);
0035  3001  	MOVLW 0x01
0036  00E8  	MOVWF delay_ms_00000_arg_del
0037  2010  	CALL delay_ms_00000

    }
}
0033  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\Thermometer\Flowcode\thermodistance_test.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Sunday, July 12, 2020 20:54:40
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 1
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 1
#define MX_USES_SINT32 1
#define MX_USES_BOOL 1
#define MX_USES_UINT16 1
#define MX_USES_UINT32 1
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 3276800
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f32
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f32);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_display();
void FCM_calc();
void FCM_i2c_comm();
void FCM_distance();
void FCM_get_distance();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT32 FCV_DURATION = (0x0);
07BD  01B4  	CLRF gbl_FCV_DURATION
07BE  01B5  	CLRF gbl_FCV_DURATION+D'1'
07BF  01B6  	CLRF gbl_FCV_DURATION+D'2'
07C0  01B7  	CLRF gbl_FCV_DURATION+D'3'

MX_UINT8 FCV_TEMP_CDP = (0x0);
07C1  01D2  	CLRF gbl_FCV_TEMP_CDP

MX_SINT32 FCV_RAW = (0);
07C2  01B8  	CLRF gbl_FCV_RAW
07C3  01B9  	CLRF gbl_FCV_RAW+D'1'
07C4  01BA  	CLRF gbl_FCV_RAW+D'2'
07C5  01BB  	CLRF gbl_FCV_RAW+D'3'

MX_UINT8 FCV_DATA0 = (0xff);
07C6  30FF  	MOVLW 0xFF
07C7  00D3  	MOVWF gbl_FCV_DATA0

MX_UINT8 FCV_DATA1 = (0xff);
07C8  30FF  	MOVLW 0xFF
07C9  00D4  	MOVWF gbl_FCV_DATA1

MX_UINT8 FCV_DATA2 = (0xff);
07CA  30FF  	MOVLW 0xFF
07CB  00D5  	MOVWF gbl_FCV_DATA2

MX_UINT8 FCV_DP2 = (0x0);
07CC  01D6  	CLRF gbl_FCV_DP2

MX_BOOL FCV_ECHO = (0);
07CD  1057  	BCF gbl_FCV_ECHO,0

MX_FLOAT FCV_FL;
MX_UINT8 FCV_LSB = (0x0);
07CE  01D8  	CLRF gbl_FCV_LSB

MX_UINT8 FCV_RT_BYTE = (0x1);
07CF  3001  	MOVLW 0x01
07D0  00D9  	MOVWF gbl_FCV_RT_BYTE

MX_UINT16 FCV_CALIB_SUBTRACTOR = (0x0);
07D1  01C5  	CLRF gbl_FCV_CALIB_SUBTRACTOR
07D2  01C6  	CLRF gbl_FCV_CALIB_SUBTRACTOR+D'1'

MX_UINT8 FCV_MSB = (0x0);
07D3  01DA  	CLRF gbl_FCV_MSB

MX_SINT32 FCV_TEMP_C = (0);
07D4  01BC  	CLRF gbl_FCV_TEMP_C
07D5  01BD  	CLRF gbl_FCV_TEMP_C+D'1'
07D6  01BE  	CLRF gbl_FCV_TEMP_C+D'2'
07D7  01BF  	CLRF gbl_FCV_TEMP_C+D'3'

MX_UINT8 FCV_I2C_RX = (0x0);
07D8  01DB  	CLRF gbl_FCV_I2C_RX

MX_BOOL FCV_TRIG = (0);
07D9  10D7  	BCF gbl_FCV_TRIG,1

MX_UINT8 FCV_DATA_PREV = (0x0);
07DA  01DC  	CLRF gbl_FCV_DATA_PREV

MX_SINT16 FCV_CALIB_OFFSET = (0);
07DB  01C7  	CLRF gbl_FCV_CALIB_OFFSET
07DC  01C8  	CLRF gbl_FCV_CALIB_OFFSET+D'1'

MX_UINT8 FCV_DATA_DIFF = (0xff);
07DD  30FF  	MOVLW 0xFF
07DE  00DD  	MOVWF gbl_FCV_DATA_DIFF


MX_UINT8 FCLV_LOOP1;



//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    porta
	#define LCD_1__PORT1    porta
	#define LCD_1__PORT2    porta
	#define LCD_1__PORT3    porta
	#define LCD_1__PORT4    porta
	#define LCD_1__PORT5    porta
	#define LCD_1__TRIS0    trisa
	#define LCD_1__TRIS1    trisa
	#define LCD_1__TRIS2    trisa
	#define LCD_1__TRIS3    trisa
	#define LCD_1__TRIS4    trisa
	#define LCD_1__TRIS5    trisa
	#define LCD_1__BIT0    	0
	#define LCD_1__BIT1    	1
	#define LCD_1__BIT2    	2
	#define LCD_1__BIT3    	3
	#define LCD_1__RS      	4
	#define LCD_1__E       	5
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);


//I2C_Master(0): //Defines:

/**** Macro Substitutions ****
a = Unique component ID
b = I2C Channel - 0=SW, 1-4=HW
c = Baud Rate
d = SM BUS Enable 0/2
e = Slew Rate Enable 0/1
f = Bitbanged Data Port Letter
g = Bitbanged Data Pin
h = Bitbanged Clock Port Letter
i = Bitbanged Clock Pin
******************************/

//BMODE
//Bit 0 - Slew Control
//Bit 1 - SMBus Control

//Definitions for I2C slot allocation
#ifndef	MX_I2C_REF1
	#define MX_I2C_REF1
	#define I2CMASTER_2_MX_I2C_UREF			1
	#define MX_I2C_CHANNEL_1		1
	#define MX_I2C_SDA_PIN_1		4
	#define MX_I2C_SDA_PORT_1		porta
	#define MX_I2C_SDA_TRIS_1		trisa
	#define MX_I2C_SCL_PIN_1		3
	#define MX_I2C_SCL_PORT_1		porta
	#define MX_I2C_SCL_TRIS_1		trisa
	#define MX_I2C_BMODE_1			0 | 0
	#define MX_I2C_BAUD_1			100000
	#define MX_I2C_INT_1			0
#else
 #ifndef MX_I2C_REF2
	#define MX_I2C_REF2
	#define I2CMASTER_2_MX_I2C_UREF			2
	#define MX_I2C_CHANNEL_2		1
	#define MX_I2C_SDA_PIN_2		4
	#define MX_I2C_SDA_PORT_2		porta
	#define MX_I2C_SDA_TRIS_2		trisa
	#define MX_I2C_SCL_PIN_2		3
	#define MX_I2C_SCL_PORT_2		porta
	#define MX_I2C_SCL_TRIS_2		trisa
	#define MX_I2C_BMODE_2			0 | 0
	#define MX_I2C_BAUD_2			100000
	#define MX_I2C_INT_2			0
 #else
  #ifndef MX_I2C_REF3
	#define MX_I2C_REF3
	#define I2CMASTER_2_MX_I2C_UREF			3
	#define MX_I2C_CHANNEL_3		1
	#define MX_I2C_SDA_PIN_3		4
	#define MX_I2C_SDA_PORT_3		porta
	#define MX_I2C_SDA_TRIS_3		trisa
	#define MX_I2C_SCL_PIN_3		3
	#define MX_I2C_SCL_PORT_3		porta
	#define MX_I2C_SCL_TRIS_3		trisa
	#define MX_I2C_BMODE_3			0 | 0
	#define MX_I2C_BAUD_3			100000
	#define MX_I2C_INT_3			0
  #else
   #ifndef MX_I2C_REF4
	#define MX_I2C_REF4
	#define I2CMASTER_2_MX_I2C_UREF			4
	#define MX_I2C_CHANNEL_4		1
	#define MX_I2C_SDA_PIN_4		4
	#define MX_I2C_SDA_PORT_4		porta
	#define MX_I2C_SDA_TRIS_4		trisa
	#define MX_I2C_SCL_PIN_4		3
	#define MX_I2C_SCL_PORT_4		porta
	#define MX_I2C_SCL_TRIS_4		trisa
	#define MX_I2C_BMODE_4			0 | 0
	#define MX_I2C_BAUD_4			100000
	#define MX_I2C_INT_4			0
   #endif
  #endif
 #endif
#endif

#define I2CMASTER_2_I2C_Master_Init		CAL_APPEND(FC_CAL_I2C_Master_Init_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_Uninit	CAL_APPEND(FC_CAL_I2C_Master_Uninit_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_Start		CAL_APPEND(FC_CAL_I2C_Master_Start_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_Restart	CAL_APPEND(FC_CAL_I2C_Master_Restart_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_Stop		CAL_APPEND(FC_CAL_I2C_Master_Stop_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_TX_Byte	CAL_APPEND(FC_CAL_I2C_Master_TX_Byte_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_RX_Byte	CAL_APPEND(FC_CAL_I2C_Master_RX_Byte_, I2CMASTER_2_MX_I2C_UREF)

extern void I2CMASTER_2_I2C_Master_Init ();
extern void I2CMASTER_2_I2C_Master_Uninit ();
extern void I2CMASTER_2_I2C_Master_Start ();
extern void I2CMASTER_2_I2C_Master_Restart ();
extern void I2CMASTER_2_I2C_Master_Stop ();
extern MX_UINT8 I2CMASTER_2_I2C_Master_TX_Byte (MX_UINT8 Data);
extern MX_UINT8 I2CMASTER_2_I2C_Master_RX_Byte (MX_UINT8 Last);




//I2C_Master(0): //Macro function declarations

void FCD_I2C_Master0_MI2C_Init();
void FCD_I2C_Master0_MI2C_Start();
void FCD_I2C_Master0_MI2C_Restart();
void FCD_I2C_Master0_MI2C_Stop();
MX_UINT8 FCD_I2C_Master0_MI2C_Transmit_Byte(MX_UINT8 Data);
MX_UINT8 FCD_I2C_Master0_MI2C_Receive_Byte(MX_UINT8 Last);
void FCD_I2C_Master0_MI2C_Send_Byte_Transaction(MX_UINT8 Device_ID, MX_UINT8 AddrH, MX_UINT8 AddrL, MX_UINT8 Data);
MX_UINT8 FCD_I2C_Master0_MI2C_Receive_Byte_Transaction(MX_UINT8 Device_ID, MX_UINT8 AddrH, MX_UINT8 AddrL);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
003A  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
003B  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
003C  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
003D  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
003E  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
003F  1285  	BCF gbl_porta,5

		pt = ((in >> 4) & 0x0f);
0040  0E74  	SWAPF FCD_LCDDis_0005F_arg_in, W
0041  390F  	ANDLW 0x0F
0042  00F6  	MOVWF FCD_LCDDis_0005F_1_pt
0043  300F  	MOVLW 0x0F
0044  05F6  	ANDWF FCD_LCDDis_0005F_1_pt, F

		if (pt & 0x01)
0045  1876  	BTFSC FCD_LCDDis_0005F_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0046  1405  	BSF gbl_porta,0

		if (pt & 0x02)
0047  18F6  	BTFSC FCD_LCDDis_0005F_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0048  1485  	BSF gbl_porta,1

		if (pt & 0x04)
0049  1976  	BTFSC FCD_LCDDis_0005F_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
004A  1505  	BSF gbl_porta,2

		if (pt & 0x08)
004B  19F6  	BTFSC FCD_LCDDis_0005F_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
004C  1585  	BSF gbl_porta,3

		if (mask)
004D  08F5  	MOVF FCD_LCDDis_0005F_arg_mask, F
004E  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
004F  1605  	BSF gbl_porta,4

		LCD_1__DELAY;
0050  300A  	MOVLW 0x0A
0051  00F7  	MOVWF delay_10us_00000_arg_del
0052  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0053  1685  	BSF gbl_porta,5

		LCD_1__DELAY;
0054  300A  	MOVLW 0x0A
0055  00F7  	MOVWF delay_10us_00000_arg_del
0056  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0057  1285  	BCF gbl_porta,5

		pt = (in & 0x0f);
0058  300F  	MOVLW 0x0F
0059  0574  	ANDWF FCD_LCDDis_0005F_arg_in, W
005A  00F6  	MOVWF FCD_LCDDis_0005F_1_pt

		LCD_1__DELAY;
005B  300A  	MOVLW 0x0A
005C  00F7  	MOVWF delay_10us_00000_arg_del
005D  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
005E  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
005F  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0060  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0061  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0062  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0063  1285  	BCF gbl_porta,5

		if (pt & 0x01)
0064  1876  	BTFSC FCD_LCDDis_0005F_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0065  1405  	BSF gbl_porta,0

		if (pt & 0x02)
0066  18F6  	BTFSC FCD_LCDDis_0005F_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0067  1485  	BSF gbl_porta,1

		if (pt & 0x04)
0068  1976  	BTFSC FCD_LCDDis_0005F_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
0069  1505  	BSF gbl_porta,2

		if (pt & 0x08)
006A  19F6  	BTFSC FCD_LCDDis_0005F_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
006B  1585  	BSF gbl_porta,3

		if (mask)
006C  08F5  	MOVF FCD_LCDDis_0005F_arg_mask, F
006D  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
006E  1605  	BSF gbl_porta,4

		LCD_1__DELAY;
006F  300A  	MOVLW 0x0A
0070  00F7  	MOVWF delay_10us_00000_arg_del
0071  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0072  1685  	BSF gbl_porta,5

		LCD_1__DELAY;
0073  300A  	MOVLW 0x0A
0074  00F7  	MOVWF delay_10us_00000_arg_del
0075  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0076  1285  	BCF gbl_porta,5

		LCD_1__DELAY;
0077  300A  	MOVLW 0x0A
0078  00F7  	MOVWF delay_10us_00000_arg_del
0079  201C  	CALL delay_10us_00000


}
007A  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
064A  1683  	BSF STATUS, RP0
064B  1303  	BCF STATUS, RP1
064C  1005  	BCF gbl_trisa,0
064D  1283  	BCF STATUS, RP0
064E  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
064F  1683  	BSF STATUS, RP0
0650  1085  	BCF gbl_trisa,1
0651  1283  	BCF STATUS, RP0
0652  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
0653  1683  	BSF STATUS, RP0
0654  1105  	BCF gbl_trisa,2
0655  1283  	BCF STATUS, RP0
0656  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
0657  1683  	BSF STATUS, RP0
0658  1185  	BCF gbl_trisa,3
0659  1283  	BCF STATUS, RP0
065A  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
065B  1683  	BSF STATUS, RP0
065C  1205  	BCF gbl_trisa,4
065D  1283  	BCF STATUS, RP0
065E  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
065F  1683  	BSF STATUS, RP0
0660  1285  	BCF gbl_trisa,5
0661  1283  	BCF STATUS, RP0
0662  1285  	BCF gbl_porta,5


		Wdt_Delay_Ms(12);
0663  300C  	MOVLW 0x0C
0664  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
0665  202F  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
0666  3033  	MOVLW 0x33
0667  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
0668  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
0669  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
066A  3002  	MOVLW 0x02
066B  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
066C  202F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
066D  3033  	MOVLW 0x33
066E  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
066F  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
0670  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0671  3002  	MOVLW 0x02
0672  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
0673  202F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
0674  3032  	MOVLW 0x32
0675  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
0676  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
0677  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0678  3002  	MOVLW 0x02
0679  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
067A  202F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
067B  302C  	MOVLW 0x2C
067C  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
067D  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
067E  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
067F  3002  	MOVLW 0x02
0680  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
0681  202F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
0682  3006  	MOVLW 0x06
0683  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
0684  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
0685  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0686  3002  	MOVLW 0x02
0687  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
0688  202F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
0689  300C  	MOVLW 0x0C
068A  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
068B  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
068C  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
068D  3002  	MOVLW 0x02
068E  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
068F  202F  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
0690  3001  	MOVLW 0x01
0691  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
0692  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
0693  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0694  3002  	MOVLW 0x02
0695  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
0696  202F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0697  3002  	MOVLW 0x02
0698  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
0699  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
069A  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
069B  3002  	MOVLW 0x02
069C  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
069D  202F  	CALL Wdt_Delay__0003E


}
069E  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
02AB  3001  	MOVLW 0x01
02AC  1283  	BCF STATUS, RP0
02AD  1303  	BCF STATUS, RP1
02AE  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
02AF  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
02B0  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
02B1  3002  	MOVLW 0x02
02B2  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
02B3  202F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
02B4  3002  	MOVLW 0x02
02B5  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
02B6  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
02B7  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
02B8  3002  	MOVLW 0x02
02B9  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
02BA  202F  	CALL Wdt_Delay__0003E


}
02BB  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
00DA  08E5  	MOVF FCD_LCDDis_00053_arg_y, F
00DB  1D03  	BTFSS STATUS,Z
00DC  28E0  	GOTO	label18
00E0        label18

			y=0x80;
00DD  3080  	MOVLW 0x80
00DE  00E5  	MOVWF FCD_LCDDis_00053_arg_y

		else if (y==1)
00DF  28EF  	GOTO	label21
00E0  0365  	DECF FCD_LCDDis_00053_arg_y, W
00E1  1D03  	BTFSS STATUS,Z
00E2  28E6  	GOTO	label19
00E6        label19

			y=0xc0;
00E3  30C0  	MOVLW 0xC0
00E4  00E5  	MOVWF FCD_LCDDis_00053_arg_y


		#if (LCD_1__COLCNT == 16)
			else if (y==2)
00E5  28EF  	GOTO	label21
00E6  0865  	MOVF FCD_LCDDis_00053_arg_y, W
00E7  3A02  	XORLW 0x02
00E8  1D03  	BTFSS STATUS,Z
00E9  28ED  	GOTO	label20
00ED        label20

				y=0x90;
00EA  3090  	MOVLW 0x90
00EB  00E5  	MOVWF FCD_LCDDis_00053_arg_y

			else
00EC  28EF  	GOTO	label21
00EF        label21

				y=0xd0;
00ED  30D0  	MOVLW 0xD0
00EE  00E5  	MOVWF FCD_LCDDis_00053_arg_y

		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
00EF  0864  	MOVF FCD_LCDDis_00053_arg_x, W
00F0  0765  	ADDWF FCD_LCDDis_00053_arg_y, W
00F1  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
00F2  01F5  	CLRF FCD_LCDDis_0005F_arg_mask
00F3  203A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
00F4  3002  	MOVLW 0x02
00F5  00E6  	MOVWF Wdt_Delay__0003E_arg_delay
00F6  202F  	CALL Wdt_Delay__0003E


}
00F7  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)

{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
01A1  1FE2  	BTFSS FCD_LCDDis_00055_arg_Number+D'1',7
01A2  29B0  	GOTO	label32
01B0        label32

		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
01A3  302D  	MOVLW 0x2D
01A4  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
01A5  3010  	MOVLW 0x10
01A6  00F5  	MOVWF FCD_LCDDis_0005F_arg_mask
01A7  203A  	CALL FCD_LCDDis_0005F

			Number = 0 - Number;
01A8  0861  	MOVF FCD_LCDDis_00055_arg_Number, W
01A9  3C00  	SUBLW 0x00
01AA  00E6  	MOVWF CompTempVar2219
01AB  09E2  	COMF FCD_LCDDis_00055_arg_Number+D'1', F
01AC  1803  	BTFSC STATUS,C
01AD  0AE2  	INCF FCD_LCDDis_00055_arg_Number+D'1', F
01AE  0866  	MOVF CompTempVar2219, W
01AF  00E1  	MOVWF FCD_LCDDis_00055_arg_Number

		}

		tmp_int = Number;
01B0  0861  	MOVF FCD_LCDDis_00055_arg_Number, W
01B1  00E3  	MOVWF FCD_LCDDis_00055_1_tmp_int
01B2  0862  	MOVF FCD_LCDDis_00055_arg_Number+D'1', W
01B3  00E4  	MOVWF FCD_LCDDis_00055_1_tmp_int+D'1'

		if (Number >= 10000)
01B4  3027  	MOVLW 0x27
01B5  0262  	SUBWF FCD_LCDDis_00055_arg_Number+D'1', W
01B6  1D03  	BTFSS STATUS,Z
01B7  29BA  	GOTO	label33
01B8  3010  	MOVLW 0x10
01B9  0261  	SUBWF FCD_LCDDis_00055_arg_Number, W
01BA        label33
01BA  1C03  	BTFSS STATUS,C
01BB  29E8  	GOTO	label37
01BC  1BE2  	BTFSC FCD_LCDDis_00055_arg_Number+D'1',7
01BD  29E8  	GOTO	label37

		{
			tmp_byte = tmp_int / 10000;
01BE  01EA  	CLRF CompTempVar2222
01BF  0863  	MOVF FCD_LCDDis_00055_1_tmp_int, W
01C0  00E6  	MOVWF __div_16_1_00003_arg_a
01C1  0864  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', W
01C2  00E7  	MOVWF __div_16_1_00003_arg_a+D'1'
01C3  1FE4  	BTFSS FCD_LCDDis_00055_1_tmp_int+D'1',7
01C4  29CB  	GOTO	label34
01C5  09E6  	COMF __div_16_1_00003_arg_a, F
01C6  09E7  	COMF __div_16_1_00003_arg_a+D'1', F
01C7  0AE6  	INCF __div_16_1_00003_arg_a, F
01C8  1903  	BTFSC STATUS,Z
01C9  0AE7  	INCF __div_16_1_00003_arg_a+D'1', F
01CA  0AEA  	INCF CompTempVar2222, F
01CB        label34
01CB  3010  	MOVLW 0x10
01CC  00E8  	MOVWF __div_16_1_00003_arg_b
01CD  3027  	MOVLW 0x27
01CE  00E9  	MOVWF __div_16_1_00003_arg_b+D'1'
01CF  207B  	CALL __div_16_1_00003
01D0  086F  	MOVF CompTempVarRet214, W
01D1  00E5  	MOVWF FCD_LCDDis_00055_1_tmp_byte
01D2  1C6A  	BTFSS CompTempVar2222,0
01D3  29D6  	GOTO	label35
01D4  09E5  	COMF FCD_LCDDis_00055_1_tmp_byte, F
01D5  0AE5  	INCF FCD_LCDDis_00055_1_tmp_byte, F
01D6        label35

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
01D6  0865  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
01D7  3E30  	ADDLW 0x30
01D8  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
01D9  3010  	MOVLW 0x10
01DA  00F5  	MOVWF FCD_LCDDis_0005F_arg_mask
01DB  203A  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
01DC        label36
01DC  0865  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
01DD  3C00  	SUBLW 0x00
01DE  1803  	BTFSC STATUS,C
01DF  29E8  	GOTO	label37
01E7  29DC  	GOTO	label36
01E8        label37

			{
				tmp_int = tmp_int - 10000;
01E0  3010  	MOVLW 0x10
01E1  02E3  	SUBWF FCD_LCDDis_00055_1_tmp_int, F
01E2  3027  	MOVLW 0x27
01E3  1C03  	BTFSS STATUS,C
01E4  3028  	MOVLW 0x28
01E5  02E4  	SUBWF FCD_LCDDis_00055_1_tmp_int+D'1', F

				tmp_byte--;
01E6  03E5  	DECF FCD_LCDDis_00055_1_tmp_byte, F

			}
		}
		if (Number >= 1000)
01E8  3003  	MOVLW 0x03
01E9  0262  	SUBWF FCD_LCDDis_00055_arg_Number+D'1', W
01EA  1D03  	BTFSS STATUS,Z
01EB  29EE  	GOTO	label38
01EC  30E8  	MOVLW 0xE8
01ED  0261  	SUBWF FCD_LCDDis_00055_arg_Number, W
01EE        label38
01EE  1C03  	BTFSS STATUS,C
01EF  2A1E  	GOTO	label42
01F0  1BE2  	BTFSC FCD_LCDDis_00055_arg_Number+D'1',7
01F1  2A1E  	GOTO	label42

		{
			tmp_byte = tmp_int / 1000;
01F2  01EB  	CLRF CompTempVar2226
01F3  0863  	MOVF FCD_LCDDis_00055_1_tmp_int, W
01F4  00E6  	MOVWF __div_16_1_00003_arg_a
01F5  0864  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', W
01F6  00E7  	MOVWF __div_16_1_00003_arg_a+D'1'
01F7  1FE4  	BTFSS FCD_LCDDis_00055_1_tmp_int+D'1',7
01F8  29FF  	GOTO	label39
01F9  09E6  	COMF __div_16_1_00003_arg_a, F
01FA  09E7  	COMF __div_16_1_00003_arg_a+D'1', F
01FB  0AE6  	INCF __div_16_1_00003_arg_a, F
01FC  1903  	BTFSC STATUS,Z
01FD  0AE7  	INCF __div_16_1_00003_arg_a+D'1', F
01FE  0AEB  	INCF CompTempVar2226, F
01FF        label39
01FF  30E8  	MOVLW 0xE8
0200  00E8  	MOVWF __div_16_1_00003_arg_b
0201  3003  	MOVLW 0x03
0202  00E9  	MOVWF __div_16_1_00003_arg_b+D'1'
0203  207B  	CALL __div_16_1_00003
0204  086F  	MOVF CompTempVarRet214, W
0205  00EA  	MOVWF CompTempVar2225
0206  1C6B  	BTFSS CompTempVar2226,0
0207  2A0A  	GOTO	label40
0208  09EA  	COMF CompTempVar2225, F
0209  0AEA  	INCF CompTempVar2225, F
020A        label40
020A  086A  	MOVF CompTempVar2225, W
020B  00E5  	MOVWF FCD_LCDDis_00055_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
020C  0865  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
020D  3E30  	ADDLW 0x30
020E  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
020F  3010  	MOVLW 0x10
0210  00F5  	MOVWF FCD_LCDDis_0005F_arg_mask
0211  203A  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
0212        label41
0212  0865  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
0213  3C00  	SUBLW 0x00
0214  1803  	BTFSC STATUS,C
0215  2A1E  	GOTO	label42
021D  2A12  	GOTO	label41
021E        label42

			{
				tmp_int = tmp_int - 1000;
0216  30E8  	MOVLW 0xE8
0217  02E3  	SUBWF FCD_LCDDis_00055_1_tmp_int, F
0218  3003  	MOVLW 0x03
0219  1C03  	BTFSS STATUS,C
021A  3004  	MOVLW 0x04
021B  02E4  	SUBWF FCD_LCDDis_00055_1_tmp_int+D'1', F

				tmp_byte--;
021C  03E5  	DECF FCD_LCDDis_00055_1_tmp_byte, F

			}
		}
		if (Number >= 100)
021E  0862  	MOVF FCD_LCDDis_00055_arg_Number+D'1', W
021F  3A80  	XORLW 0x80
0220  00E6  	MOVWF CompTempVar2229
0221  3080  	MOVLW 0x80
0222  0266  	SUBWF CompTempVar2229, W
0223  1D03  	BTFSS STATUS,Z
0224  2A27  	GOTO	label43
0225  3064  	MOVLW 0x64
0226  0261  	SUBWF FCD_LCDDis_00055_arg_Number, W
0227        label43
0227  1C03  	BTFSS STATUS,C
0228  2A53  	GOTO	label47

		{
			tmp_byte = tmp_int / 100;
0229  01EB  	CLRF CompTempVar2231
022A  0863  	MOVF FCD_LCDDis_00055_1_tmp_int, W
022B  00E6  	MOVWF __div_16_1_00003_arg_a
022C  0864  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', W
022D  00E7  	MOVWF __div_16_1_00003_arg_a+D'1'
022E  1FE4  	BTFSS FCD_LCDDis_00055_1_tmp_int+D'1',7
022F  2A36  	GOTO	label44
0230  09E6  	COMF __div_16_1_00003_arg_a, F
0231  09E7  	COMF __div_16_1_00003_arg_a+D'1', F
0232  0AE6  	INCF __div_16_1_00003_arg_a, F
0233  1903  	BTFSC STATUS,Z
0234  0AE7  	INCF __div_16_1_00003_arg_a+D'1', F
0235  0AEB  	INCF CompTempVar2231, F
0236        label44
0236  3064  	MOVLW 0x64
0237  00E8  	MOVWF __div_16_1_00003_arg_b
0238  01E9  	CLRF __div_16_1_00003_arg_b+D'1'
0239  207B  	CALL __div_16_1_00003
023A  086F  	MOVF CompTempVarRet214, W
023B  00EA  	MOVWF CompTempVar2230
023C  1C6B  	BTFSS CompTempVar2231,0
023D  2A40  	GOTO	label45
023E  09EA  	COMF CompTempVar2230, F
023F  0AEA  	INCF CompTempVar2230, F
0240        label45
0240  086A  	MOVF CompTempVar2230, W
0241  00E5  	MOVWF FCD_LCDDis_00055_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0242  0865  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
0243  3E30  	ADDLW 0x30
0244  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
0245  3010  	MOVLW 0x10
0246  00F5  	MOVWF FCD_LCDDis_0005F_arg_mask
0247  203A  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
0248        label46
0248  0865  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
0249  3C00  	SUBLW 0x00
024A  1803  	BTFSC STATUS,C
024B  2A53  	GOTO	label47
0252  2A48  	GOTO	label46
0253        label47

			{
				tmp_int = tmp_int - 100;
024C  3064  	MOVLW 0x64
024D  02E3  	SUBWF FCD_LCDDis_00055_1_tmp_int, F
024E  08E4  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', F
024F  1C03  	BTFSS STATUS,C
0250  03E4  	DECF FCD_LCDDis_00055_1_tmp_int+D'1', F

				tmp_byte--;
0251  03E5  	DECF FCD_LCDDis_00055_1_tmp_byte, F

			}
		}
		if (Number >= 10)
0253  0862  	MOVF FCD_LCDDis_00055_arg_Number+D'1', W
0254  3A80  	XORLW 0x80
0255  00E6  	MOVWF CompTempVar2234
0256  3080  	MOVLW 0x80
0257  0266  	SUBWF CompTempVar2234, W
0258  1D03  	BTFSS STATUS,Z
0259  2A5C  	GOTO	label48
025A  300A  	MOVLW 0x0A
025B  0261  	SUBWF FCD_LCDDis_00055_arg_Number, W
025C        label48
025C  1C03  	BTFSS STATUS,C
025D  2A88  	GOTO	label52

		{
			tmp_byte = tmp_int / 10;
025E  01EB  	CLRF CompTempVar2236
025F  0863  	MOVF FCD_LCDDis_00055_1_tmp_int, W
0260  00E6  	MOVWF __div_16_1_00003_arg_a
0261  0864  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', W
0262  00E7  	MOVWF __div_16_1_00003_arg_a+D'1'
0263  1FE4  	BTFSS FCD_LCDDis_00055_1_tmp_int+D'1',7
0264  2A6B  	GOTO	label49
0265  09E6  	COMF __div_16_1_00003_arg_a, F
0266  09E7  	COMF __div_16_1_00003_arg_a+D'1', F
0267  0AE6  	INCF __div_16_1_00003_arg_a, F
0268  1903  	BTFSC STATUS,Z
0269  0AE7  	INCF __div_16_1_00003_arg_a+D'1', F
026A  0AEB  	INCF CompTempVar2236, F
026B        label49
026B  300A  	MOVLW 0x0A
026C  00E8  	MOVWF __div_16_1_00003_arg_b
026D  01E9  	CLRF __div_16_1_00003_arg_b+D'1'
026E  207B  	CALL __div_16_1_00003
026F  086F  	MOVF CompTempVarRet214, W
0270  00EA  	MOVWF CompTempVar2235
0271  1C6B  	BTFSS CompTempVar2236,0
0272  2A75  	GOTO	label50
0273  09EA  	COMF CompTempVar2235, F
0274  0AEA  	INCF CompTempVar2235, F
0275        label50
0275  086A  	MOVF CompTempVar2235, W
0276  00E5  	MOVWF FCD_LCDDis_00055_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0277  0865  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
0278  3E30  	ADDLW 0x30
0279  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
027A  3010  	MOVLW 0x10
027B  00F5  	MOVWF FCD_LCDDis_0005F_arg_mask
027C  203A  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
027D        label51
027D  0865  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
027E  3C00  	SUBLW 0x00
027F  1803  	BTFSC STATUS,C
0280  2A88  	GOTO	label52
0287  2A7D  	GOTO	label51
0288        label52

			{
				tmp_int = tmp_int - 10;
0281  300A  	MOVLW 0x0A
0282  02E3  	SUBWF FCD_LCDDis_00055_1_tmp_int, F
0283  08E4  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', F
0284  1C03  	BTFSS STATUS,C
0285  03E4  	DECF FCD_LCDDis_00055_1_tmp_int+D'1', F

				tmp_byte--;
0286  03E5  	DECF FCD_LCDDis_00055_1_tmp_byte, F

			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);
0288  0863  	MOVF FCD_LCDDis_00055_1_tmp_int, W
0289  3E30  	ADDLW 0x30
028A  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
028B  3010  	MOVLW 0x10
028C  00F5  	MOVWF FCD_LCDDis_0005F_arg_mask
028D  203A  	CALL FCD_LCDDis_0005F


}
028E  0008  	RETURN


void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
028F  01F3  	CLRF FCD_LCDDis_00054_1_idx


		for (idx=0; idx<MSZ_String; idx++)
0290  01F3  	CLRF FCD_LCDDis_00054_1_idx
0291        label53
0291  0872  	MOVF FCD_LCDDis_00054_arg_MSZ_String, W
0292  0273  	SUBWF FCD_LCDDis_00054_1_idx, W
0293  1803  	BTFSC STATUS,C
02A9  0AF3  	INCF FCD_LCDDis_00054_1_idx, F
02AA  2A91  	GOTO	label53

		{
			if (String[idx] == 0)
0295  1383  	BCF STATUS,IRP
0296  1862  	BTFSC FCD_LCDDis_00054_arg_String+D'1',0
0297  1783  	BSF STATUS,IRP
0298  0861  	MOVF FCD_LCDDis_00054_arg_String, W
0299  0773  	ADDWF FCD_LCDDis_00054_1_idx, W
029A  0084  	MOVWF FSR
029B  0880  	MOVF INDF, F
029C  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
029E  1383  	BCF STATUS,IRP
029F  1862  	BTFSC FCD_LCDDis_00054_arg_String+D'1',0
02A0  1783  	BSF STATUS,IRP
02A1  0861  	MOVF FCD_LCDDis_00054_arg_String, W
02A2  0773  	ADDWF FCD_LCDDis_00054_1_idx, W
02A3  0084  	MOVWF FSR
02A4  0800  	MOVF INDF, W
02A5  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
02A6  3010  	MOVLW 0x10
02A7  00F5  	MOVWF FCD_LCDDis_0005F_arg_mask
02A8  203A  	CALL FCD_LCDDis_0005F

		}

}
0294  0008  	RETURN
029D  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)

{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
018A  3010  	MOVLW 0x10
018B  00E3  	MOVWF FCD_LCDDis_0005E_1_rowcount

			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);
018C  01E4  	CLRF FCD_LCDDis_00053_arg_x
018D  0861  	MOVF FCD_LCDDis_0005E_arg_Line, W
018E  00E5  	MOVWF FCD_LCDDis_00053_arg_y
018F  20DA  	CALL FCD_LCDDis_00053


		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
0190  01E2  	CLRF FCD_LCDDis_0005E_1_count
0191        label30
0191  0863  	MOVF FCD_LCDDis_0005E_1_rowcount, W
0192  0262  	SUBWF FCD_LCDDis_0005E_1_count, W
0193  1803  	BTFSC STATUS,C
0194  299C  	GOTO	label31
019A  0AE2  	INCF FCD_LCDDis_0005E_1_count, F
019B  2991  	GOTO	label30
019C        label31

			FCD_LCDDisplay0_RawSend(' ', 0x10);
0195  3020  	MOVLW 0x20
0196  00F4  	MOVWF FCD_LCDDis_0005F_arg_in
0197  3010  	MOVLW 0x10
0198  00F5  	MOVWF FCD_LCDDis_0005F_arg_mask
0199  203A  	CALL FCD_LCDDis_0005F


		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);
019C  01E4  	CLRF FCD_LCDDis_00053_arg_x
019D  0861  	MOVF FCD_LCDDis_0005E_arg_Line, W
019E  00E5  	MOVWF FCD_LCDDis_00053_arg_y
019F  20DA  	CALL FCD_LCDDis_00053


}
01A0  0008  	RETURN


void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}



//I2C_Master(0): //Macro implementations


void FCD_I2C_Master0_MI2C_Init()

{
	
		I2CMASTER_2_I2C_Master_Init();
069F  217B  	CALL FC_CAL_I2C_00066


}
06A0  0008  	RETURN


void FCD_I2C_Master0_MI2C_Start()

{
	
		I2CMASTER_2_I2C_Master_Start();
02CC  20D2  	CALL FC_CAL_I2C_00068


}
02CD  0008  	RETURN


void FCD_I2C_Master0_MI2C_Restart()

{
	
		I2CMASTER_2_I2C_Master_Restart();
02C4  20CA  	CALL FC_CAL_I2C_00069


}
02C5  0008  	RETURN


void FCD_I2C_Master0_MI2C_Stop()

{
	
		I2CMASTER_2_I2C_Master_Stop();
02BC  20BE  	CALL FC_CAL_I2C_0006A


}
02BD  0008  	RETURN


MX_UINT8 FCD_I2C_Master0_MI2C_Transmit_Byte(MX_UINT8 Data)

{
	
		return I2CMASTER_2_I2C_Master_TX_Byte(Data);
02C6  0861  	MOVF FCD_I2C_Ma_00058_arg_Data, W
02C7  00E2  	MOVWF FC_CAL_I2C_0006B_arg_Data
02C8  20AF  	CALL FC_CAL_I2C_0006B
02C9  0863  	MOVF CompTempVarRet2303, W
02CA  00E2  	MOVWF CompTempVarRet2262


}
02CB  0008  	RETURN


MX_UINT8 FCD_I2C_Master0_MI2C_Receive_Byte(MX_UINT8 Last)

{
	
		return I2CMASTER_2_I2C_Master_RX_Byte(Last);
02BE  0861  	MOVF FCD_I2C_Ma_0005A_arg_Last, W
02BF  00E2  	MOVWF FC_CAL_I2C_0006C_arg_Last
02C0  209A  	CALL FC_CAL_I2C_0006C
02C1  0863  	MOVF CompTempVarRet2304, W
02C2  00E2  	MOVWF CompTempVarRet2263


}
02C3  0008  	RETURN


void FCD_I2C_Master0_MI2C_Send_Byte_Transaction(MX_UINT8 Device_ID, MX_UINT8 AddrH, MX_UINT8 AddrL, MX_UINT8 Data)
{
	
		Device_ID = Device_ID << 1;					//Shift Device ID to enable write mode

		I2CMASTER_2_I2C_Master_Start();						//Start transaction
		I2CMASTER_2_I2C_Master_TX_Byte(Device_ID);			//Transmit Device Address
		I2CMASTER_2_I2C_Master_TX_Byte(AddrH);				//Transmit Internal Address
		I2CMASTER_2_I2C_Master_TX_Byte(AddrL);
		I2CMASTER_2_I2C_Master_TX_Byte(Data);				//Send Data byte
		I2CMASTER_2_I2C_Master_Stop();						//Stop Transaction

}

MX_UINT8 FCD_I2C_Master0_MI2C_Receive_Byte_Transaction(MX_UINT8 Device_ID, MX_UINT8 AddrH, MX_UINT8 AddrL)
{
	
		MX_UINT8 RetVal = 0;
		Device_ID = Device_ID << 1;					//Shift Device ID to enable write mode

		I2CMASTER_2_I2C_Master_Start();						//Start transaction
		I2CMASTER_2_I2C_Master_TX_Byte(Device_ID);			//Transmit Device Address
		I2CMASTER_2_I2C_Master_TX_Byte(AddrH);				//Transmit Internal Address
		I2CMASTER_2_I2C_Master_TX_Byte(AddrL);
		I2CMASTER_2_I2C_Master_Restart();					//Restart transaction

		Device_ID = Device_ID | 0x01;				//Change Device ID to read mode
		I2CMASTER_2_I2C_Master_TX_Byte(Device_ID);			//Transmit Device Address
		RetVal = I2CMASTER_2_I2C_Master_RX_Byte(1);			//Read data at address
		I2CMASTER_2_I2C_Master_Stop();						//Stop Transaction

		return RetVal;								//Return data

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_display()

{

	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
046D  22AB  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: Cursor(0, 0)
	FCD_LCDDisplay0_Cursor(0, 0);
046E  01E4  	CLRF FCD_LCDDis_00053_arg_x
046F  01E5  	CLRF FCD_LCDDis_00053_arg_y
0470  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("Thermal D TEST")
	FCD_LCDDisplay0_PrintString("Thermal D TEST", 14);
0471  3020  	MOVLW 0x20
0472  00EA  	MOVWF CompTempVar2195+D'7'
0473  00EC  	MOVWF CompTempVar2195+D'9'
0474  3044  	MOVLW 0x44
0475  00EB  	MOVWF CompTempVar2195+D'8'
0476  3045  	MOVLW 0x45
0477  00EE  	MOVWF CompTempVar2195+D'11'
0478  3053  	MOVLW 0x53
0479  00EF  	MOVWF CompTempVar2195+D'12'
047A  3054  	MOVLW 0x54
047B  00E3  	MOVWF CompTempVar2195
047C  00ED  	MOVWF CompTempVar2195+D'10'
047D  00F0  	MOVWF CompTempVar2195+D'13'
047E  3061  	MOVLW 0x61
047F  00E8  	MOVWF CompTempVar2195+D'5'
0480  3065  	MOVLW 0x65
0481  00E5  	MOVWF CompTempVar2195+D'2'
0482  3068  	MOVLW 0x68
0483  00E4  	MOVWF CompTempVar2195+D'1'
0484  306C  	MOVLW 0x6C
0485  00E9  	MOVWF CompTempVar2195+D'6'
0486  306D  	MOVLW 0x6D
0487  00E7  	MOVWF CompTempVar2195+D'4'
0488  3072  	MOVLW 0x72
0489  00E6  	MOVWF CompTempVar2195+D'3'
048A  01F1  	CLRF CompTempVar2195+D'14'
048B  3000  	MOVLW HIGH(CompTempVar2195+D'0')
048C  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
048D  3063  	MOVLW LOW(CompTempVar2195+D'0')
048E  00E1  	MOVWF FCD_LCDDis_00054_arg_String
048F  300E  	MOVLW 0x0E
0490  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0491  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: Cursor(0, 1)
	FCD_LCDDisplay0_Cursor(0, 1);
0492  01E4  	CLRF FCD_LCDDis_00053_arg_x
0493  3001  	MOVLW 0x01
0494  00E5  	MOVWF FCD_LCDDis_00053_arg_y
0495  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("Temp:")
	FCD_LCDDisplay0_PrintString("Temp:", 5);
0496  3054  	MOVLW 0x54
0497  00E3  	MOVWF CompTempVar2197
0498  3065  	MOVLW 0x65
0499  00E4  	MOVWF CompTempVar2197+D'1'
049A  306D  	MOVLW 0x6D
049B  00E5  	MOVWF CompTempVar2197+D'2'
049C  3070  	MOVLW 0x70
049D  00E6  	MOVWF CompTempVar2197+D'3'
049E  303A  	MOVLW 0x3A
049F  00E7  	MOVWF CompTempVar2197+D'4'
04A0  01E8  	CLRF CompTempVar2197+D'5'
04A1  3000  	MOVLW HIGH(CompTempVar2197+D'0')
04A2  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
04A3  3063  	MOVLW LOW(CompTempVar2197+D'0')
04A4  00E1  	MOVWF FCD_LCDDis_00054_arg_String
04A5  3005  	MOVLW 0x05
04A6  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
04A7  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: PrintNumber(temp_c)
	FCD_LCDDisplay0_PrintNumber(FCV_TEMP_C);
04A8  083C  	MOVF gbl_FCV_TEMP_C, W
04A9  00E1  	MOVWF FCD_LCDDis_00055_arg_Number
04AA  083D  	MOVF gbl_FCV_TEMP_C+D'1', W
04AB  00E2  	MOVWF FCD_LCDDis_00055_arg_Number+D'1'
04AC  21A1  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: PrintString(".")
	FCD_LCDDisplay0_PrintString(".", 1);
04AD  302E  	MOVLW 0x2E
04AE  00E3  	MOVWF CompTempVar2199
04AF  01E4  	CLRF CompTempVar2199+D'1'
04B0  3000  	MOVLW HIGH(CompTempVar2199+D'0')
04B1  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
04B2  3063  	MOVLW LOW(CompTempVar2199+D'0')
04B3  00E1  	MOVWF FCD_LCDDis_00054_arg_String
04B4  3001  	MOVLW 0x01
04B5  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
04B6  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: PrintNumber(temp_cdp)
	FCD_LCDDisplay0_PrintNumber(FCV_TEMP_CDP);
04B7  0852  	MOVF gbl_FCV_TEMP_CDP, W
04B8  00E1  	MOVWF FCD_LCDDis_00055_arg_Number
04B9  01E2  	CLRF FCD_LCDDis_00055_arg_Number+D'1'
04BA  21A1  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: Cursor(9, 1)
	FCD_LCDDisplay0_Cursor(9, 1);
04BB  3009  	MOVLW 0x09
04BC  00E4  	MOVWF FCD_LCDDis_00053_arg_x
04BD  3001  	MOVLW 0x01
04BE  00E5  	MOVWF FCD_LCDDis_00053_arg_y
04BF  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("C")
	FCD_LCDDisplay0_PrintString("C", 1);
04C0  3043  	MOVLW 0x43
04C1  00E3  	MOVWF CompTempVar2201
04C2  01E4  	CLRF CompTempVar2201+D'1'
04C3  3000  	MOVLW HIGH(CompTempVar2201+D'0')
04C4  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
04C5  3063  	MOVLW LOW(CompTempVar2201+D'0')
04C6  00E1  	MOVWF FCD_LCDDis_00054_arg_String
04C7  3001  	MOVLW 0x01
04C8  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
04C9  228F  	CALL FCD_LCDDis_00054


	//Decision
	//Decision: temp_c > 37?
	if (FCV_TEMP_C > 37)
04CA  083F  	MOVF gbl_FCV_TEMP_C+D'3', W
04CB  3C00  	SUBLW 0x00
04CC  1D03  	BTFSS STATUS,Z
04CD  2CD8  	GOTO	label72
04CE  083E  	MOVF gbl_FCV_TEMP_C+D'2', W
04CF  3C00  	SUBLW 0x00
04D0  1D03  	BTFSS STATUS,Z
04D1  2CD8  	GOTO	label72
04D2  083D  	MOVF gbl_FCV_TEMP_C+D'1', W
04D3  3C00  	SUBLW 0x00
04D4  1D03  	BTFSS STATUS,Z
04D5  2CD8  	GOTO	label72
04D6  083C  	MOVF gbl_FCV_TEMP_C, W
04D7  3C25  	SUBLW 0x25
04D8        label72
04D8  1BBF  	BTFSC gbl_FCV_TEMP_C+D'3',7
04D9  1403  	BSF STATUS,C
04DA  1803  	BTFSC STATUS,C
04DB  2D16  	GOTO	label73
0516        label73

	{

		//Call Component Macro
		//Call Component Macro: Cursor(2, 2)
		FCD_LCDDisplay0_Cursor(2, 2);
04DC  3002  	MOVLW 0x02
04DD  00E4  	MOVWF FCD_LCDDis_00053_arg_x
04DE  00E5  	MOVWF FCD_LCDDis_00053_arg_y
04DF  20DA  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: PrintString("COVID 19 RISK!")
		FCD_LCDDisplay0_PrintString("COVID 19 RISK!", 14);
04E0  3020  	MOVLW 0x20
04E1  00E8  	MOVWF CompTempVar2203+D'5'
04E2  00EB  	MOVWF CompTempVar2203+D'8'
04E3  3021  	MOVLW 0x21
04E4  00F0  	MOVWF CompTempVar2203+D'13'
04E5  3031  	MOVLW 0x31
04E6  00E9  	MOVWF CompTempVar2203+D'6'
04E7  3039  	MOVLW 0x39
04E8  00EA  	MOVWF CompTempVar2203+D'7'
04E9  3043  	MOVLW 0x43
04EA  00E3  	MOVWF CompTempVar2203
04EB  3044  	MOVLW 0x44
04EC  00E7  	MOVWF CompTempVar2203+D'4'
04ED  3049  	MOVLW 0x49
04EE  00E6  	MOVWF CompTempVar2203+D'3'
04EF  00ED  	MOVWF CompTempVar2203+D'10'
04F0  304B  	MOVLW 0x4B
04F1  00EF  	MOVWF CompTempVar2203+D'12'
04F2  304F  	MOVLW 0x4F
04F3  00E4  	MOVWF CompTempVar2203+D'1'
04F4  3052  	MOVLW 0x52
04F5  00EC  	MOVWF CompTempVar2203+D'9'
04F6  3053  	MOVLW 0x53
04F7  00EE  	MOVWF CompTempVar2203+D'11'
04F8  3056  	MOVLW 0x56
04F9  00E5  	MOVWF CompTempVar2203+D'2'
04FA  01F1  	CLRF CompTempVar2203+D'14'
04FB  3000  	MOVLW HIGH(CompTempVar2203+D'0')
04FC  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
04FD  3063  	MOVLW LOW(CompTempVar2203+D'0')
04FE  00E1  	MOVWF FCD_LCDDis_00054_arg_String
04FF  300E  	MOVLW 0x0E
0500  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0501  228F  	CALL FCD_LCDDis_00054


		//Output
		//Output: 1 -> B0
		trisb = trisb & 0xFE;
0502  30FE  	MOVLW 0xFE
0503  1683  	BSF STATUS, RP0
0504  0506  	ANDWF gbl_trisb, W
0505  0086  	MOVWF gbl_trisb

		if ((1))
			portb = (portb & 0xFE) | 0x01;
0506  30FE  	MOVLW 0xFE
0507  1283  	BCF STATUS, RP0
0508  0506  	ANDWF gbl_portb, W
0509  00E1  	MOVWF CompTempVar2205
050A  3001  	MOVLW 0x01
050B  0461  	IORWF CompTempVar2205, W
050C  0086  	MOVWF gbl_portb

		else
			portb = portb & 0xFE;

		//Output
		//Output: 0 -> B1
		trisb = trisb & 0xFD;
050D  30FD  	MOVLW 0xFD
050E  1683  	BSF STATUS, RP0
050F  0506  	ANDWF gbl_trisb, W
0510  0086  	MOVWF gbl_trisb

		if ((0))
			portb = (portb & 0xFD) | 0x02;
		else
			portb = portb & 0xFD;
0511  30FD  	MOVLW 0xFD
0512  1283  	BCF STATUS, RP0
0513  0506  	ANDWF gbl_portb, W
0514  0086  	MOVWF gbl_portb


	} else {
0515  2D42  	GOTO	label74
0542        label74


		//Call Component Macro
		//Call Component Macro: Cursor(2, 2)
		FCD_LCDDisplay0_Cursor(2, 2);
0516  3002  	MOVLW 0x02
0517  00E4  	MOVWF FCD_LCDDis_00053_arg_x
0518  00E5  	MOVWF FCD_LCDDis_00053_arg_y
0519  20DA  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: PrintString("PASSED!")
		FCD_LCDDisplay0_PrintString("PASSED!", 7);
051A  3050  	MOVLW 0x50
051B  00E3  	MOVWF CompTempVar2206
051C  3041  	MOVLW 0x41
051D  00E4  	MOVWF CompTempVar2206+D'1'
051E  3053  	MOVLW 0x53
051F  00E5  	MOVWF CompTempVar2206+D'2'
0520  00E6  	MOVWF CompTempVar2206+D'3'
0521  3045  	MOVLW 0x45
0522  00E7  	MOVWF CompTempVar2206+D'4'
0523  3044  	MOVLW 0x44
0524  00E8  	MOVWF CompTempVar2206+D'5'
0525  3021  	MOVLW 0x21
0526  00E9  	MOVWF CompTempVar2206+D'6'
0527  01EA  	CLRF CompTempVar2206+D'7'
0528  3000  	MOVLW HIGH(CompTempVar2206+D'0')
0529  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
052A  3063  	MOVLW LOW(CompTempVar2206+D'0')
052B  00E1  	MOVWF FCD_LCDDis_00054_arg_String
052C  3007  	MOVLW 0x07
052D  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
052E  228F  	CALL FCD_LCDDis_00054


		//Output
		//Output: 0 -> B0
		trisb = trisb & 0xFE;
052F  30FE  	MOVLW 0xFE
0530  1683  	BSF STATUS, RP0
0531  0506  	ANDWF gbl_trisb, W
0532  0086  	MOVWF gbl_trisb

		if ((0))
			portb = (portb & 0xFE) | 0x01;
		else
			portb = portb & 0xFE;
0533  30FE  	MOVLW 0xFE
0534  1283  	BCF STATUS, RP0
0535  0506  	ANDWF gbl_portb, W
0536  0086  	MOVWF gbl_portb


		//Output
		//Output: 1 -> B1
		trisb = trisb & 0xFD;
0537  30FD  	MOVLW 0xFD
0538  1683  	BSF STATUS, RP0
0539  0506  	ANDWF gbl_trisb, W
053A  0086  	MOVWF gbl_trisb

		if ((1))
			portb = (portb & 0xFD) | 0x02;
053B  30FD  	MOVLW 0xFD
053C  1283  	BCF STATUS, RP0
053D  0506  	ANDWF gbl_portb, W
053E  00E1  	MOVWF CompTempVar2208
053F  3002  	MOVLW 0x02
0540  0461  	IORWF CompTempVar2208, W
0541  0086  	MOVWF gbl_portb

		else
			portb = portb & 0xFD;

	}

	//Call Component Macro
	//Call Component Macro: Cursor(0, 3)
	FCD_LCDDisplay0_Cursor(0, 3);
0542  01E4  	CLRF FCD_LCDDis_00053_arg_x
0543  3003  	MOVLW 0x03
0544  00E5  	MOVWF FCD_LCDDis_00053_arg_y
0545  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("D=")
	FCD_LCDDisplay0_PrintString("D=", 2);
0546  3044  	MOVLW 0x44
0547  00E3  	MOVWF CompTempVar2209
0548  303D  	MOVLW 0x3D
0549  00E4  	MOVWF CompTempVar2209+D'1'
054A  01E5  	CLRF CompTempVar2209+D'2'
054B  3000  	MOVLW HIGH(CompTempVar2209+D'0')
054C  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
054D  3063  	MOVLW LOW(CompTempVar2209+D'0')
054E  00E1  	MOVWF FCD_LCDDis_00054_arg_String
054F  3002  	MOVLW 0x02
0550  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0551  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: Cursor(2, 3)
	FCD_LCDDisplay0_Cursor(2, 3);
0552  3002  	MOVLW 0x02
0553  00E4  	MOVWF FCD_LCDDis_00053_arg_x
0554  3003  	MOVLW 0x03
0555  00E5  	MOVWF FCD_LCDDis_00053_arg_y
0556  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintNumber(duration)
	FCD_LCDDisplay0_PrintNumber(FCV_DURATION);
0557  0834  	MOVF gbl_FCV_DURATION, W
0558  00E1  	MOVWF FCD_LCDDis_00055_arg_Number
0559  0835  	MOVF gbl_FCV_DURATION+D'1', W
055A  00E2  	MOVWF FCD_LCDDis_00055_arg_Number+D'1'
055B  21A1  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: PrintString("cm")
	FCD_LCDDisplay0_PrintString("cm", 2);
055C  3063  	MOVLW 0x63
055D  00E3  	MOVWF CompTempVar2211
055E  306D  	MOVLW 0x6D
055F  00E4  	MOVWF CompTempVar2211+D'1'
0560  01E5  	CLRF CompTempVar2211+D'2'
0561  3000  	MOVLW HIGH(CompTempVar2211+D'0')
0562  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0563  3063  	MOVLW LOW(CompTempVar2211+D'0')
0564  00E1  	MOVWF FCD_LCDDis_00054_arg_String
0565  3002  	MOVLW 0x02
0566  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0567  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: Cursor(9, 3)
	FCD_LCDDisplay0_Cursor(9, 3);
0568  3009  	MOVLW 0x09
0569  00E4  	MOVWF FCD_LCDDis_00053_arg_x
056A  3003  	MOVLW 0x03
056B  00E5  	MOVWF FCD_LCDDis_00053_arg_y
056C  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("CS=")
	FCD_LCDDisplay0_PrintString("CS=", 3);
056D  3043  	MOVLW 0x43
056E  00E3  	MOVWF CompTempVar2213
056F  3053  	MOVLW 0x53
0570  00E4  	MOVWF CompTempVar2213+D'1'
0571  303D  	MOVLW 0x3D
0572  00E5  	MOVWF CompTempVar2213+D'2'
0573  01E6  	CLRF CompTempVar2213+D'3'
0574  3000  	MOVLW HIGH(CompTempVar2213+D'0')
0575  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0576  3063  	MOVLW LOW(CompTempVar2213+D'0')
0577  00E1  	MOVWF FCD_LCDDis_00054_arg_String
0578  3003  	MOVLW 0x03
0579  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
057A  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: PrintNumber(calib_subtractor)
	FCD_LCDDisplay0_PrintNumber(FCV_CALIB_SUBTRACTOR);
057B  0845  	MOVF gbl_FCV_CALIB_SUBTRACTOR, W
057C  00E1  	MOVWF FCD_LCDDis_00055_arg_Number
057D  0846  	MOVF gbl_FCV_CALIB_SUBTRACTOR+D'1', W
057E  00E2  	MOVWF FCD_LCDDis_00055_arg_Number+D'1'
057F  21A1  	CALL FCD_LCDDis_00055


}
0580  0008  	RETURN



void FCM_calc()

{

	//Calculation
	//Calculation:
	//  lsb = data0
	//  msb = data1
	FCV_LSB = FCV_DATA0;
0581  1283  	BCF STATUS, RP0
0582  1303  	BCF STATUS, RP1
0583  0853  	MOVF gbl_FCV_DATA0, W
0584  00D8  	MOVWF gbl_FCV_LSB

	FCV_MSB = FCV_DATA1;
0585  0854  	MOVF gbl_FCV_DATA1, W
0586  00DA  	MOVWF gbl_FCV_MSB


	//Calculation
	//Calculation:
	//  raw = msb
	FCV_RAW = FCV_MSB;
0587  085A  	MOVF gbl_FCV_MSB, W
0588  00B8  	MOVWF gbl_FCV_RAW
0589  01B9  	CLRF gbl_FCV_RAW+D'1'
058A  01BA  	CLRF gbl_FCV_RAW+D'2'
058B  01BB  	CLRF gbl_FCV_RAW+D'3'


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<8; FCLV_LOOP1++)
058C  01DE  	CLRF gbl_FCLV_LOOP1
058D        label75
058D  3008  	MOVLW 0x08
058E  025E  	SUBWF gbl_FCLV_LOOP1, W
058F  1803  	BTFSC STATUS,C
0590  2D9C  	GOTO	label76
059A  0ADE  	INCF gbl_FCLV_LOOP1, F
059B  2D8D  	GOTO	label75
059C        label76

	{

		//Calculation
		//Calculation:
		//  raw = raw << 1
		FCV_RAW = FCV_RAW << 1;
0591  08B8  	MOVF gbl_FCV_RAW, F
0592  08B9  	MOVF gbl_FCV_RAW+D'1', F
0593  08BA  	MOVF gbl_FCV_RAW+D'2', F
0594  08BB  	MOVF gbl_FCV_RAW+D'3', F
0595  1003  	BCF STATUS,C
0596  0DB8  	RLF gbl_FCV_RAW, F
0597  0DB9  	RLF gbl_FCV_RAW+D'1', F
0598  0DBA  	RLF gbl_FCV_RAW+D'2', F
0599  0DBB  	RLF gbl_FCV_RAW+D'3', F



	}

	//Calculation
	//Calculation:
	//  raw = raw + lsb
	FCV_RAW = FCV_RAW + FCV_LSB;
059C  0858  	MOVF gbl_FCV_LSB, W
059D  00E1  	MOVWF CompTempVar2245
059E  01E2  	CLRF CompTempVar2246
059F  01E3  	CLRF CompTempVar2247
05A0  01E4  	CLRF CompTempVar2248
05A1  0838  	MOVF gbl_FCV_RAW, W
05A2  07E1  	ADDWF CompTempVar2245, F
05A3  0839  	MOVF gbl_FCV_RAW+D'1', W
05A4  1803  	BTFSC STATUS,C
05A5  0F39  	INCFSZ gbl_FCV_RAW+D'1', W
05A6  07E2  	ADDWF CompTempVar2246, F
05A7  083A  	MOVF gbl_FCV_RAW+D'2', W
05A8  1803  	BTFSC STATUS,C
05A9  0F3A  	INCFSZ gbl_FCV_RAW+D'2', W
05AA  07E3  	ADDWF CompTempVar2247, F
05AB  083B  	MOVF gbl_FCV_RAW+D'3', W
05AC  1803  	BTFSC STATUS,C
05AD  0F3B  	INCFSZ gbl_FCV_RAW+D'3', W
05AE  07E4  	ADDWF CompTempVar2248, F
05AF  0861  	MOVF CompTempVar2245, W
05B0  00B8  	MOVWF gbl_FCV_RAW
05B1  0862  	MOVF CompTempVar2246, W
05B2  00B9  	MOVWF gbl_FCV_RAW+D'1'
05B3  0863  	MOVF CompTempVar2247, W
05B4  00BA  	MOVWF gbl_FCV_RAW+D'2'
05B5  0864  	MOVF CompTempVar2248, W
05B6  00BB  	MOVWF gbl_FCV_RAW+D'3'


	//Calculation
	//Calculation:
	//  temp_c = (raw / 50) - calib_subtractor
	FCV_TEMP_C = (FCV_RAW / 50) - FCV_CALIB_SUBTRACTOR;
05B7  01ED  	CLRF CompTempVar2258
05B8  0838  	MOVF gbl_FCV_RAW, W
05B9  00E1  	MOVWF __div_32_3_00001_arg_a
05BA  0839  	MOVF gbl_FCV_RAW+D'1', W
05BB  00E2  	MOVWF __div_32_3_00001_arg_a+D'1'
05BC  083A  	MOVF gbl_FCV_RAW+D'2', W
05BD  00E3  	MOVWF __div_32_3_00001_arg_a+D'2'
05BE  083B  	MOVF gbl_FCV_RAW+D'3', W
05BF  00E4  	MOVWF __div_32_3_00001_arg_a+D'3'
05C0  1FBB  	BTFSS gbl_FCV_RAW+D'3',7
05C1  2DCE  	GOTO	label77
05C2  09E1  	COMF __div_32_3_00001_arg_a, F
05C3  09E2  	COMF __div_32_3_00001_arg_a+D'1', F
05C4  09E3  	COMF __div_32_3_00001_arg_a+D'2', F
05C5  09E4  	COMF __div_32_3_00001_arg_a+D'3', F
05C6  0AE1  	INCF __div_32_3_00001_arg_a, F
05C7  1903  	BTFSC STATUS,Z
05C8  0AE2  	INCF __div_32_3_00001_arg_a+D'1', F
05C9  1903  	BTFSC STATUS,Z
05CA  0AE3  	INCF __div_32_3_00001_arg_a+D'2', F
05CB  1903  	BTFSC STATUS,Z
05CC  0AE4  	INCF __div_32_3_00001_arg_a+D'3', F
05CD  0AED  	INCF CompTempVar2258, F
05CE        label77
05CE  3032  	MOVLW 0x32
05CF  00E5  	MOVWF __div_32_3_00001_arg_b
05D0  01E6  	CLRF __div_32_3_00001_arg_b+D'1'
05D1  01E7  	CLRF __div_32_3_00001_arg_b+D'2'
05D2  01E8  	CLRF __div_32_3_00001_arg_b+D'3'
05D3  2142  	CALL __div_32_3_00001
05D4  0873  	MOVF CompTempVarRet210, W
05D5  00BC  	MOVWF gbl_FCV_TEMP_C
05D6  0874  	MOVF CompTempVarRet210+D'1', W
05D7  00BD  	MOVWF gbl_FCV_TEMP_C+D'1'
05D8  0875  	MOVF CompTempVarRet210+D'2', W
05D9  00BE  	MOVWF gbl_FCV_TEMP_C+D'2'
05DA  0876  	MOVF CompTempVarRet210+D'3', W
05DB  00BF  	MOVWF gbl_FCV_TEMP_C+D'3'
05DC  1C6D  	BTFSS CompTempVar2258,0
05DD  2DE9  	GOTO	label78
05DE  09BC  	COMF gbl_FCV_TEMP_C, F
05DF  09BD  	COMF gbl_FCV_TEMP_C+D'1', F
05E0  09BE  	COMF gbl_FCV_TEMP_C+D'2', F
05E1  09BF  	COMF gbl_FCV_TEMP_C+D'3', F
05E2  0ABC  	INCF gbl_FCV_TEMP_C, F
05E3  1903  	BTFSC STATUS,Z
05E4  0ABD  	INCF gbl_FCV_TEMP_C+D'1', F
05E5  1903  	BTFSC STATUS,Z
05E6  0ABE  	INCF gbl_FCV_TEMP_C+D'2', F
05E7  1903  	BTFSC STATUS,Z
05E8  0ABF  	INCF gbl_FCV_TEMP_C+D'3', F
05E9        label78
05E9  0845  	MOVF gbl_FCV_CALIB_SUBTRACTOR, W
05EA  00E9  	MOVWF CompTempVar2249
05EB  0846  	MOVF gbl_FCV_CALIB_SUBTRACTOR+D'1', W
05EC  00EA  	MOVWF CompTempVar2249+D'1'
05ED  01EB  	CLRF CompTempVar2249+D'2'
05EE  01EC  	CLRF CompTempVar2249+D'3'
05EF  0869  	MOVF CompTempVar2249, W
05F0  02BC  	SUBWF gbl_FCV_TEMP_C, F
05F1  086A  	MOVF CompTempVar2249+D'1', W
05F2  1C03  	BTFSS STATUS,C
05F3  0F6A  	INCFSZ CompTempVar2249+D'1', W
05F4  02BD  	SUBWF gbl_FCV_TEMP_C+D'1', F
05F5  086B  	MOVF CompTempVar2249+D'2', W
05F6  1C03  	BTFSS STATUS,C
05F7  0F6B  	INCFSZ CompTempVar2249+D'2', W
05F8  02BE  	SUBWF gbl_FCV_TEMP_C+D'2', F
05F9  086C  	MOVF CompTempVar2249+D'3', W
05FA  1C03  	BTFSS STATUS,C
05FB  0F6C  	INCFSZ CompTempVar2249+D'3', W
05FC  02BF  	SUBWF gbl_FCV_TEMP_C+D'3', F


	//Calculation
	//Calculation:
	//  dp2 = raw % 50
	FCV_DP2 = FCV_RAW % 50;
05FD  0838  	MOVF gbl_FCV_RAW, W
05FE  00E1  	MOVWF __rem_32_3_00002_arg_a
05FF  0839  	MOVF gbl_FCV_RAW+D'1', W
0600  00E2  	MOVWF __rem_32_3_00002_arg_a+D'1'
0601  083A  	MOVF gbl_FCV_RAW+D'2', W
0602  00E3  	MOVWF __rem_32_3_00002_arg_a+D'2'
0603  083B  	MOVF gbl_FCV_RAW+D'3', W
0604  00E4  	MOVWF __rem_32_3_00002_arg_a+D'3'
0605  1FBB  	BTFSS gbl_FCV_RAW+D'3',7
0606  2E12  	GOTO	label79
0607  09E1  	COMF __rem_32_3_00002_arg_a, F
0608  09E2  	COMF __rem_32_3_00002_arg_a+D'1', F
0609  09E3  	COMF __rem_32_3_00002_arg_a+D'2', F
060A  09E4  	COMF __rem_32_3_00002_arg_a+D'3', F
060B  0AE1  	INCF __rem_32_3_00002_arg_a, F
060C  1903  	BTFSC STATUS,Z
060D  0AE2  	INCF __rem_32_3_00002_arg_a+D'1', F
060E  1903  	BTFSC STATUS,Z
060F  0AE3  	INCF __rem_32_3_00002_arg_a+D'2', F
0610  1903  	BTFSC STATUS,Z
0611  0AE4  	INCF __rem_32_3_00002_arg_a+D'3', F
0612        label79
0612  3032  	MOVLW 0x32
0613  00E5  	MOVWF __rem_32_3_00002_arg_b
0614  01E6  	CLRF __rem_32_3_00002_arg_b+D'1'
0615  01E7  	CLRF __rem_32_3_00002_arg_b+D'2'
0616  01E8  	CLRF __rem_32_3_00002_arg_b+D'3'
0617  20F8  	CALL __rem_32_3_00002
0618  086E  	MOVF CompTempVarRet212, W
0619  00D6  	MOVWF gbl_FCV_DP2
061A  1FBB  	BTFSS gbl_FCV_RAW+D'3',7
061B  2E1E  	GOTO	label80
061C  09D6  	COMF gbl_FCV_DP2, F
061D  0AD6  	INCF gbl_FCV_DP2, F
061E        label80


	//Decision
	//Decision: dp2 >= 100?
	if (FCV_DP2 >= 100)
061E  3064  	MOVLW 0x64
061F  0256  	SUBWF gbl_FCV_DP2, W
0620  1C03  	BTFSS STATUS,C
0621  2E2A  	GOTO	label81
062A        label81

	{

		//Calculation
		//Calculation:
		//  temp_cdp = dp2 / 100
		FCV_TEMP_CDP = FCV_DP2 / 100;
0622  0856  	MOVF gbl_FCV_DP2, W
0623  00E3  	MOVWF __div_8_8_00000_arg_a
0624  3064  	MOVLW 0x64
0625  00E4  	MOVWF __div_8_8_00000_arg_b
0626  2131  	CALL __div_8_8_00000
0627  0867  	MOVF CompTempVarRet218, W
0628  00D2  	MOVWF gbl_FCV_TEMP_CDP


	} else {
0629  2E46  	GOTO	label83


		//Decision
		//Decision: dp2 >= 10 AND dp2 <= 100?
		if (FCV_DP2 >= 10 & FCV_DP2 <= 100)
062A  01E2  	CLRF CompTempVar2261
062B  300A  	MOVLW 0x0A
062C  0256  	SUBWF gbl_FCV_DP2, W
062D  1803  	BTFSC STATUS,C
062E  0AE2  	INCF CompTempVar2261, F
062F  01E1  	CLRF CompTempVar2260
0630  0856  	MOVF gbl_FCV_DP2, W
0631  3C64  	SUBLW 0x64
0632  1803  	BTFSC STATUS,C
0633  0AE1  	INCF CompTempVar2260, F
0634  0861  	MOVF CompTempVar2260, W
0635  0562  	ANDWF CompTempVar2261, W
0636  1903  	BTFSC STATUS,Z
0637  2E40  	GOTO	label82
0640        label82

		{

			//Calculation
			//Calculation:
			//  temp_cdp = dp2 / 10
			FCV_TEMP_CDP = FCV_DP2 / 10;
0638  0856  	MOVF gbl_FCV_DP2, W
0639  00E3  	MOVWF __div_8_8_00000_arg_a
063A  300A  	MOVLW 0x0A
063B  00E4  	MOVWF __div_8_8_00000_arg_b
063C  2131  	CALL __div_8_8_00000
063D  0867  	MOVF CompTempVarRet218, W
063E  00D2  	MOVWF gbl_FCV_TEMP_CDP


		} else {
063F  2E46  	GOTO	label83


			//Decision
			//Decision: dp2 < 10?
			if (FCV_DP2 < 10)
0640  300A  	MOVLW 0x0A
0641  0256  	SUBWF gbl_FCV_DP2, W
0642  1803  	BTFSC STATUS,C
0643  2E46  	GOTO	label83
0646        label83

			{

				//Calculation
				//Calculation:
				//  temp_cdp = dp2
				FCV_TEMP_CDP = FCV_DP2;
0644  0856  	MOVF gbl_FCV_DP2, W
0645  00D2  	MOVWF gbl_FCV_TEMP_CDP


			// } else {

			}

		}

	}

	//Calculation
	//Calculation:
	//  temp_cdp = temp_cdp + calib_offset
	FCV_TEMP_CDP = FCV_TEMP_CDP + FCV_CALIB_OFFSET;
0646  0847  	MOVF gbl_FCV_CALIB_OFFSET, W
0647  0752  	ADDWF gbl_FCV_TEMP_CDP, W
0648  00D2  	MOVWF gbl_FCV_TEMP_CDP


}
0649  0008  	RETURN



void FCM_i2c_comm()

{

	//Call Component Macro
	//Call Component Macro: MI2C_Start()
	FCD_I2C_Master0_MI2C_Start();
02CE  22CC  	CALL FCD_I2C_Ma_00057


	//Calculation
	//Calculation:
	//  rt_byte = 0
	FCV_RT_BYTE = 0;
02CF  1283  	BCF STATUS, RP0
02D0  01D9  	CLRF gbl_FCV_RT_BYTE


	//Call Component Macro
	//Call Component Macro: rt_byte=MI2C_Transmit_Byte(0xB4)
	FCV_RT_BYTE = FCD_I2C_Master0_MI2C_Transmit_Byte(0xB4);
02D1  30B4  	MOVLW 0xB4
02D2  00E1  	MOVWF FCD_I2C_Ma_00058_arg_Data
02D3  22C6  	CALL FCD_I2C_Ma_00058
02D4  0862  	MOVF CompTempVarRet2262, W
02D5  00D9  	MOVWF gbl_FCV_RT_BYTE


	//Calculation
	//Calculation:
	//  rt_byte = 0
	FCV_RT_BYTE = 0;
02D6  01D9  	CLRF gbl_FCV_RT_BYTE


	//Call Component Macro
	//Call Component Macro: rt_byte=MI2C_Transmit_Byte(0x07)
	FCV_RT_BYTE = FCD_I2C_Master0_MI2C_Transmit_Byte(0x07);
02D7  3007  	MOVLW 0x07
02D8  00E1  	MOVWF FCD_I2C_Ma_00058_arg_Data
02D9  22C6  	CALL FCD_I2C_Ma_00058
02DA  0862  	MOVF CompTempVarRet2262, W
02DB  00D9  	MOVWF gbl_FCV_RT_BYTE


	//Comment:
	//end of RD/WR cmd

	//Call Component Macro
	//Call Component Macro: MI2C_Restart()
	FCD_I2C_Master0_MI2C_Restart();
02DC  22C4  	CALL FCD_I2C_Ma_00059


	//Calculation
	//Calculation:
	//  rt_byte = 0
	FCV_RT_BYTE = 0;
02DD  1283  	BCF STATUS, RP0
02DE  01D9  	CLRF gbl_FCV_RT_BYTE


	//Call Component Macro
	//Call Component Macro: rt_byte=MI2C_Transmit_Byte(0xB4)
	FCV_RT_BYTE = FCD_I2C_Master0_MI2C_Transmit_Byte(0xB4);
02DF  30B4  	MOVLW 0xB4
02E0  00E1  	MOVWF FCD_I2C_Ma_00058_arg_Data
02E1  22C6  	CALL FCD_I2C_Ma_00058
02E2  0862  	MOVF CompTempVarRet2262, W
02E3  00D9  	MOVWF gbl_FCV_RT_BYTE


	//Call Component Macro
	//Call Component Macro: i2c_rx=MI2C_Receive_Byte(rt_byte)
	FCV_I2C_RX = FCD_I2C_Master0_MI2C_Receive_Byte(FCV_RT_BYTE);
02E4  0859  	MOVF gbl_FCV_RT_BYTE, W
02E5  00E1  	MOVWF FCD_I2C_Ma_0005A_arg_Last
02E6  22BE  	CALL FCD_I2C_Ma_0005A
02E7  0862  	MOVF CompTempVarRet2263, W
02E8  00DB  	MOVWF gbl_FCV_I2C_RX


	//Calculation
	//Calculation:
	//  data0 = i2c_rx
	FCV_DATA0 = FCV_I2C_RX;
02E9  085B  	MOVF gbl_FCV_I2C_RX, W
02EA  00D3  	MOVWF gbl_FCV_DATA0


	//Call Component Macro
	//Call Component Macro: i2c_rx=MI2C_Receive_Byte(rt_byte)
	FCV_I2C_RX = FCD_I2C_Master0_MI2C_Receive_Byte(FCV_RT_BYTE);
02EB  0859  	MOVF gbl_FCV_RT_BYTE, W
02EC  00E1  	MOVWF FCD_I2C_Ma_0005A_arg_Last
02ED  22BE  	CALL FCD_I2C_Ma_0005A
02EE  0862  	MOVF CompTempVarRet2263, W
02EF  00DB  	MOVWF gbl_FCV_I2C_RX


	//Calculation
	//Calculation:
	//  data1 = i2c_rx
	FCV_DATA1 = FCV_I2C_RX;
02F0  085B  	MOVF gbl_FCV_I2C_RX, W
02F1  00D4  	MOVWF gbl_FCV_DATA1


	//Call Component Macro
	//Call Component Macro: i2c_rx=MI2C_Receive_Byte(rt_byte)
	FCV_I2C_RX = FCD_I2C_Master0_MI2C_Receive_Byte(FCV_RT_BYTE);
02F2  0859  	MOVF gbl_FCV_RT_BYTE, W
02F3  00E1  	MOVWF FCD_I2C_Ma_0005A_arg_Last
02F4  22BE  	CALL FCD_I2C_Ma_0005A
02F5  0862  	MOVF CompTempVarRet2263, W
02F6  00DB  	MOVWF gbl_FCV_I2C_RX


	//Calculation
	//Calculation:
	//  data2 = i2c_rx
	FCV_DATA2 = FCV_I2C_RX;
02F7  085B  	MOVF gbl_FCV_I2C_RX, W
02F8  00D5  	MOVWF gbl_FCV_DATA2


	//Call Component Macro
	//Call Component Macro: MI2C_Stop()
	FCD_I2C_Master0_MI2C_Stop();
02F9  22BC  	CALL FCD_I2C_Ma_0005B


}
02FA  0008  	RETURN



void FCM_distance()
{

	//Output
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;

	//Output
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
	if ((1))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;

	//Delay
	//Delay: 10 us
	delay_us(10);

	//Output
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;

	//Connection Point
	//Connection Point: [A]: A
FCC_distance_A:
;

	//Calculation
	//Calculation:
	//  duration = 0
	FCV_DURATION = 0;

	//Input
	//Input: C2 -> echo
	trisc = trisc | 0x04;
	FCV_ECHO = ((portc & 0x04) == 0x04);

	//Decision
	//Decision: echo = 1?
	if (FCV_ECHO == 1)
	{

		//Loop
		//Loop: While echo = 1
		while (1)
		{

			//Calculation
			//Calculation:
			//  duration = duration + 1
			FCV_DURATION = FCV_DURATION + 1;

			//Input
			//Input: C2 -> echo
			trisc = trisc | 0x04;
			FCV_ECHO = ((portc & 0x04) == 0x04);

			//Delay
			//Delay: 1 us
			delay_us(1);


			if ((FCV_ECHO == 1) == 0) break;
		}

	} else {

		//Goto Connection Point
		//Goto Connection Point: [A]: A
		goto FCC_distance_A;

	}

}


void FCM_get_distance()

{

	//Output
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
02FB  30FD  	MOVLW 0xFD
02FC  1683  	BSF STATUS, RP0
02FD  1303  	BCF STATUS, RP1
02FE  0507  	ANDWF gbl_trisc, W
02FF  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
0300  30FD  	MOVLW 0xFD
0301  1283  	BCF STATUS, RP0
0302  0507  	ANDWF gbl_portc, W
0303  0087  	MOVWF gbl_portc


	//Output
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
0304  30FD  	MOVLW 0xFD
0305  1683  	BSF STATUS, RP0
0306  0507  	ANDWF gbl_trisc, W
0307  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFD) | 0x02;
0308  30FD  	MOVLW 0xFD
0309  1283  	BCF STATUS, RP0
030A  0507  	ANDWF gbl_portc, W
030B  00E1  	MOVWF CompTempVar2274
030C  3002  	MOVLW 0x02
030D  0461  	IORWF CompTempVar2274, W
030E  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFD;

	//Delay
	//Delay: 10 us
	delay_us(10);
030F  300A  	MOVLW 0x0A
0310  00E2  	MOVWF delay_us_00000_arg_del
0311  2025  	CALL delay_us_00000


	//Output
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
0312  30FD  	MOVLW 0xFD
0313  1683  	BSF STATUS, RP0
0314  0507  	ANDWF gbl_trisc, W
0315  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
0316  30FD  	MOVLW 0xFD
0317  1283  	BCF STATUS, RP0
0318  0507  	ANDWF gbl_portc, W
0319  0087  	MOVWF gbl_portc


	//Connection Point
	//Connection Point: [A]: A
FCC_get_distance_A:
031A        label54

;

	//Calculation
	//Calculation:
	//  duration = 0
	FCV_DURATION = 0;
031A  01B4  	CLRF gbl_FCV_DURATION
031B  01B5  	CLRF gbl_FCV_DURATION+D'1'
031C  01B6  	CLRF gbl_FCV_DURATION+D'2'
031D  01B7  	CLRF gbl_FCV_DURATION+D'3'


	//Input
	//Input: C2 -> echo
	trisc = trisc | 0x04;
031E  3004  	MOVLW 0x04
031F  1683  	BSF STATUS, RP0
0320  0407  	IORWF gbl_trisc, W
0321  0087  	MOVWF gbl_trisc

	FCV_ECHO = ((portc & 0x04) == 0x04);
0322  3004  	MOVLW 0x04
0323  1283  	BCF STATUS, RP0
0324  0507  	ANDWF gbl_portc, W
0325  00E1  	MOVWF CompTempVar2275
0326  01E2  	CLRF CompTempVar2276
0327  3004  	MOVLW 0x04
0328  0261  	SUBWF CompTempVar2275, W
0329  1903  	BTFSC STATUS,Z
032A  0AE2  	INCF CompTempVar2276, F
032B  1057  	BCF gbl_FCV_ECHO,0
032C  0862  	MOVF CompTempVar2276, W
032D  1D03  	BTFSS STATUS,Z
032E  1457  	BSF gbl_FCV_ECHO,0


	//Decision
	//Decision: echo = 1?
	if (FCV_ECHO == 1)
032F  1C57  	BTFSS gbl_FCV_ECHO,0
0330  2B1A  	GOTO	label54
0331        label55

	{

		//Loop
		//Loop: While echo = 1
		while (1)
0355  2B31  	GOTO	label55

		{

			//Calculation
			//Calculation:
			//  duration = duration + 1
			FCV_DURATION = FCV_DURATION + 1;
0331  08B4  	MOVF gbl_FCV_DURATION, F
0332  08B5  	MOVF gbl_FCV_DURATION+D'1', F
0333  08B6  	MOVF gbl_FCV_DURATION+D'2', F
0334  08B7  	MOVF gbl_FCV_DURATION+D'3', F
0335  0AB4  	INCF gbl_FCV_DURATION, F
0336  1903  	BTFSC STATUS,Z
0337  0AB5  	INCF gbl_FCV_DURATION+D'1', F
0338  1903  	BTFSC STATUS,Z
0339  0AB6  	INCF gbl_FCV_DURATION+D'2', F
033A  1903  	BTFSC STATUS,Z
033B  0AB7  	INCF gbl_FCV_DURATION+D'3', F


			//Input
			//Input: C2 -> echo
			trisc = trisc | 0x04;
033C  3004  	MOVLW 0x04
033D  1683  	BSF STATUS, RP0
033E  0407  	IORWF gbl_trisc, W
033F  0087  	MOVWF gbl_trisc

			FCV_ECHO = ((portc & 0x04) == 0x04);
0340  3004  	MOVLW 0x04
0341  1283  	BCF STATUS, RP0
0342  0507  	ANDWF gbl_portc, W
0343  00E2  	MOVWF CompTempVar2282
0344  01E3  	CLRF CompTempVar2283
0345  3004  	MOVLW 0x04
0346  0262  	SUBWF CompTempVar2282, W
0347  1903  	BTFSC STATUS,Z
0348  0AE3  	INCF CompTempVar2283, F
0349  1057  	BCF gbl_FCV_ECHO,0
034A  0863  	MOVF CompTempVar2283, W
034B  1D03  	BTFSS STATUS,Z
034C  1457  	BSF gbl_FCV_ECHO,0


			//Delay
			//Delay: 1 us
			delay_us(1);
034D  3001  	MOVLW 0x01
034E  00E2  	MOVWF delay_us_00000_arg_del
034F  2025  	CALL delay_us_00000



			if ((FCV_ECHO == 1) == 0) break;
0350  01E1  	CLRF CompTempVar2277
0351  1857  	BTFSC gbl_FCV_ECHO,0
0352  0AE1  	INCF CompTempVar2277, F
0353  08E1  	MOVF CompTempVar2277, F
0354  1D03  	BTFSS STATUS,Z

		}

	} else {

		//Goto Connection Point
		//Goto Connection Point: [A]: A
		goto FCC_get_distance_A;


	}

	//Decision
	//Decision: duration > 20?
	if (FCV_DURATION > 20)
0356  0837  	MOVF gbl_FCV_DURATION+D'3', W
0357  3C00  	SUBLW 0x00
0358  1D03  	BTFSS STATUS,Z
0359  2B64  	GOTO	label56
035A  0836  	MOVF gbl_FCV_DURATION+D'2', W
035B  3C00  	SUBLW 0x00
035C  1D03  	BTFSS STATUS,Z
035D  2B64  	GOTO	label56
035E  0835  	MOVF gbl_FCV_DURATION+D'1', W
035F  3C00  	SUBLW 0x00
0360  1D03  	BTFSS STATUS,Z
0361  2B64  	GOTO	label56
0362  0834  	MOVF gbl_FCV_DURATION, W
0363  3C14  	SUBLW 0x14
0364        label56
0364  1803  	BTFSC STATUS,C
0365  2B6B  	GOTO	label57
036B        label57

	{

		//Calculation
		//Calculation:
		//  calib_subtractor = 266
		FCV_CALIB_SUBTRACTOR = 266;
0366  300A  	MOVLW 0x0A
0367  00C5  	MOVWF gbl_FCV_CALIB_SUBTRACTOR
0368  3001  	MOVLW 0x01
0369  00C6  	MOVWF gbl_FCV_CALIB_SUBTRACTOR+D'1'


	} else {
036A  2C2B  	GOTO	label71


		//Decision
		//Decision: duration > 12 AND duration < 21?
		if (FCV_DURATION > 12 & FCV_DURATION < 21)
036B  01E2  	CLRF CompTempVar2285
036C  0837  	MOVF gbl_FCV_DURATION+D'3', W
036D  3C00  	SUBLW 0x00
036E  1D03  	BTFSS STATUS,Z
036F  2B7A  	GOTO	label58
0370  0836  	MOVF gbl_FCV_DURATION+D'2', W
0371  3C00  	SUBLW 0x00
0372  1D03  	BTFSS STATUS,Z
0373  2B7A  	GOTO	label58
0374  0835  	MOVF gbl_FCV_DURATION+D'1', W
0375  3C00  	SUBLW 0x00
0376  1D03  	BTFSS STATUS,Z
0377  2B7A  	GOTO	label58
0378  0834  	MOVF gbl_FCV_DURATION, W
0379  3C0C  	SUBLW 0x0C
037A        label58
037A  1C03  	BTFSS STATUS,C
037B  0AE2  	INCF CompTempVar2285, F
037C  01E1  	CLRF CompTempVar2284
037D  3000  	MOVLW 0x00
037E  0237  	SUBWF gbl_FCV_DURATION+D'3', W
037F  1D03  	BTFSS STATUS,Z
0380  2B8B  	GOTO	label59
0381  3000  	MOVLW 0x00
0382  0236  	SUBWF gbl_FCV_DURATION+D'2', W
0383  1D03  	BTFSS STATUS,Z
0384  2B8B  	GOTO	label59
0385  3000  	MOVLW 0x00
0386  0235  	SUBWF gbl_FCV_DURATION+D'1', W
0387  1D03  	BTFSS STATUS,Z
0388  2B8B  	GOTO	label59
0389  3015  	MOVLW 0x15
038A  0234  	SUBWF gbl_FCV_DURATION, W
038B        label59
038B  1C03  	BTFSS STATUS,C
038C  0AE1  	INCF CompTempVar2284, F
038D  0861  	MOVF CompTempVar2284, W
038E  0562  	ANDWF CompTempVar2285, W
038F  1903  	BTFSC STATUS,Z
0390  2B96  	GOTO	label60
0396        label60

		{

			//Calculation
			//Calculation:
			//  calib_subtractor = 267
			FCV_CALIB_SUBTRACTOR = 267;
0391  300B  	MOVLW 0x0B
0392  00C5  	MOVWF gbl_FCV_CALIB_SUBTRACTOR
0393  3001  	MOVLW 0x01
0394  00C6  	MOVWF gbl_FCV_CALIB_SUBTRACTOR+D'1'


		} else {
0395  2C2B  	GOTO	label71


			//Decision
			//Decision: duration > 9 AND duration < 13?
			if (FCV_DURATION > 9 & FCV_DURATION < 13)
0396  01E4  	CLRF CompTempVar2287
0397  0837  	MOVF gbl_FCV_DURATION+D'3', W
0398  3C00  	SUBLW 0x00
0399  1D03  	BTFSS STATUS,Z
039A  2BA5  	GOTO	label61
039B  0836  	MOVF gbl_FCV_DURATION+D'2', W
039C  3C00  	SUBLW 0x00
039D  1D03  	BTFSS STATUS,Z
039E  2BA5  	GOTO	label61
039F  0835  	MOVF gbl_FCV_DURATION+D'1', W
03A0  3C00  	SUBLW 0x00
03A1  1D03  	BTFSS STATUS,Z
03A2  2BA5  	GOTO	label61
03A3  0834  	MOVF gbl_FCV_DURATION, W
03A4  3C09  	SUBLW 0x09
03A5        label61
03A5  1C03  	BTFSS STATUS,C
03A6  0AE4  	INCF CompTempVar2287, F
03A7  01E3  	CLRF CompTempVar2286
03A8  3000  	MOVLW 0x00
03A9  0237  	SUBWF gbl_FCV_DURATION+D'3', W
03AA  1D03  	BTFSS STATUS,Z
03AB  2BB6  	GOTO	label62
03AC  3000  	MOVLW 0x00
03AD  0236  	SUBWF gbl_FCV_DURATION+D'2', W
03AE  1D03  	BTFSS STATUS,Z
03AF  2BB6  	GOTO	label62
03B0  3000  	MOVLW 0x00
03B1  0235  	SUBWF gbl_FCV_DURATION+D'1', W
03B2  1D03  	BTFSS STATUS,Z
03B3  2BB6  	GOTO	label62
03B4  300D  	MOVLW 0x0D
03B5  0234  	SUBWF gbl_FCV_DURATION, W
03B6        label62
03B6  1C03  	BTFSS STATUS,C
03B7  0AE3  	INCF CompTempVar2286, F
03B8  0863  	MOVF CompTempVar2286, W
03B9  0564  	ANDWF CompTempVar2287, W
03BA  1903  	BTFSC STATUS,Z
03BB  2BC1  	GOTO	label63
03C1        label63

			{

				//Calculation
				//Calculation:
				//  calib_subtractor = 268
				FCV_CALIB_SUBTRACTOR = 268;
03BC  300C  	MOVLW 0x0C
03BD  00C5  	MOVWF gbl_FCV_CALIB_SUBTRACTOR
03BE  3001  	MOVLW 0x01
03BF  00C6  	MOVWF gbl_FCV_CALIB_SUBTRACTOR+D'1'


			} else {
03C0  2C2B  	GOTO	label71


				//Decision
				//Decision: duration > 6 AND duration < 10?
				if (FCV_DURATION > 6 & FCV_DURATION < 10)
03C1  01E6  	CLRF CompTempVar2289
03C2  0837  	MOVF gbl_FCV_DURATION+D'3', W
03C3  3C00  	SUBLW 0x00
03C4  1D03  	BTFSS STATUS,Z
03C5  2BD0  	GOTO	label64
03C6  0836  	MOVF gbl_FCV_DURATION+D'2', W
03C7  3C00  	SUBLW 0x00
03C8  1D03  	BTFSS STATUS,Z
03C9  2BD0  	GOTO	label64
03CA  0835  	MOVF gbl_FCV_DURATION+D'1', W
03CB  3C00  	SUBLW 0x00
03CC  1D03  	BTFSS STATUS,Z
03CD  2BD0  	GOTO	label64
03CE  0834  	MOVF gbl_FCV_DURATION, W
03CF  3C06  	SUBLW 0x06
03D0        label64
03D0  1C03  	BTFSS STATUS,C
03D1  0AE6  	INCF CompTempVar2289, F
03D2  01E5  	CLRF CompTempVar2288
03D3  3000  	MOVLW 0x00
03D4  0237  	SUBWF gbl_FCV_DURATION+D'3', W
03D5  1D03  	BTFSS STATUS,Z
03D6  2BE1  	GOTO	label65
03D7  3000  	MOVLW 0x00
03D8  0236  	SUBWF gbl_FCV_DURATION+D'2', W
03D9  1D03  	BTFSS STATUS,Z
03DA  2BE1  	GOTO	label65
03DB  3000  	MOVLW 0x00
03DC  0235  	SUBWF gbl_FCV_DURATION+D'1', W
03DD  1D03  	BTFSS STATUS,Z
03DE  2BE1  	GOTO	label65
03DF  300A  	MOVLW 0x0A
03E0  0234  	SUBWF gbl_FCV_DURATION, W
03E1        label65
03E1  1C03  	BTFSS STATUS,C
03E2  0AE5  	INCF CompTempVar2288, F
03E3  0865  	MOVF CompTempVar2288, W
03E4  0566  	ANDWF CompTempVar2289, W
03E5  1903  	BTFSC STATUS,Z
03E6  2BEC  	GOTO	label66
03EC        label66

				{

					//Calculation
					//Calculation:
					//  calib_subtractor = 269
					FCV_CALIB_SUBTRACTOR = 269;
03E7  300D  	MOVLW 0x0D
03E8  00C5  	MOVWF gbl_FCV_CALIB_SUBTRACTOR
03E9  3001  	MOVLW 0x01
03EA  00C6  	MOVWF gbl_FCV_CALIB_SUBTRACTOR+D'1'


				} else {
03EB  2C2B  	GOTO	label71


					//Decision
					//Decision: duration > 4 AND duration < 7?
					if (FCV_DURATION > 4 & FCV_DURATION < 7)
03EC  01E8  	CLRF CompTempVar2291
03ED  0837  	MOVF gbl_FCV_DURATION+D'3', W
03EE  3C00  	SUBLW 0x00
03EF  1D03  	BTFSS STATUS,Z
03F0  2BFB  	GOTO	label67
03F1  0836  	MOVF gbl_FCV_DURATION+D'2', W
03F2  3C00  	SUBLW 0x00
03F3  1D03  	BTFSS STATUS,Z
03F4  2BFB  	GOTO	label67
03F5  0835  	MOVF gbl_FCV_DURATION+D'1', W
03F6  3C00  	SUBLW 0x00
03F7  1D03  	BTFSS STATUS,Z
03F8  2BFB  	GOTO	label67
03F9  0834  	MOVF gbl_FCV_DURATION, W
03FA  3C04  	SUBLW 0x04
03FB        label67
03FB  1C03  	BTFSS STATUS,C
03FC  0AE8  	INCF CompTempVar2291, F
03FD  01E7  	CLRF CompTempVar2290
03FE  3000  	MOVLW 0x00
03FF  0237  	SUBWF gbl_FCV_DURATION+D'3', W
0400  1D03  	BTFSS STATUS,Z
0401  2C0C  	GOTO	label68
0402  3000  	MOVLW 0x00
0403  0236  	SUBWF gbl_FCV_DURATION+D'2', W
0404  1D03  	BTFSS STATUS,Z
0405  2C0C  	GOTO	label68
0406  3000  	MOVLW 0x00
0407  0235  	SUBWF gbl_FCV_DURATION+D'1', W
0408  1D03  	BTFSS STATUS,Z
0409  2C0C  	GOTO	label68
040A  3007  	MOVLW 0x07
040B  0234  	SUBWF gbl_FCV_DURATION, W
040C        label68
040C  1C03  	BTFSS STATUS,C
040D  0AE7  	INCF CompTempVar2290, F
040E  0867  	MOVF CompTempVar2290, W
040F  0568  	ANDWF CompTempVar2291, W
0410  1903  	BTFSC STATUS,Z
0411  2C17  	GOTO	label69
0417        label69

					{

						//Calculation
						//Calculation:
						//  calib_subtractor = 270
						FCV_CALIB_SUBTRACTOR = 270;
0412  300E  	MOVLW 0x0E
0413  00C5  	MOVWF gbl_FCV_CALIB_SUBTRACTOR
0414  3001  	MOVLW 0x01
0415  00C6  	MOVWF gbl_FCV_CALIB_SUBTRACTOR+D'1'


					} else {
0416  2C2B  	GOTO	label71


						//Decision
						//Decision: duration < 5?
						if (FCV_DURATION < 5)
0417  3000  	MOVLW 0x00
0418  0237  	SUBWF gbl_FCV_DURATION+D'3', W
0419  1D03  	BTFSS STATUS,Z
041A  2C25  	GOTO	label70
041B  3000  	MOVLW 0x00
041C  0236  	SUBWF gbl_FCV_DURATION+D'2', W
041D  1D03  	BTFSS STATUS,Z
041E  2C25  	GOTO	label70
041F  3000  	MOVLW 0x00
0420  0235  	SUBWF gbl_FCV_DURATION+D'1', W
0421  1D03  	BTFSS STATUS,Z
0422  2C25  	GOTO	label70
0423  3005  	MOVLW 0x05
0424  0234  	SUBWF gbl_FCV_DURATION, W
0425        label70
0425  1803  	BTFSC STATUS,C
0426  2C2B  	GOTO	label71
042B        label71

						{

							//Calculation
							//Calculation:
							//  calib_subtractor = 271
							FCV_CALIB_SUBTRACTOR = 271;
0427  300F  	MOVLW 0x0F
0428  00C5  	MOVWF gbl_FCV_CALIB_SUBTRACTOR
0429  3001  	MOVLW 0x01
042A  00C6  	MOVWF gbl_FCV_CALIB_SUBTRACTOR+D'1'


						// } else {

						}

					}

				}

			}

		}

	}

	//Call Component Macro
	//Call Component Macro: ClearLine(3)
	FCD_LCDDisplay0_ClearLine(3);
042B  3003  	MOVLW 0x03
042C  00E1  	MOVWF FCD_LCDDis_0005E_arg_Line
042D  218A  	CALL FCD_LCDDis_0005E


	//Call Component Macro
	//Call Component Macro: Cursor(0, 3)
	FCD_LCDDisplay0_Cursor(0, 3);
042E  01E4  	CLRF FCD_LCDDis_00053_arg_x
042F  3003  	MOVLW 0x03
0430  00E5  	MOVWF FCD_LCDDis_00053_arg_y
0431  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("D=")
	FCD_LCDDisplay0_PrintString("D=", 2);
0432  3044  	MOVLW 0x44
0433  00E3  	MOVWF CompTempVar2292
0434  303D  	MOVLW 0x3D
0435  00E4  	MOVWF CompTempVar2292+D'1'
0436  01E5  	CLRF CompTempVar2292+D'2'
0437  3000  	MOVLW HIGH(CompTempVar2292+D'0')
0438  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0439  3063  	MOVLW LOW(CompTempVar2292+D'0')
043A  00E1  	MOVWF FCD_LCDDis_00054_arg_String
043B  3002  	MOVLW 0x02
043C  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
043D  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: Cursor(2, 3)
	FCD_LCDDisplay0_Cursor(2, 3);
043E  3002  	MOVLW 0x02
043F  00E4  	MOVWF FCD_LCDDis_00053_arg_x
0440  3003  	MOVLW 0x03
0441  00E5  	MOVWF FCD_LCDDis_00053_arg_y
0442  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintNumber(duration)
	FCD_LCDDisplay0_PrintNumber(FCV_DURATION);
0443  0834  	MOVF gbl_FCV_DURATION, W
0444  00E1  	MOVWF FCD_LCDDis_00055_arg_Number
0445  0835  	MOVF gbl_FCV_DURATION+D'1', W
0446  00E2  	MOVWF FCD_LCDDis_00055_arg_Number+D'1'
0447  21A1  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: PrintString("cm")
	FCD_LCDDisplay0_PrintString("cm", 2);
0448  3063  	MOVLW 0x63
0449  00E3  	MOVWF CompTempVar2294
044A  306D  	MOVLW 0x6D
044B  00E4  	MOVWF CompTempVar2294+D'1'
044C  01E5  	CLRF CompTempVar2294+D'2'
044D  3000  	MOVLW HIGH(CompTempVar2294+D'0')
044E  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
044F  3063  	MOVLW LOW(CompTempVar2294+D'0')
0450  00E1  	MOVWF FCD_LCDDis_00054_arg_String
0451  3002  	MOVLW 0x02
0452  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0453  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: Cursor(9, 3)
	FCD_LCDDisplay0_Cursor(9, 3);
0454  3009  	MOVLW 0x09
0455  00E4  	MOVWF FCD_LCDDis_00053_arg_x
0456  3003  	MOVLW 0x03
0457  00E5  	MOVWF FCD_LCDDis_00053_arg_y
0458  20DA  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("CS=")
	FCD_LCDDisplay0_PrintString("CS=", 3);
0459  3043  	MOVLW 0x43
045A  00E3  	MOVWF CompTempVar2296
045B  3053  	MOVLW 0x53
045C  00E4  	MOVWF CompTempVar2296+D'1'
045D  303D  	MOVLW 0x3D
045E  00E5  	MOVWF CompTempVar2296+D'2'
045F  01E6  	CLRF CompTempVar2296+D'3'
0460  3000  	MOVLW HIGH(CompTempVar2296+D'0')
0461  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0462  3063  	MOVLW LOW(CompTempVar2296+D'0')
0463  00E1  	MOVWF FCD_LCDDis_00054_arg_String
0464  3003  	MOVLW 0x03
0465  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0466  228F  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: PrintNumber(calib_subtractor)
	FCD_LCDDisplay0_PrintNumber(FCV_CALIB_SUBTRACTOR);
0467  0845  	MOVF gbl_FCV_CALIB_SUBTRACTOR, W
0468  00E1  	MOVWF FCD_LCDDis_00055_arg_Number
0469  0846  	MOVF gbl_FCV_CALIB_SUBTRACTOR+D'1', W
046A  00E2  	MOVWF FCD_LCDDis_00055_arg_Number+D'1'
046B  21A1  	CALL FCD_LCDDis_00055


}
046C  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
06A1  3007  	MOVLW 0x07
06A2  1683  	BSF STATUS, RP0
06A3  1303  	BCF STATUS, RP1
06A4  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
06A5  30C0  	MOVLW 0xC0
06A6  0081  	MOVWF gbl_option_reg



	//Calculation
	//Calculation:
	//  data0 = 0xff
	//  data1 = 0xff
	//  data2 = 0xff
	//  lsb = 0x00
	//  msb = 0x00
	FCV_DATA0 = 0xff;
06A7  30FF  	MOVLW 0xFF
06A8  1283  	BCF STATUS, RP0
06A9  00D3  	MOVWF gbl_FCV_DATA0

	FCV_DATA1 = 0xff;
06AA  00D4  	MOVWF gbl_FCV_DATA1

	FCV_DATA2 = 0xff;
06AB  00D5  	MOVWF gbl_FCV_DATA2

	FCV_LSB = 0x00;
06AC  01D8  	CLRF gbl_FCV_LSB

	FCV_MSB = 0x00;
06AD  01DA  	CLRF gbl_FCV_MSB


	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
06AE  264A  	CALL FCD_LCDDis_00060


	//Call Component Macro
	//Call Component Macro: MI2C_Init()
	FCD_I2C_Master0_MI2C_Init();
06AF  269F  	CALL FCD_I2C_Ma_0006D


	//Calculation
	//Calculation:
	//  calib_offset = 3
	//  calib_subtractor = 270
	FCV_CALIB_OFFSET = 3;
06B0  3003  	MOVLW 0x03
06B1  1283  	BCF STATUS, RP0
06B2  00C7  	MOVWF gbl_FCV_CALIB_OFFSET
06B3  01C8  	CLRF gbl_FCV_CALIB_OFFSET+D'1'

	FCV_CALIB_SUBTRACTOR = 270;
06B4  300E  	MOVLW 0x0E
06B5  00C5  	MOVWF gbl_FCV_CALIB_SUBTRACTOR
06B6  3001  	MOVLW 0x01
06B7  00C6  	MOVWF gbl_FCV_CALIB_SUBTRACTOR+D'1'


	//Calculation
	//Calculation:
	//  duration = 12
	FCV_DURATION = 12;
06B8  300C  	MOVLW 0x0C
06B9  00B4  	MOVWF gbl_FCV_DURATION
06BA  01B5  	CLRF gbl_FCV_DURATION+D'1'
06BB  01B6  	CLRF gbl_FCV_DURATION+D'2'
06BC  01B7  	CLRF gbl_FCV_DURATION+D'3'


	//Loop
	//Loop: While 1
	while (1)
06BD        label84

	{

		//Call Component Macro
		//Call Component Macro: Clear()
		FCD_LCDDisplay0_Clear();
06BD  22AB  	CALL FCD_LCDDis_00052


		//Call Component Macro
		//Call Component Macro: Cursor(0, 0)
		FCD_LCDDisplay0_Cursor(0, 0);
06BE  01E4  	CLRF FCD_LCDDis_00053_arg_x
06BF  01E5  	CLRF FCD_LCDDis_00053_arg_y
06C0  20DA  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: PrintString("Thermal D TEST")
		FCD_LCDDisplay0_PrintString("Thermal D TEST", 14);
06C1  3020  	MOVLW 0x20
06C2  00EA  	MOVWF CompTempVar2311+D'7'
06C3  00EC  	MOVWF CompTempVar2311+D'9'
06C4  3044  	MOVLW 0x44
06C5  00EB  	MOVWF CompTempVar2311+D'8'
06C6  3045  	MOVLW 0x45
06C7  00EE  	MOVWF CompTempVar2311+D'11'
06C8  3053  	MOVLW 0x53
06C9  00EF  	MOVWF CompTempVar2311+D'12'
06CA  3054  	MOVLW 0x54
06CB  00E3  	MOVWF CompTempVar2311
06CC  00ED  	MOVWF CompTempVar2311+D'10'
06CD  00F0  	MOVWF CompTempVar2311+D'13'
06CE  3061  	MOVLW 0x61
06CF  00E8  	MOVWF CompTempVar2311+D'5'
06D0  3065  	MOVLW 0x65
06D1  00E5  	MOVWF CompTempVar2311+D'2'
06D2  3068  	MOVLW 0x68
06D3  00E4  	MOVWF CompTempVar2311+D'1'
06D4  306C  	MOVLW 0x6C
06D5  00E9  	MOVWF CompTempVar2311+D'6'
06D6  306D  	MOVLW 0x6D
06D7  00E7  	MOVWF CompTempVar2311+D'4'
06D8  3072  	MOVLW 0x72
06D9  00E6  	MOVWF CompTempVar2311+D'3'
06DA  01F1  	CLRF CompTempVar2311+D'14'
06DB  3000  	MOVLW HIGH(CompTempVar2311+D'0')
06DC  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
06DD  3063  	MOVLW LOW(CompTempVar2311+D'0')
06DE  00E1  	MOVWF FCD_LCDDis_00054_arg_String
06DF  300E  	MOVLW 0x0E
06E0  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
06E1  228F  	CALL FCD_LCDDis_00054


		//Connection Point
		//Connection Point: [A]: A
FCC_Main_A:
06E2        label85

;

		//Delay
		//Delay: 800 ms
		delay_ms(255);
06E2  30FF  	MOVLW 0xFF
06E3  00E8  	MOVWF delay_ms_00000_arg_del
06E4  2010  	CALL delay_ms_00000

		delay_ms(255);
06E5  30FF  	MOVLW 0xFF
06E6  00E8  	MOVWF delay_ms_00000_arg_del
06E7  2010  	CALL delay_ms_00000

		delay_ms(255);
06E8  30FF  	MOVLW 0xFF
06E9  00E8  	MOVWF delay_ms_00000_arg_del
06EA  2010  	CALL delay_ms_00000

		delay_ms(35);
06EB  3023  	MOVLW 0x23
06EC  00E8  	MOVWF delay_ms_00000_arg_del
06ED  2010  	CALL delay_ms_00000


		//Call Macro
		//Call Macro: get_distance()
		FCM_get_distance();
06EE  22FB  	CALL FCM_get_di_0005D


		//Decision
		//Decision: duration < 10?
		if (FCV_DURATION < 10)
06EF  3000  	MOVLW 0x00
06F0  0237  	SUBWF gbl_FCV_DURATION+D'3', W
06F1  1D03  	BTFSS STATUS,Z
06F2  2EFD  	GOTO	label86
06F3  3000  	MOVLW 0x00
06F4  0236  	SUBWF gbl_FCV_DURATION+D'2', W
06F5  1D03  	BTFSS STATUS,Z
06F6  2EFD  	GOTO	label86
06F7  3000  	MOVLW 0x00
06F8  0235  	SUBWF gbl_FCV_DURATION+D'1', W
06F9  1D03  	BTFSS STATUS,Z
06FA  2EFD  	GOTO	label86
06FB  300A  	MOVLW 0x0A
06FC  0234  	SUBWF gbl_FCV_DURATION, W
06FD        label86
06FD  1803  	BTFSC STATUS,C
06FE  2F24  	GOTO	label87
0724        label87

		{

			//Call Component Macro
			//Call Component Macro: ClearLine(1)
			FCD_LCDDisplay0_ClearLine(1);
06FF  3001  	MOVLW 0x01
0700  00E1  	MOVWF FCD_LCDDis_0005E_arg_Line
0701  218A  	CALL FCD_LCDDis_0005E


			//Call Component Macro
			//Call Component Macro: ClearLine(2)
			FCD_LCDDisplay0_ClearLine(2);
0702  3002  	MOVLW 0x02
0703  00E1  	MOVWF FCD_LCDDis_0005E_arg_Line
0704  218A  	CALL FCD_LCDDis_0005E


			//Call Component Macro
			//Call Component Macro: Cursor(4, 2)
			FCD_LCDDisplay0_Cursor(4, 2);
0705  3004  	MOVLW 0x04
0706  00E4  	MOVWF FCD_LCDDis_00053_arg_x
0707  3002  	MOVLW 0x02
0708  00E5  	MOVWF FCD_LCDDis_00053_arg_y
0709  20DA  	CALL FCD_LCDDis_00053


			//Call Component Macro
			//Call Component Macro: PrintString("TOO NEAR!")
			FCD_LCDDisplay0_PrintString("TOO NEAR!", 9);
070A  3054  	MOVLW 0x54
070B  00E3  	MOVWF CompTempVar2313
070C  304F  	MOVLW 0x4F
070D  00E4  	MOVWF CompTempVar2313+D'1'
070E  00E5  	MOVWF CompTempVar2313+D'2'
070F  3020  	MOVLW 0x20
0710  00E6  	MOVWF CompTempVar2313+D'3'
0711  304E  	MOVLW 0x4E
0712  00E7  	MOVWF CompTempVar2313+D'4'
0713  3045  	MOVLW 0x45
0714  00E8  	MOVWF CompTempVar2313+D'5'
0715  3041  	MOVLW 0x41
0716  00E9  	MOVWF CompTempVar2313+D'6'
0717  3052  	MOVLW 0x52
0718  00EA  	MOVWF CompTempVar2313+D'7'
0719  3021  	MOVLW 0x21
071A  00EB  	MOVWF CompTempVar2313+D'8'
071B  01EC  	CLRF CompTempVar2313+D'9'
071C  3000  	MOVLW HIGH(CompTempVar2313+D'0')
071D  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
071E  3063  	MOVLW LOW(CompTempVar2313+D'0')
071F  00E1  	MOVWF FCD_LCDDis_00054_arg_String
0720  3009  	MOVLW 0x09
0721  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0722  228F  	CALL FCD_LCDDis_00054


			//Goto Connection Point
			//Goto Connection Point: [A]: A
			goto FCC_Main_A;
0723  2EE2  	GOTO	label85
0797  2F64  	GOTO	label90


		} else {

			//Decision
			//Decision: duration > 30?
			if (FCV_DURATION > 30)
0724  0837  	MOVF gbl_FCV_DURATION+D'3', W
0725  3C00  	SUBLW 0x00
0726  1D03  	BTFSS STATUS,Z
0727  2F32  	GOTO	label88
0728  0836  	MOVF gbl_FCV_DURATION+D'2', W
0729  3C00  	SUBLW 0x00
072A  1D03  	BTFSS STATUS,Z
072B  2F32  	GOTO	label88
072C  0835  	MOVF gbl_FCV_DURATION+D'1', W
072D  3C00  	SUBLW 0x00
072E  1D03  	BTFSS STATUS,Z
072F  2F32  	GOTO	label88
0730  0834  	MOVF gbl_FCV_DURATION, W
0731  3C1E  	SUBLW 0x1E
0732        label88
0732  1803  	BTFSC STATUS,C
0733  2F57  	GOTO	label89
0757        label89

			{

				//Call Component Macro
				//Call Component Macro: ClearLine(1)
				FCD_LCDDisplay0_ClearLine(1);
0734  3001  	MOVLW 0x01
0735  00E1  	MOVWF FCD_LCDDis_0005E_arg_Line
0736  218A  	CALL FCD_LCDDis_0005E


				//Call Component Macro
				//Call Component Macro: ClearLine(2)
				FCD_LCDDisplay0_ClearLine(2);
0737  3002  	MOVLW 0x02
0738  00E1  	MOVWF FCD_LCDDis_0005E_arg_Line
0739  218A  	CALL FCD_LCDDis_0005E


				//Call Component Macro
				//Call Component Macro: Cursor(4, 2)
				FCD_LCDDisplay0_Cursor(4, 2);
073A  3004  	MOVLW 0x04
073B  00E4  	MOVWF FCD_LCDDis_00053_arg_x
073C  3002  	MOVLW 0x02
073D  00E5  	MOVWF FCD_LCDDis_00053_arg_y
073E  20DA  	CALL FCD_LCDDis_00053


				//Call Component Macro
				//Call Component Macro: PrintString("TOO FAR!")
				FCD_LCDDisplay0_PrintString("TOO FAR!", 8);
073F  3054  	MOVLW 0x54
0740  00E3  	MOVWF CompTempVar2315
0741  304F  	MOVLW 0x4F
0742  00E4  	MOVWF CompTempVar2315+D'1'
0743  00E5  	MOVWF CompTempVar2315+D'2'
0744  3020  	MOVLW 0x20
0745  00E6  	MOVWF CompTempVar2315+D'3'
0746  3046  	MOVLW 0x46
0747  00E7  	MOVWF CompTempVar2315+D'4'
0748  3041  	MOVLW 0x41
0749  00E8  	MOVWF CompTempVar2315+D'5'
074A  3052  	MOVLW 0x52
074B  00E9  	MOVWF CompTempVar2315+D'6'
074C  3021  	MOVLW 0x21
074D  00EA  	MOVWF CompTempVar2315+D'7'
074E  01EB  	CLRF CompTempVar2315+D'8'
074F  3000  	MOVLW HIGH(CompTempVar2315+D'0')
0750  00E2  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0751  3063  	MOVLW LOW(CompTempVar2315+D'0')
0752  00E1  	MOVWF FCD_LCDDis_00054_arg_String
0753  3008  	MOVLW 0x08
0754  00F2  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0755  228F  	CALL FCD_LCDDis_00054


				//Goto Connection Point
				//Goto Connection Point: [A]: A
				goto FCC_Main_A;
0756  2EE2  	GOTO	label85


			// } else {

			}

		}

		//Connection Point
		//Connection Point: [D]: D
FCC_Main_D:
;

		//Call Macro
		//Call Macro: i2c_comm()
		FCM_i2c_comm();
0757  22CE  	CALL FCM_i2c_co_00056


		//Calculation
		//Calculation:
		//  data_prev = data1
		FCV_DATA_PREV = FCV_DATA1;
0758  0854  	MOVF gbl_FCV_DATA1, W
0759  00DC  	MOVWF gbl_FCV_DATA_PREV


		//Call Macro
		//Call Macro: i2c_comm()
		FCM_i2c_comm();
075A  22CE  	CALL FCM_i2c_co_00056


		//Calculation
		//Calculation:
		//  data_diff = data_prev - data1
		FCV_DATA_DIFF = FCV_DATA_PREV - FCV_DATA1;
075B  0854  	MOVF gbl_FCV_DATA1, W
075C  025C  	SUBWF gbl_FCV_DATA_PREV, W
075D  00DD  	MOVWF gbl_FCV_DATA_DIFF


		//Decision
		//Decision: data_diff > 10?
		if (FCV_DATA_DIFF > 10)
075E  085D  	MOVF gbl_FCV_DATA_DIFF, W
075F  3C0A  	SUBLW 0x0A
0760  1C03  	BTFSS STATUS,C

		{

			//Goto Connection Point
			//Goto Connection Point: [D]: D
			goto FCC_Main_D;
0761  2F57  	GOTO	label89


		// } else {

		}

		//Call Macro
		//Call Macro: calc()
		FCM_calc();
0762  2581  	CALL FCM_calc_00000


		//Call Macro
		//Call Macro: display()
		FCM_display();
0763  246D  	CALL FCM_displa_00051


		//Loop
		//Loop: While duration > 10 AND duration < 30
		while (FCV_DURATION > 10 & FCV_DURATION < 30)
0764        label90
0764  01E0  	CLRF CompTempVar2310
0765  0837  	MOVF gbl_FCV_DURATION+D'3', W
0766  3C00  	SUBLW 0x00
0767  1D03  	BTFSS STATUS,Z
0768  2F73  	GOTO	label91
0769  0836  	MOVF gbl_FCV_DURATION+D'2', W
076A  3C00  	SUBLW 0x00
076B  1D03  	BTFSS STATUS,Z
076C  2F73  	GOTO	label91
076D  0835  	MOVF gbl_FCV_DURATION+D'1', W
076E  3C00  	SUBLW 0x00
076F  1D03  	BTFSS STATUS,Z
0770  2F73  	GOTO	label91
0771  0834  	MOVF gbl_FCV_DURATION, W
0772  3C0A  	SUBLW 0x0A
0773        label91
0773  1C03  	BTFSS STATUS,C
0774  0AE0  	INCF CompTempVar2310, F
0775  01DF  	CLRF CompTempVar2309
0776  3000  	MOVLW 0x00
0777  0237  	SUBWF gbl_FCV_DURATION+D'3', W
0778  1D03  	BTFSS STATUS,Z
0779  2F84  	GOTO	label92
077A  3000  	MOVLW 0x00
077B  0236  	SUBWF gbl_FCV_DURATION+D'2', W
077C  1D03  	BTFSS STATUS,Z
077D  2F84  	GOTO	label92
077E  3000  	MOVLW 0x00
077F  0235  	SUBWF gbl_FCV_DURATION+D'1', W
0780  1D03  	BTFSS STATUS,Z
0781  2F84  	GOTO	label92
0782  301E  	MOVLW 0x1E
0783  0234  	SUBWF gbl_FCV_DURATION, W
0784        label92
0784  1C03  	BTFSS STATUS,C
0785  0ADF  	INCF CompTempVar2309, F
0786  085F  	MOVF CompTempVar2309, W
0787  0560  	ANDWF CompTempVar2310, W
0788  1903  	BTFSC STATUS,Z
0789  2EBD  	GOTO	label84

		{

			//Call Macro
			//Call Macro: get_distance()
			FCM_get_distance();
078A  22FB  	CALL FCM_get_di_0005D


			//Delay
			//Delay: 800 ms
			delay_ms(255);
078B  30FF  	MOVLW 0xFF
078C  00E8  	MOVWF delay_ms_00000_arg_del
078D  2010  	CALL delay_ms_00000

			delay_ms(255);
078E  30FF  	MOVLW 0xFF
078F  00E8  	MOVWF delay_ms_00000_arg_del
0790  2010  	CALL delay_ms_00000

			delay_ms(255);
0791  30FF  	MOVLW 0xFF
0792  00E8  	MOVWF delay_ms_00000_arg_del
0793  2010  	CALL delay_ms_00000

			delay_ms(35);
0794  3023  	MOVLW 0x23
0795  00E8  	MOVWF delay_ms_00000_arg_del
0796  2010  	CALL delay_ms_00000



		}


	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
07E2  1283  	BCF STATUS, RP0
07E3  1303  	BCF STATUS, RP1
07E4  0E42  	SWAPF Int1BContext+D'2', W
07E5  0084  	MOVWF FSR
07E6  0E41  	SWAPF Int1BContext+D'1', W
07E7  008A  	MOVWF PCLATH
07E8  0E40  	SWAPF Int1BContext, W
07E9  0083  	MOVWF STATUS
07EA  0EFF  	SWAPF Int1Context, F
07EB  0E7F  	SWAPF Int1Context, W
07EC  0009  	RETFIE





/*********************************************************************
 *                  Flowcode CAL I2C File
 *
 * File: PIC_CAL_I2C.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 210911 | BR | Created
 * 021211 | BR | Converted to new dynamic defines mechanism
 *
 */


//When using hardware I2C channels override port and pin conns with FCD conn definitions
#ifdef MX_I2C_REF1
	#if MX_I2C_CHANNEL_1 > 0
		#undef MX_I2C_SDA_PIN_1
		#undef MX_I2C_SDA_PORT_1
		#undef MX_I2C_SDA_TRIS_1
		#undef MX_I2C_SCL_PIN_1
		#undef MX_I2C_SCL_PORT_1
		#undef MX_I2C_SCL_TRIS_1
	#endif
	#if MX_I2C_CHANNEL_1 == 1
		#define MX_I2C_SDA_PIN_1		MX_I2C_1_SDA_PIN
		#define MX_I2C_SDA_PORT_1		MX_I2C_1_SDA_PORT
		#define MX_I2C_SDA_TRIS_1		MX_I2C_1_SDA_TRIS
		#define MX_I2C_SCL_PIN_1		MX_I2C_1_SCL_PIN
		#define MX_I2C_SCL_PORT_1		MX_I2C_1_SCL_PORT
		#define MX_I2C_SCL_TRIS_1		MX_I2C_1_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_1 == 2
		#define MX_I2C_SDA_PIN_1		MX_I2C_2_SDA_PIN
		#define MX_I2C_SDA_PORT_1		MX_I2C_2_SDA_PORT
		#define MX_I2C_SDA_TRIS_1		MX_I2C_2_SDA_TRIS
		#define MX_I2C_SCL_PIN_1		MX_I2C_2_SCL_PIN
		#define MX_I2C_SCL_PORT_1		MX_I2C_2_SCL_PORT
		#define MX_I2C_SCL_TRIS_1		MX_I2C_2_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_1 == 3
		#define MX_I2C_SDA_PIN_1		MX_I2C_3_SDA_PIN
		#define MX_I2C_SDA_PORT_1		MX_I2C_3_SDA_PORT
		#define MX_I2C_SDA_TRIS_1		MX_I2C_3_SDA_TRIS
		#define MX_I2C_SCL_PIN_1		MX_I2C_3_SCL_PIN
		#define MX_I2C_SCL_PORT_1		MX_I2C_3_SCL_PORT
		#define MX_I2C_SCL_TRIS_1		MX_I2C_3_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_1 == 4
		#define MX_I2C_SDA_PIN_1		MX_I2C_4_SDA_PIN
		#define MX_I2C_SDA_PORT_1		MX_I2C_4_SDA_PORT
		#define MX_I2C_SDA_TRIS_1		MX_I2C_4_SDA_TRIS
		#define MX_I2C_SCL_PIN_1		MX_I2C_4_SCL_PIN
		#define MX_I2C_SCL_PORT_1		MX_I2C_4_SCL_PORT
		#define MX_I2C_SCL_TRIS_1		MX_I2C_4_SCL_TRIS
	#endif
#endif
#ifdef MX_I2C_REF2
	#if MX_I2C_CHANNEL_2 > 0
		#undef MX_I2C_SDA_PIN_2
		#undef MX_I2C_SDA_PORT_2
		#undef MX_I2C_SDA_TRIS_2
		#undef MX_I2C_SCL_PIN_2
		#undef MX_I2C_SCL_PORT_2
		#undef MX_I2C_SCL_TRIS_2
	#endif
	#if MX_I2C_CHANNEL_2 == 1
		#define MX_I2C_SDA_PIN_2		MX_I2C_1_SDA_PIN
		#define MX_I2C_SDA_PORT_2		MX_I2C_1_SDA_PORT
		#define MX_I2C_SDA_TRIS_2		MX_I2C_1_SDA_TRIS
		#define MX_I2C_SCL_PIN_2		MX_I2C_1_SCL_PIN
		#define MX_I2C_SCL_PORT_2		MX_I2C_1_SCL_PORT
		#define MX_I2C_SCL_TRIS_2		MX_I2C_1_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_2 == 2
		#define MX_I2C_SDA_PIN_2		MX_I2C_2_SDA_PIN
		#define MX_I2C_SDA_PORT_2		MX_I2C_2_SDA_PORT
		#define MX_I2C_SDA_TRIS_2		MX_I2C_2_SDA_TRIS
		#define MX_I2C_SCL_PIN_2		MX_I2C_2_SCL_PIN
		#define MX_I2C_SCL_PORT_2		MX_I2C_2_SCL_PORT
		#define MX_I2C_SCL_TRIS_2		MX_I2C_2_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_2 == 3
		#define MX_I2C_SDA_PIN_2		MX_I2C_3_SDA_PIN
		#define MX_I2C_SDA_PORT_2		MX_I2C_3_SDA_PORT
		#define MX_I2C_SDA_TRIS_2		MX_I2C_3_SDA_TRIS
		#define MX_I2C_SCL_PIN_2		MX_I2C_3_SCL_PIN
		#define MX_I2C_SCL_PORT_2		MX_I2C_3_SCL_PORT
		#define MX_I2C_SCL_TRIS_2		MX_I2C_3_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_2 == 4
		#define MX_I2C_SDA_PIN_2		MX_I2C_4_SDA_PIN
		#define MX_I2C_SDA_PORT_2		MX_I2C_4_SDA_PORT
		#define MX_I2C_SDA_TRIS_2		MX_I2C_4_SDA_TRIS
		#define MX_I2C_SCL_PIN_2		MX_I2C_4_SCL_PIN
		#define MX_I2C_SCL_PORT_2		MX_I2C_4_SCL_PORT
		#define MX_I2C_SCL_TRIS_2		MX_I2C_4_SCL_TRIS
	#endif
#endif
#ifdef MX_I2C_REF3
	#if MX_I2C_CHANNEL_3 > 0
		#undef MX_I2C_SDA_PIN_3
		#undef MX_I2C_SDA_PORT_3
		#undef MX_I2C_SDA_TRIS_3
		#undef MX_I2C_SCL_PIN_3
		#undef MX_I2C_SCL_PORT_3
		#undef MX_I2C_SCL_TRIS_3
	#endif
	#if MX_I2C_CHANNEL_3 == 1
		#define MX_I2C_SDA_PIN_3		MX_I2C_1_SDA_PIN
		#define MX_I2C_SDA_PORT_3		MX_I2C_1_SDA_PORT
		#define MX_I2C_SDA_TRIS_3		MX_I2C_1_SDA_TRIS
		#define MX_I2C_SCL_PIN_3		MX_I2C_1_SCL_PIN
		#define MX_I2C_SCL_PORT_3		MX_I2C_1_SCL_PORT
		#define MX_I2C_SCL_TRIS_3		MX_I2C_1_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_3 == 2
		#define MX_I2C_SDA_PIN_3		MX_I2C_2_SDA_PIN
		#define MX_I2C_SDA_PORT_3		MX_I2C_2_SDA_PORT
		#define MX_I2C_SDA_TRIS_3		MX_I2C_2_SDA_TRIS
		#define MX_I2C_SCL_PIN_3		MX_I2C_2_SCL_PIN
		#define MX_I2C_SCL_PORT_3		MX_I2C_2_SCL_PORT
		#define MX_I2C_SCL_TRIS_3		MX_I2C_2_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_3 == 3
		#define MX_I2C_SDA_PIN_3		MX_I2C_3_SDA_PIN
		#define MX_I2C_SDA_PORT_3		MX_I2C_3_SDA_PORT
		#define MX_I2C_SDA_TRIS_3		MX_I2C_3_SDA_TRIS
		#define MX_I2C_SCL_PIN_3		MX_I2C_3_SCL_PIN
		#define MX_I2C_SCL_PORT_3		MX_I2C_3_SCL_PORT
		#define MX_I2C_SCL_TRIS_3		MX_I2C_3_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_3 == 4
		#define MX_I2C_SDA_PIN_3		MX_I2C_4_SDA_PIN
		#define MX_I2C_SDA_PORT_3		MX_I2C_4_SDA_PORT
		#define MX_I2C_SDA_TRIS_3		MX_I2C_4_SDA_TRIS
		#define MX_I2C_SCL_PIN_3		MX_I2C_4_SCL_PIN
		#define MX_I2C_SCL_PORT_3		MX_I2C_4_SCL_PORT
		#define MX_I2C_SCL_TRIS_3		MX_I2C_4_SCL_TRIS
	#endif
#endif
#ifdef MX_I2C_REF4
	#if MX_I2C_CHANNEL_4 > 0
		#undef MX_I2C_SDA_PIN_4
		#undef MX_I2C_SDA_PORT_4
		#undef MX_I2C_SDA_TRIS_4
		#undef MX_I2C_SCL_PIN_4
		#undef MX_I2C_SCL_PORT_4
		#undef MX_I2C_SCL_TRIS_4
	#endif
	#if MX_I2C_CHANNEL_4 == 1
		#define MX_I2C_SDA_PIN_4		MX_I2C_1_SDA_PIN
		#define MX_I2C_SDA_PORT_4		MX_I2C_1_SDA_PORT
		#define MX_I2C_SDA_TRIS_4		MX_I2C_1_SDA_TRIS
		#define MX_I2C_SCL_PIN_4		MX_I2C_1_SCL_PIN
		#define MX_I2C_SCL_PORT_4		MX_I2C_1_SCL_PORT
		#define MX_I2C_SCL_TRIS_4		MX_I2C_1_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_4 == 2
		#define MX_I2C_SDA_PIN_4		MX_I2C_2_SDA_PIN
		#define MX_I2C_SDA_PORT_4		MX_I2C_2_SDA_PORT
		#define MX_I2C_SDA_TRIS_4		MX_I2C_2_SDA_TRIS
		#define MX_I2C_SCL_PIN_4		MX_I2C_2_SCL_PIN
		#define MX_I2C_SCL_PORT_4		MX_I2C_2_SCL_PORT
		#define MX_I2C_SCL_TRIS_4		MX_I2C_2_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_4 == 3
		#define MX_I2C_SDA_PIN_4		MX_I2C_3_SDA_PIN
		#define MX_I2C_SDA_PORT_4		MX_I2C_3_SDA_PORT
		#define MX_I2C_SDA_TRIS_4		MX_I2C_3_SDA_TRIS
		#define MX_I2C_SCL_PIN_4		MX_I2C_3_SCL_PIN
		#define MX_I2C_SCL_PORT_4		MX_I2C_3_SCL_PORT
		#define MX_I2C_SCL_TRIS_4		MX_I2C_3_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_4 == 4
		#define MX_I2C_SDA_PIN_4		MX_I2C_4_SDA_PIN
		#define MX_I2C_SDA_PORT_4		MX_I2C_4_SDA_PORT
		#define MX_I2C_SDA_TRIS_4		MX_I2C_4_SDA_TRIS
		#define MX_I2C_SCL_PIN_4		MX_I2C_4_SCL_PIN
		#define MX_I2C_SCL_PORT_4		MX_I2C_4_SCL_PORT
		#define MX_I2C_SCL_TRIS_4		MX_I2C_4_SCL_TRIS
	#endif
#endif

#define MX_I2C_CHANNEL_X		CAL_APPEND(MX_I2C_CHANNEL_, MX_I2C_NUM)
#define MX_I2C_SDA_PIN_X		CAL_APPEND(MX_I2C_SDA_PIN_, MX_I2C_NUM)
#define MX_I2C_SDA_PORT_X		CAL_APPEND(MX_I2C_SDA_PORT_, MX_I2C_NUM)
#define MX_I2C_SDA_TRIS_X		CAL_APPEND(MX_I2C_SDA_TRIS_, MX_I2C_NUM)
#define MX_I2C_SCL_PIN_X		CAL_APPEND(MX_I2C_SCL_PIN_, MX_I2C_NUM)
#define MX_I2C_SCL_PORT_X		CAL_APPEND(MX_I2C_SCL_PORT_, MX_I2C_NUM)
#define MX_I2C_SCL_TRIS_X		CAL_APPEND(MX_I2C_SCL_TRIS_, MX_I2C_NUM)
#define MX_I2C_BMODE_X			CAL_APPEND(MX_I2C_BMODE_, MX_I2C_NUM)
#define MX_I2C_BAUD_X			CAL_APPEND(MX_I2C_BAUD_, MX_I2C_NUM)
#define MX_I2C_INT_X			CAL_APPEND(MX_I2C_INT_, MX_I2C_NUM)


//Function Prototypes
CALFUNCTION(void, FC_CAL_I2C_Master_Init_, (void));
CALFUNCTION(void, FC_CAL_I2C_Master_Uninit_, (void));
CALFUNCTION(void, FC_CAL_I2C_Master_Start_, (void));
CALFUNCTION(void, FC_CAL_I2C_Master_Restart_, (void));
CALFUNCTION(void, FC_CAL_I2C_Master_Stop_, (void));
CALFUNCTION(MX_UINT8, FC_CAL_I2C_Master_TX_Byte_, (MX_UINT8 Data));
CALFUNCTION(MX_UINT8, FC_CAL_I2C_Master_RX_Byte_, (MX_UINT8 Last));

CALFUNCTION(void, FC_CAL_I2C_Slave_Init_, (void));
CALFUNCTION(void, FC_CAL_I2C_Slave_Uninit_, (void));
CALFUNCTION(void, FC_CAL_I2C_Slave_SetTxData_, (MX_UINT8 Data));
CALFUNCTION(MX_UINT8, FC_CAL_I2C_Slave_GetRxData_, (MX_UINT8 Last));


//Ensure SSPCON register is defined correctly
#ifndef SSPCON
  #ifdef SSPCON1
	#define sspcon	sspcon1
  #else
	#ifdef SSP1CON1
		#define sspcon	ssp1con1
	#endif
  #endif
#endif

//Ensure SSPIF register is defined correctly
#ifndef SSPIF
  #ifdef SSP1IF
	#define SSPIF	SSP1IF
  #else
	#error "I2C does not have the SSPIF defined on this chip - does your chip support this feature?"
  #endif
#endif


//Ensure SSPCON2 register is defined correctly
#ifndef SSPCON2
  #ifdef SSP1CON2
	#define sspcon2	ssp1con2
  #endif
#endif


//Ensure SSPSTAT register is defined correctly
#ifndef SSPSTAT
  #ifdef SSP1STAT
	#define sspstat	ssp1stat
  #endif
#endif


//Ensure SSPADD register is defined correctly
#ifndef SSPADD
  #ifdef SSP1ADD
	#define sspadd	ssp1add
  #endif
#endif


//Ensure SSPBUFF register is defined correctly
#ifndef SSPBUFF
  #ifdef SSP1BUFF
	#define sspbuff	ssp1buff
  #endif
#endif


//If software channel is enabled then define bit delay.
#if (MX_I2C_CHANNEL_X == 0)
  #ifndef MX_I2C_SW_DEL
	#define MX_I2C_SW_DEL
	#define MX_I2C_DELAY	delay_us(20);
  #endif
#endif


CALFUNCTION(void, FC_CAL_I2C_Master_Init_, (void))

{

	#if (MX_I2C_CHANNEL_X == 0)															//Use Master I2C Software
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Configure SDA as Input
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Configure SCL as Input
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		#ifndef MX_MI2C
			#error "This chip does not have Master I2C capability"
		#else

			#ifndef MX_I2C_1
				#error "This chip does not have Master I2C channel 1"
			#endif

			#if (MX_I2C_BMODE_X & 0x01)
				cr_bit (sspstat,SMP);										//Slew Rate Control Enabled
			#else
				st_bit (sspstat,SMP);										//Slew Rate Control Disabled
017B  1683  	BSF STATUS, RP0
017C  1303  	BCF STATUS, RP1
017D  1794  	BSF gbl_sspstat,7

		    #endif

			#if (MX_I2C_BMODE_X & 0x02)
				st_bit (sspstat,CKE);										//Enable SMBus specific inputs
			#else
				cr_bit (sspstat,CKE);										//Disable SMBus specific inputs
017E  1314  	BCF gbl_sspstat,6

			#endif

			sspcon = 0x28;													//Setup I2C into Master Mode
017F  3028  	MOVLW 0x28
0180  1283  	BCF STATUS, RP0
0181  0094  	MOVWF gbl_sspcon

			sspadd = MX_I2C_BAUD_X;											//Set the Baud Rate
0182  30A0  	MOVLW 0xA0
0183  1683  	BSF STATUS, RP0
0184  0093  	MOVWF gbl_sspadd

			sspcon2 = 0x00;													//Clear the control bits
0185  0191  	CLRF gbl_sspcon2

			st_bit(intcon, GIE);
0186  178B  	BSF gbl_intcon,7

			FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Configure SDA as Input
0187  1607  	BSF gbl_trisc,4

			FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Configure SCL as Input
0188  1587  	BSF gbl_trisc,3

		#endif
	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		#ifndef MX_MI2C
			#error "This chip does not have Master I2C capability"
		#else

			#ifndef MX_I2C_2
				#error "This chip does not have Master I2C channel 2"
			#endif

		  #ifdef MX_I2C_2_REMAPPABLE
			RPOR4 = 9;														//SDA2 - RB1 - RP4
			RPOR5 = 10;														//SCL2 - RB2 - RP5
		  #endif

			#if (MX_I2C_BMODE_X & 0x01)
				cr_bit (ssp2stat,SMP);										//Slew Rate Control Enabled
			#else
				st_bit (ssp2stat,SMP);										//Slew Rate Control Disabled
			#endif

			#if (MX_I2C_BMODE_X & 0x02)
				st_bit (ssp2stat,CKE);										//Enable SMBus specific inputs
			#else
				cr_bit (ssp2stat,CKE);										//Disable SMBus specific inputs
			#endif

			ssp2con = 0x28;													//Setup I2C into Master Mode
			ssp2add = MX_I2C_BAUD_X;										//Set the Baud Rate
			ssp2con2 = 0x00;												//Clear the control bits
			st_bit(intcon, GIE);
			FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);			//Configure SDA as Input
			FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);			//Configure SCL as Input
		#endif
	#endif
}
0189  0008  	RETURN


CALFUNCTION(void, FC_CAL_I2C_Master_Uninit_, (void))
{
	#if (MX_I2C_CHANNEL_X == 0)																//Use Master I2C Software
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);			//Configure SDA as Input
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);			//Configure SCL as Input
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(sspcon, SSPEN);												//Disable SSP
	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(ssp2con, SSPEN);												//Disable SSP
	#endif
}

CALFUNCTION(void, FC_CAL_I2C_Master_Start_, (void))

{
	#if (MX_I2C_CHANNEL_X == 0)															//Use Master I2C Software
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Make Sure SCL is Set
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Make Sure SDA is Set
		MX_I2C_DELAY;																	//Small Delay
		FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Clear SDA
		MX_I2C_DELAY;																	//Small Delay
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Clear SCL
		MX_I2C_DELAY;																	//Small Delay
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(pir1, SSPIF);												//Clear SSP interrupt flag
00D2  1283  	BCF STATUS, RP0
00D3  1303  	BCF STATUS, RP1
00D4  118C  	BCF gbl_pir1,3

		st_bit(sspcon2,SEN);												//Initiate start condition
00D5  1683  	BSF STATUS, RP0
00D6  1411  	BSF gbl_sspcon2,0

		while(ts_bit(sspcon2,SEN));											//Wait for start bit to be generated
00D7        label17
00D7  1811  	BTFSC gbl_sspcon2,0
00D8  28D7  	GOTO	label17

	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(pir3, SSP2IF);												//Clear SSP interrupt flag
		st_bit(ssp2con2,SEN);												//Initiate start condition
		while(ts_bit(ssp2con2,SEN));										//Wait for start bit to be generated
	#endif
}
00D9  0008  	RETURN


CALFUNCTION(void, FC_CAL_I2C_Master_Restart_, (void))

{
	#if (MX_I2C_CHANNEL_X == 0)															//Use Master I2C Software
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Set SDA High
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
		MX_I2C_DELAY;
		FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Set SDA Low
		MX_I2C_DELAY;
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
		MX_I2C_DELAY;
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(pir1, SSPIF);												//Clear SSP interrupt flag
00CA  1283  	BCF STATUS, RP0
00CB  1303  	BCF STATUS, RP1
00CC  118C  	BCF gbl_pir1,3

		st_bit(sspcon2,RSEN);												//Initiate restart condition
00CD  1683  	BSF STATUS, RP0
00CE  1491  	BSF gbl_sspcon2,1

		while(ts_bit(sspcon2,RSEN));										//Wait for restart bit to be generated
00CF        label16
00CF  1891  	BTFSC gbl_sspcon2,1
00D0  28CF  	GOTO	label16

	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(pir3, SSP2IF);												//Clear SSP interrupt flag
		st_bit(ssp2con2,RSEN);												//Initiate restart condition
		while(ts_bit(ssp2con2,RSEN));										//Wait for restart bit to be generated
	#endif
}
00D1  0008  	RETURN


CALFUNCTION(void, FC_CAL_I2C_Master_Stop_, (void))

{
	#if (MX_I2C_CHANNEL_X == 0)															//Use Master I2C Software
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
		FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Set SDA Low
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Set SDA High
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(pir1,SSPIF);													//Clear SSP interrupt flag
00BE  1283  	BCF STATUS, RP0
00BF  1303  	BCF STATUS, RP1
00C0  118C  	BCF gbl_pir1,3

		st_bit(sspcon2,PEN);												//Initiate stop condition
00C1  1683  	BSF STATUS, RP0
00C2  1511  	BSF gbl_sspcon2,2

		while(ts_bit(sspcon2,PEN));											//Wait for stop bit to be generated
00C3        label15
00C3  1911  	BTFSC gbl_sspcon2,2
00C4  28C3  	GOTO	label15

	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(pir3,SSP2IF);												//Clear SSP interrupt flag
		st_bit(ssp2con2,PEN);												//Initiate stop condition
		while(ts_bit(ssp2con2,PEN));										//Wait for stop bit to be generated
	#endif

  delay_ms(10);																//Wait before reusing the I2C BUS
00C5  300A  	MOVLW 0x0A
00C6  1283  	BCF STATUS, RP0
00C7  00E8  	MOVWF delay_ms_00000_arg_del
00C8  2010  	CALL delay_ms_00000

}
00C9  0008  	RETURN


CALFUNCTION(MX_UINT8, FC_CAL_I2C_Master_TX_Byte_, (MX_UINT8 Data))

{
	#if (MX_I2C_CHANNEL_X == 0)												//Use Master I2C Software
		char bit_mask;
		char local_ack = 0;
		for(bit_mask=0x80;bit_mask;bit_mask=bit_mask>>1)
		{
			if(Data & bit_mask)
			{
				FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);	//Set SDA High
			}
			else
			{
				FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);	//Set SDA Low
			}
			MX_I2C_DELAY;
			FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
			MX_I2C_DELAY;
			FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
			MX_I2C_DELAY;
		}
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);			//Set SDA High
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);			//Set SCL High
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);
		if (FC_CAL_Bit_In(MX_I2C_SDA_PORT_X, MX_I2C_SDA_PIN_X))		//Get the Status Bit
			local_ack = 1;
		MX_I2C_DELAY;
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);			//Set SCL Low
		MX_I2C_DELAY;
		return (local_ack);													//0 = Ack received : 1 = Ack not received
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(pir1,SSPIF);													//Clear SSP interrupt flag
00AF  118C  	BCF gbl_pir1,3

		sspbuf=Data;														//Send byte
00B0  0862  	MOVF FC_CAL_I2C_0006B_arg_Data, W
00B1  0093  	MOVWF gbl_sspbuf

		while(ts_bit(pir1,SSPIF) == 0);										//Wait for control bit to be sent
00B2        label13
00B2  1D8C  	BTFSS gbl_pir1,3
00B3  28B2  	GOTO	label13

		if(ts_bit(sspcon2,ACKSTAT))											//Check Acknowledgement
00B4  1683  	BSF STATUS, RP0
00B5  1F11  	BTFSS gbl_sspcon2,6
00B6  28BB  	GOTO	label14
00BB        label14

			return (1);														//No Acknowledgement
00B7  3001  	MOVLW 0x01
00B8  1283  	BCF STATUS, RP0
00B9  00E3  	MOVWF CompTempVarRet2303

		else return (0);													//Acknowledgement received
00BB  1283  	BCF STATUS, RP0
00BC  01E3  	CLRF CompTempVarRet2303

	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(pir3,SSP2IF);												//Clear SSP interrupt flag
		ssp2buf=Data;														//Send byte
		while(ts_bit(pir3,SSP2IF) == 0);									//Wait for control bit to be sent
		if(ts_bit(ssp2con2,ACKSTAT))										//Check Acknowledgement
			return (1);														//No Acknowledgement
		else return (0);													//Acknowledgement received
	#endif
}
00BA  0008  	RETURN
00BD  0008  	RETURN


CALFUNCTION(MX_UINT8, FC_CAL_I2C_Master_RX_Byte_, (MX_UINT8 Last))

{
	#if (MX_I2C_CHANNEL_X == 0)												//Use Master I2C Software
		char bit_mask;
		char Data = 0;
		char local_ack;
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);			//Set SDA High
		MX_I2C_DELAY;
		for(bit_mask=0x80;bit_mask;bit_mask=bit_mask>>1)
		{
			FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
			MX_I2C_DELAY;
			FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);
			if(FC_CAL_Bit_In(MX_I2C_SDA_PORT_X, MX_I2C_SDA_PIN_X))	//Read Incoming Bit
				Data = Data | bit_mask;														//Add data to variable
			FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
			MX_I2C_DELAY;
		}
		if (Last)																		//Acknowledge?
		{
			FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);	//Send Nack
		}
		else
		{
			FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);	//Send Ack
		}
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
		MX_I2C_DELAY;
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
		MX_I2C_DELAY;
		return (Data);
	#endif

	#if (MX_I2C_CHANNEL_X == 1)						//Use Master I2C Hardware 1
		cr_bit(pir1,SSPIF);							//Clear SSP interrupt flag
009A  118C  	BCF gbl_pir1,3

		st_bit(sspcon2,RCEN);						//Initiate Read
009B  1683  	BSF STATUS, RP0
009C  1591  	BSF gbl_sspcon2,3

		while(ts_bit(pir1,3) == 0);					//Wait for data read
009D        label9
009D  1283  	BCF STATUS, RP0
009E  1D8C  	BTFSS gbl_pir1,3
009F  289D  	GOTO	label9

		if (Last)
00A0  08E2  	MOVF FC_CAL_I2C_0006C_arg_Last, F
00A1  1903  	BTFSC STATUS,Z
00A2  28A6  	GOTO	label10
00A6        label10

			st_bit(sspcon2,ACKDT);					//Send Nack
00A3  1683  	BSF STATUS, RP0
00A4  1691  	BSF gbl_sspcon2,5

		else cr_bit(sspcon2,ACKDT);					//Send Ack
00A5  28A8  	GOTO	label11
00A6  1683  	BSF STATUS, RP0
00A7  1291  	BCF gbl_sspcon2,5
00A8        label11

		st_bit(sspcon2,ACKEN);						//Initiate Nack
00A8  1611  	BSF gbl_sspcon2,4

		while(ts_bit(sspcon2,ACKEN));				//Wait for data read
00A9        label12
00A9  1A11  	BTFSC gbl_sspcon2,4
00AA  28A9  	GOTO	label12

		return(sspbuf);								//Store incoming data
00AB  1283  	BCF STATUS, RP0
00AC  0813  	MOVF gbl_sspbuf, W
00AD  00E3  	MOVWF CompTempVarRet2304

	#endif

	#if (MX_I2C_CHANNEL_X == 2)						//Use Master I2C Hardware 2
		cr_bit(pir3,SSP2IF);						//Clear SSP interrupt flag
		st_bit(ssp2con2,RCEN);						//Initiate Read
		while(ts_bit(pir3,SSP2IF) == 0);			//Wait for data read
		if (Last)
			st_bit(ssp2con2,ACKDT);					//Send Nack
		else cr_bit(ssp2con2,ACKDT);				//Send Ack
		st_bit(ssp2con2,ACKEN);						//Initiate Nack
		while(ts_bit(ssp2con2,ACKEN));				//Wait for data read
		return(ssp2buf);							//Store incoming data
	#endif
}
00AE  0008  	RETURN





//Slave functions currently not implemented
CALFUNCTION(void, FC_CAL_I2C_Slave_Init_, (void))
{

}

CALFUNCTION(void, FC_CAL_I2C_Slave_Uninit_, (void))
{

}

CALFUNCTION(void, FC_CAL_I2C_Slave_SetTxData_, (MX_UINT8 Data))
{

}

CALFUNCTION(MX_UINT8, FC_CAL_I2C_Slave_GetRxData_, (MX_UINT8 Last))
{

}


////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2F98  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00C0  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00C1  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00C2  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2FE2  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08E8  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30CC  	MOVLW 0xCC
0015        label2
0015  3EFF  	ADDLW 0xFF
0016  1D03  	BTFSS STATUS,Z
0017  2815  	GOTO	label2
0018  0000  	NOP
0019  0BE8  	DECFSZ delay_ms_00000_arg_del, F
001A  2814  	GOTO	label1
001B  0008  	RETURN
001C        ; } delay_ms function end

001C        delay_10us_00000
001C        ; { delay_10us ; function begin
001C        label3
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0BF7  	DECFSZ delay_10us_00000_arg_del, F
0023  281C  	GOTO	label3
0024  0008  	RETURN
0025        ; } delay_10us function end

0025        delay_us_00000
0025        ; { delay_us ; function begin
0025  3003  	MOVLW 0x03
0026  07E2  	ADDWF delay_us_00000_arg_del, F
0027  0CE2  	RRF delay_us_00000_arg_del, F
0028  0CE2  	RRF delay_us_00000_arg_del, F
0029  307F  	MOVLW 0x7F
002A  05E2  	ANDWF delay_us_00000_arg_del, F
002B        label4
002B  0000  	NOP
002C  0BE2  	DECFSZ delay_us_00000_arg_del, F
002D  282B  	GOTO	label4
002E  0008  	RETURN
002F        ; } delay_us function end


007B        __div_16_1_00003
007B        ; { __div_16_16 ; function begin
007B  01EC  	CLRF __div_16_1_00003_1_r
007C  01ED  	CLRF __div_16_1_00003_1_r+D'1'
007D  01EF  	CLRF CompTempVarRet214
007E  01F0  	CLRF CompTempVarRet214+D'1'
007F  01EE  	CLRF __div_16_1_00003_1_i
0080        label6
0080  1A6E  	BTFSC __div_16_1_00003_1_i,4
0081  0008  	RETURN
0082  1003  	BCF STATUS,C
0083  0DEF  	RLF CompTempVarRet214, F
0084  0DF0  	RLF CompTempVarRet214+D'1', F
0085  0DE6  	RLF __div_16_1_00003_arg_a, F
0086  0DE7  	RLF __div_16_1_00003_arg_a+D'1', F
0087  0DEC  	RLF __div_16_1_00003_1_r, F
0088  0DED  	RLF __div_16_1_00003_1_r+D'1', F
0089  0869  	MOVF __div_16_1_00003_arg_b+D'1', W
008A  026D  	SUBWF __div_16_1_00003_1_r+D'1', W
008B  1D03  	BTFSS STATUS,Z
008C  288F  	GOTO	label7
008D  0868  	MOVF __div_16_1_00003_arg_b, W
008E  026C  	SUBWF __div_16_1_00003_1_r, W
008F        label7
008F  1C03  	BTFSS STATUS,C
0090  2898  	GOTO	label8
0091  0868  	MOVF __div_16_1_00003_arg_b, W
0092  02EC  	SUBWF __div_16_1_00003_1_r, F
0093  0869  	MOVF __div_16_1_00003_arg_b+D'1', W
0094  1C03  	BTFSS STATUS,C
0095  03ED  	DECF __div_16_1_00003_1_r+D'1', F
0096  02ED  	SUBWF __div_16_1_00003_1_r+D'1', F
0097  146F  	BSF CompTempVarRet214,0
0098        label8
0098  0AEE  	INCF __div_16_1_00003_1_i, F
0099  2880  	GOTO	label6
009A        ; } __div_16_16 function end


00F8        __rem_32_3_00002
00F8        ; { __rem_32_32 ; function begin
00F8  01EE  	CLRF CompTempVarRet212
00F9  01EF  	CLRF CompTempVarRet212+D'1'
00FA  01F0  	CLRF CompTempVarRet212+D'2'
00FB  01F1  	CLRF CompTempVarRet212+D'3'
00FC  01E9  	CLRF __rem_32_3_00002_1_c
00FD  01EA  	CLRF __rem_32_3_00002_1_c+D'1'
00FE  01EB  	CLRF __rem_32_3_00002_1_c+D'2'
00FF  01EC  	CLRF __rem_32_3_00002_1_c+D'3'
0100  01ED  	CLRF __rem_32_3_00002_1_i
0101        label22
0101  1AED  	BTFSC __rem_32_3_00002_1_i,5
0102  0008  	RETURN
0103  1003  	BCF STATUS,C
0104  0DE9  	RLF __rem_32_3_00002_1_c, F
0105  0DEA  	RLF __rem_32_3_00002_1_c+D'1', F
0106  0DEB  	RLF __rem_32_3_00002_1_c+D'2', F
0107  0DEC  	RLF __rem_32_3_00002_1_c+D'3', F
0108  0DE1  	RLF __rem_32_3_00002_arg_a, F
0109  0DE2  	RLF __rem_32_3_00002_arg_a+D'1', F
010A  0DE3  	RLF __rem_32_3_00002_arg_a+D'2', F
010B  0DE4  	RLF __rem_32_3_00002_arg_a+D'3', F
010C  0DEE  	RLF CompTempVarRet212, F
010D  0DEF  	RLF CompTempVarRet212+D'1', F
010E  0DF0  	RLF CompTempVarRet212+D'2', F
010F  0DF1  	RLF CompTempVarRet212+D'3', F
0110  0868  	MOVF __rem_32_3_00002_arg_b+D'3', W
0111  0271  	SUBWF CompTempVarRet212+D'3', W
0112  1D03  	BTFSS STATUS,Z
0113  291E  	GOTO	label23
0114  0867  	MOVF __rem_32_3_00002_arg_b+D'2', W
0115  0270  	SUBWF CompTempVarRet212+D'2', W
0116  1D03  	BTFSS STATUS,Z
0117  291E  	GOTO	label23
0118  0866  	MOVF __rem_32_3_00002_arg_b+D'1', W
0119  026F  	SUBWF CompTempVarRet212+D'1', W
011A  1D03  	BTFSS STATUS,Z
011B  291E  	GOTO	label23
011C  0865  	MOVF __rem_32_3_00002_arg_b, W
011D  026E  	SUBWF CompTempVarRet212, W
011E        label23
011E  1C03  	BTFSS STATUS,C
011F  292F  	GOTO	label24
0120  0865  	MOVF __rem_32_3_00002_arg_b, W
0121  02EE  	SUBWF CompTempVarRet212, F
0122  0866  	MOVF __rem_32_3_00002_arg_b+D'1', W
0123  1C03  	BTFSS STATUS,C
0124  0F66  	INCFSZ __rem_32_3_00002_arg_b+D'1', W
0125  02EF  	SUBWF CompTempVarRet212+D'1', F
0126  0867  	MOVF __rem_32_3_00002_arg_b+D'2', W
0127  1C03  	BTFSS STATUS,C
0128  0F67  	INCFSZ __rem_32_3_00002_arg_b+D'2', W
0129  02F0  	SUBWF CompTempVarRet212+D'2', F
012A  0868  	MOVF __rem_32_3_00002_arg_b+D'3', W
012B  1C03  	BTFSS STATUS,C
012C  0F68  	INCFSZ __rem_32_3_00002_arg_b+D'3', W
012D  02F1  	SUBWF CompTempVarRet212+D'3', F
012E  1469  	BSF __rem_32_3_00002_1_c,0
012F        label24
012F  0AED  	INCF __rem_32_3_00002_1_i, F
0130  2901  	GOTO	label22
0131        ; } __rem_32_32 function end

0131        __div_8_8_00000
0131        ; { __div_8_8 ; function begin
0131  01E5  	CLRF __div_8_8_00000_1_r
0132  01E7  	CLRF CompTempVarRet218
0133  01E6  	CLRF __div_8_8_00000_1_i
0134        label25
0134  19E6  	BTFSC __div_8_8_00000_1_i,3
0135  0008  	RETURN
0136  1003  	BCF STATUS,C
0137  0DE7  	RLF CompTempVarRet218, F
0138  0DE3  	RLF __div_8_8_00000_arg_a, F
0139  0DE5  	RLF __div_8_8_00000_1_r, F
013A  0864  	MOVF __div_8_8_00000_arg_b, W
013B  0265  	SUBWF __div_8_8_00000_1_r, W
013C  1C03  	BTFSS STATUS,C
013D  2940  	GOTO	label26
013E  00E5  	MOVWF __div_8_8_00000_1_r
013F  1467  	BSF CompTempVarRet218,0
0140        label26
0140  0AE6  	INCF __div_8_8_00000_1_i, F
0141  2934  	GOTO	label25
0142        ; } __div_8_8 function end

0142        __div_32_3_00001
0142        ; { __div_32_32 ; function begin
0142  01EE  	CLRF __div_32_3_00001_1_r
0143  01EF  	CLRF __div_32_3_00001_1_r+D'1'
0144  01F0  	CLRF __div_32_3_00001_1_r+D'2'
0145  01F1  	CLRF __div_32_3_00001_1_r+D'3'
0146  01F3  	CLRF CompTempVarRet210
0147  01F4  	CLRF CompTempVarRet210+D'1'
0148  01F5  	CLRF CompTempVarRet210+D'2'
0149  01F6  	CLRF CompTempVarRet210+D'3'
014A  01F2  	CLRF __div_32_3_00001_1_i
014B        label27
014B  1AF2  	BTFSC __div_32_3_00001_1_i,5
014C  0008  	RETURN
014D  1003  	BCF STATUS,C
014E  0DF3  	RLF CompTempVarRet210, F
014F  0DF4  	RLF CompTempVarRet210+D'1', F
0150  0DF5  	RLF CompTempVarRet210+D'2', F
0151  0DF6  	RLF CompTempVarRet210+D'3', F
0152  0DE1  	RLF __div_32_3_00001_arg_a, F
0153  0DE2  	RLF __div_32_3_00001_arg_a+D'1', F
0154  0DE3  	RLF __div_32_3_00001_arg_a+D'2', F
0155  0DE4  	RLF __div_32_3_00001_arg_a+D'3', F
0156  0DEE  	RLF __div_32_3_00001_1_r, F
0157  0DEF  	RLF __div_32_3_00001_1_r+D'1', F
0158  0DF0  	RLF __div_32_3_00001_1_r+D'2', F
0159  0DF1  	RLF __div_32_3_00001_1_r+D'3', F
015A  0868  	MOVF __div_32_3_00001_arg_b+D'3', W
015B  0271  	SUBWF __div_32_3_00001_1_r+D'3', W
015C  1D03  	BTFSS STATUS,Z
015D  2968  	GOTO	label28
015E  0867  	MOVF __div_32_3_00001_arg_b+D'2', W
015F  0270  	SUBWF __div_32_3_00001_1_r+D'2', W
0160  1D03  	BTFSS STATUS,Z
0161  2968  	GOTO	label28
0162  0866  	MOVF __div_32_3_00001_arg_b+D'1', W
0163  026F  	SUBWF __div_32_3_00001_1_r+D'1', W
0164  1D03  	BTFSS STATUS,Z
0165  2968  	GOTO	label28
0166  0865  	MOVF __div_32_3_00001_arg_b, W
0167  026E  	SUBWF __div_32_3_00001_1_r, W
0168        label28
0168  1C03  	BTFSS STATUS,C
0169  2979  	GOTO	label29
016A  0865  	MOVF __div_32_3_00001_arg_b, W
016B  02EE  	SUBWF __div_32_3_00001_1_r, F
016C  0866  	MOVF __div_32_3_00001_arg_b+D'1', W
016D  1C03  	BTFSS STATUS,C
016E  0F66  	INCFSZ __div_32_3_00001_arg_b+D'1', W
016F  02EF  	SUBWF __div_32_3_00001_1_r+D'1', F
0170  0867  	MOVF __div_32_3_00001_arg_b+D'2', W
0171  1C03  	BTFSS STATUS,C
0172  0F67  	INCFSZ __div_32_3_00001_arg_b+D'2', W
0173  02F0  	SUBWF __div_32_3_00001_1_r+D'2', F
0174  0868  	MOVF __div_32_3_00001_arg_b+D'3', W
0175  1C03  	BTFSS STATUS,C
0176  0F68  	INCFSZ __div_32_3_00001_arg_b+D'3', W
0177  02F1  	SUBWF __div_32_3_00001_1_r+D'3', F
0178  1473  	BSF CompTempVarRet210,0
0179        label29
0179  0AF2  	INCF __div_32_3_00001_1_i, F
017A  294B  	GOTO	label27
017B        ; } __div_32_32 function end


0798        _startup
0798  30D5  	MOVLW 0xD5
0799  1283  	BCF STATUS, RP0
079A  1303  	BCF STATUS, RP1
079B  00A0  	MOVWF gbl_14_LSR
079C  30C4  	MOVLW 0xC4
079D  00A1  	MOVWF gbl_14_LSR+D'1'
079E  30BB  	MOVLW 0xBB
079F  00A2  	MOVWF gbl_14_LSR+D'2'
07A0  30DC  	MOVLW 0xDC
07A1  00A3  	MOVWF gbl_14_LSR+D'3'
07A2  01A4  	CLRF gbl_15_gbl_aSig
07A3  01A5  	CLRF gbl_15_gbl_aSig+D'1'
07A4  01A6  	CLRF gbl_15_gbl_aSig+D'2'
07A5  01A7  	CLRF gbl_15_gbl_aSig+D'3'
07A6  01A8  	CLRF gbl_15_gbl_bSig
07A7  01A9  	CLRF gbl_15_gbl_bSig+D'1'
07A8  01AA  	CLRF gbl_15_gbl_bSig+D'2'
07A9  01AB  	CLRF gbl_15_gbl_bSig+D'3'
07AA  01AC  	CLRF gbl_15_gbl_zSig
07AB  01AD  	CLRF gbl_15_gbl_zSig+D'1'
07AC  01AE  	CLRF gbl_15_gbl_zSig+D'2'
07AD  01AF  	CLRF gbl_15_gbl_zSig+D'3'
07AE  01CC  	CLRF gbl_15_gbl_aExp
07AF  01CD  	CLRF gbl_15_gbl_bExp
07B0  01C3  	CLRF gbl_15_gbl_zExp
07B1  01C4  	CLRF gbl_15_gbl_zExp+D'1'
07B2  01CE  	CLRF gbl_15_gbl_aSign
07B3  01CF  	CLRF gbl_15_gbl_bSign
07B4  01D0  	CLRF gbl_15_gbl_zSign
07B5  01D1  	CLRF gbl_15_gbl_zSigZero
07B6  01B0  	CLRF gbl_15_gbl_ret
07B7  01B1  	CLRF gbl_15_gbl_ret+D'1'
07B8  01B2  	CLRF gbl_15_gbl_ret+D'2'
07B9  01B3  	CLRF gbl_15_gbl_ret+D'3'
07BA  01CA  	CLRF gbl_float_rounding_mode
07BB  01CB  	CLRF gbl_float_exception_flags
07BC  01C9  	CLRF gbl_float_detect_tininess

07DF  118A  	BCF PCLATH,3
07E0  120A  	BCF PCLATH,4
07E1  2EA1  	GOTO	main

2007  3F32  	DW 0x3F32
