;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\Thermometer\Flowcode\thermo873a_final.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Tuesday, June 30, 2020 15:12:40
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 3276800
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_TRUE (1)
#define FCV_FALSE (0)



#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations



void main()

{
	//Initialization
	adcon1 = 0x07;
002B  3007  	MOVLW 0x07
002C  1683  	BSF STATUS, RP0
002D  1303  	BCF STATUS, RP1
002E  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
002F  30C0  	MOVLW 0xC0
0030  0081  	MOVWF gbl_option_reg



	//Output
	//Output: 1 -> B2
	trisb = trisb & 0xFB;
0031  30FB  	MOVLW 0xFB
0032  0506  	ANDWF gbl_trisb, W
0033  0086  	MOVWF gbl_trisb

	if ((1))
		portb = (portb & 0xFB) | 0x04;
0034  30FB  	MOVLW 0xFB
0035  1283  	BCF STATUS, RP0
0036  0506  	ANDWF gbl_portb, W
0037  00C2  	MOVWF CompTempVar2188
0038  3004  	MOVLW 0x04
0039  0442  	IORWF CompTempVar2188, W
003A  0086  	MOVWF gbl_portb

	else
		portb = portb & 0xFB;

	//Output
	//Output: 0 -> B3
	trisb = trisb & 0xF7;
003B  30F7  	MOVLW 0xF7
003C  1683  	BSF STATUS, RP0
003D  0506  	ANDWF gbl_trisb, W
003E  0086  	MOVWF gbl_trisb

	if ((0))
		portb = (portb & 0xF7) | 0x08;
	else
		portb = portb & 0xF7;
003F  30F7  	MOVLW 0xF7
0040  1283  	BCF STATUS, RP0
0041  0506  	ANDWF gbl_portb, W
0042  0086  	MOVWF gbl_portb


	//Output
	//Output: 0 -> B4
	trisb = trisb & 0xEF;
0043  30EF  	MOVLW 0xEF
0044  1683  	BSF STATUS, RP0
0045  0506  	ANDWF gbl_trisb, W
0046  0086  	MOVWF gbl_trisb

	if ((0))
		portb = (portb & 0xEF) | 0x10;
	else
		portb = portb & 0xEF;
0047  30EF  	MOVLW 0xEF
0048  1283  	BCF STATUS, RP0
0049  0506  	ANDWF gbl_portb, W
004A  0086  	MOVWF gbl_portb


	//Output
	//Output: 0 -> B5
	trisb = trisb & 0xDF;
004B  30DF  	MOVLW 0xDF
004C  1683  	BSF STATUS, RP0
004D  0506  	ANDWF gbl_trisb, W
004E  0086  	MOVWF gbl_trisb

	if ((0))
		portb = (portb & 0xDF) | 0x20;
	else
		portb = portb & 0xDF;
004F  30DF  	MOVLW 0xDF
0050  1283  	BCF STATUS, RP0
0051  0506  	ANDWF gbl_portb, W
0052  0086  	MOVWF gbl_portb


	//Loop
	//Loop: While 1
	while (1)
0053        label4
0087  2853  	GOTO	label4

	{

		//Output
		//Output: 0 -> C6
		trisc = trisc & 0xBF;
0053  30BF  	MOVLW 0xBF
0054  1683  	BSF STATUS, RP0
0055  0507  	ANDWF gbl_trisc, W
0056  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xBF) | 0x40;
		else
			portc = portc & 0xBF;
0057  30BF  	MOVLW 0xBF
0058  1283  	BCF STATUS, RP0
0059  0507  	ANDWF gbl_portc, W
005A  0087  	MOVWF gbl_portc


		//Output
		//Output: 0 -> C7
		trisc = trisc & 0x7F;
005B  307F  	MOVLW 0x7F
005C  1683  	BSF STATUS, RP0
005D  0507  	ANDWF gbl_trisc, W
005E  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0x7F) | 0x80;
		else
			portc = portc & 0x7F;
005F  307F  	MOVLW 0x7F
0060  1283  	BCF STATUS, RP0
0061  0507  	ANDWF gbl_portc, W
0062  0087  	MOVWF gbl_portc


		//Output
		//Output: 255 -> PORTA
		trisa = 0x00;
0063  1683  	BSF STATUS, RP0
0064  0185  	CLRF gbl_trisa

		porta = (255);
0065  30FF  	MOVLW 0xFF
0066  1283  	BCF STATUS, RP0
0067  0085  	MOVWF gbl_porta


		//Delay
		//Delay: 1 s
		delay_s(1);
0068  3001  	MOVLW 0x01
0069  00C2  	MOVWF delay_s_00000_arg_del
006A  201C  	CALL delay_s_00000


		//Output
		//Output: 1 -> C6
		trisc = trisc & 0xBF;
006B  30BF  	MOVLW 0xBF
006C  1683  	BSF STATUS, RP0
006D  0507  	ANDWF gbl_trisc, W
006E  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xBF) | 0x40;
006F  30BF  	MOVLW 0xBF
0070  1283  	BCF STATUS, RP0
0071  0507  	ANDWF gbl_portc, W
0072  00C2  	MOVWF CompTempVar2189
0073  3040  	MOVLW 0x40
0074  0442  	IORWF CompTempVar2189, W
0075  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xBF;

		//Delay
		//Delay: 1 s
		delay_s(1);
0076  3001  	MOVLW 0x01
0077  00C2  	MOVWF delay_s_00000_arg_del
0078  201C  	CALL delay_s_00000


		//Output
		//Output: 1 -> C7
		trisc = trisc & 0x7F;
0079  307F  	MOVLW 0x7F
007A  1683  	BSF STATUS, RP0
007B  0507  	ANDWF gbl_trisc, W
007C  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0x7F) | 0x80;
007D  307F  	MOVLW 0x7F
007E  1283  	BCF STATUS, RP0
007F  0507  	ANDWF gbl_portc, W
0080  00C2  	MOVWF CompTempVar2190
0081  3080  	MOVLW 0x80
0082  0442  	IORWF CompTempVar2190, W
0083  0087  	MOVWF gbl_portc

		else
			portc = portc & 0x7F;

		//Delay
		//Delay: 1 s
		delay_s(1);
0084  3001  	MOVLW 0x01
0085  00C2  	MOVWF delay_s_00000_arg_del
0086  201C  	CALL delay_s_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
00B0  1283  	BCF STATUS, RP0
00B1  1303  	BCF STATUS, RP1
00B2  0E36  	SWAPF Int1BContext+D'2', W
00B3  0084  	MOVWF FSR
00B4  0E35  	SWAPF Int1BContext+D'1', W
00B5  008A  	MOVWF PCLATH
00B6  0E34  	SWAPF Int1BContext, W
00B7  0083  	MOVWF STATUS
00B8  0EFF  	SWAPF Int1Context, F
00B9  0E7F  	SWAPF Int1Context, W
00BA  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2888  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  28B0  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C3  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30CC  	MOVLW 0xCC
0015        label2
0015  3EFF  	ADDLW 0xFF
0016  1D03  	BTFSS STATUS,Z
0017  2815  	GOTO	label2
0018  0000  	NOP
0019  0BC3  	DECFSZ delay_ms_00000_arg_del, F
001A  2814  	GOTO	label1
001B  0008  	RETURN
001C        ; } delay_ms function end

001C        delay_s_00000
001C        ; { delay_s ; function begin
001C        label3
001C  30FA  	MOVLW 0xFA
001D  00C3  	MOVWF delay_ms_00000_arg_del
001E  2010  	CALL delay_ms_00000
001F  30FA  	MOVLW 0xFA
0020  00C3  	MOVWF delay_ms_00000_arg_del
0021  2010  	CALL delay_ms_00000
0022  30FA  	MOVLW 0xFA
0023  00C3  	MOVWF delay_ms_00000_arg_del
0024  2010  	CALL delay_ms_00000
0025  30FA  	MOVLW 0xFA
0026  00C3  	MOVWF delay_ms_00000_arg_del
0027  2010  	CALL delay_ms_00000
0028  0BC2  	DECFSZ delay_s_00000_arg_del, F
0029  281C  	GOTO	label3
002A  0008  	RETURN
002B        ; } delay_s function end


0088        _startup
0088  30D5  	MOVLW 0xD5
0089  1283  	BCF STATUS, RP0
008A  1303  	BCF STATUS, RP1
008B  00A0  	MOVWF gbl_14_LSR
008C  30C4  	MOVLW 0xC4
008D  00A1  	MOVWF gbl_14_LSR+D'1'
008E  30BB  	MOVLW 0xBB
008F  00A2  	MOVWF gbl_14_LSR+D'2'
0090  30DC  	MOVLW 0xDC
0091  00A3  	MOVWF gbl_14_LSR+D'3'
0092  01A4  	CLRF gbl_15_gbl_aSig
0093  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0094  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0095  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0096  01A8  	CLRF gbl_15_gbl_bSig
0097  01A9  	CLRF gbl_15_gbl_bSig+D'1'
0098  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0099  01AB  	CLRF gbl_15_gbl_bSig+D'3'
009A  01AC  	CLRF gbl_15_gbl_zSig
009B  01AD  	CLRF gbl_15_gbl_zSig+D'1'
009C  01AE  	CLRF gbl_15_gbl_zSig+D'2'
009D  01AF  	CLRF gbl_15_gbl_zSig+D'3'
009E  01BC  	CLRF gbl_15_gbl_aExp
009F  01BD  	CLRF gbl_15_gbl_bExp
00A0  01B7  	CLRF gbl_15_gbl_zExp
00A1  01B8  	CLRF gbl_15_gbl_zExp+D'1'
00A2  01BE  	CLRF gbl_15_gbl_aSign
00A3  01BF  	CLRF gbl_15_gbl_bSign
00A4  01C0  	CLRF gbl_15_gbl_zSign
00A5  01C1  	CLRF gbl_15_gbl_zSigZero
00A6  01B0  	CLRF gbl_15_gbl_ret
00A7  01B1  	CLRF gbl_15_gbl_ret+D'1'
00A8  01B2  	CLRF gbl_15_gbl_ret+D'2'
00A9  01B3  	CLRF gbl_15_gbl_ret+D'3'
00AA  01BA  	CLRF gbl_float_rounding_mode
00AB  01BB  	CLRF gbl_float_exception_flags
00AC  01B9  	CLRF gbl_float_detect_tininess
00AD  118A  	BCF PCLATH,3
00AE  120A  	BCF PCLATH,4
00AF  282B  	GOTO	main

2007  3F3A  	DW 0x3F3A
