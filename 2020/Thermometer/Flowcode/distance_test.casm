;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
003E  01CD  	CLRF Wdt_Delay__0003E_1_i
003F        label6
003F  084C  	MOVF Wdt_Delay__0003E_arg_delay, W
0040  024D  	SUBWF Wdt_Delay__0003E_1_i, W
0041  1803  	BTFSC STATUS,C
0047  0ACD  	INCF Wdt_Delay__0003E_1_i, F
0048  283F  	GOTO	label6

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0043  0064  	CLRWDT

        delay_ms(1);
0044  3001  	MOVLW 0x01
0045  00CE  	MOVWF delay_ms_00000_arg_del
0046  2010  	CALL delay_ms_00000

    }
}
0042  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\Thermometer\Flowcode\distance_test.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Saturday, July 11, 2020 16:30:57
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 1
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 3276800
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x1e7a
#endif
#ifdef HI_TECH_C
__CONFIG(0x1e7a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_TRUE (1)
#define FCV_FALSE (0)
MX_UINT32 FCV_DURATION = (0x0);
0324  01B4  	CLRF gbl_FCV_DURATION
0325  01B5  	CLRF gbl_FCV_DURATION+D'1'
0326  01B6  	CLRF gbl_FCV_DURATION+D'2'
0327  01B7  	CLRF gbl_FCV_DURATION+D'3'

MX_BOOL FCV_ECHO = (0);
0328  1046  	BCF gbl_FCV_ECHO,0

MX_BOOL FCV_TRIG = (0);
0329  10C6  	BCF gbl_FCV_TRIG,1





//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    porta
	#define LCD_1__PORT1    porta
	#define LCD_1__PORT2    porta
	#define LCD_1__PORT3    porta
	#define LCD_1__PORT4    porta
	#define LCD_1__PORT5    porta
	#define LCD_1__TRIS0    trisa
	#define LCD_1__TRIS1    trisa
	#define LCD_1__TRIS2    trisa
	#define LCD_1__TRIS3    trisa
	#define LCD_1__TRIS4    trisa
	#define LCD_1__TRIS5    trisa
	#define LCD_1__BIT0    	0
	#define LCD_1__BIT1    	1
	#define LCD_1__BIT2    	2
	#define LCD_1__BIT3    	3
	#define LCD_1__RS      	4
	#define LCD_1__E       	5
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
0049  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
004A  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
004B  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
004C  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
004D  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
004E  1285  	BCF gbl_porta,5

		pt = ((in >> 4) & 0x0f);
004F  0E59  	SWAPF FCD_LCDDis_00051_arg_in, W
0050  390F  	ANDLW 0x0F
0051  00DB  	MOVWF FCD_LCDDis_00051_1_pt
0052  300F  	MOVLW 0x0F
0053  05DB  	ANDWF FCD_LCDDis_00051_1_pt, F

		if (pt & 0x01)
0054  185B  	BTFSC FCD_LCDDis_00051_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0055  1405  	BSF gbl_porta,0

		if (pt & 0x02)
0056  18DB  	BTFSC FCD_LCDDis_00051_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0057  1485  	BSF gbl_porta,1

		if (pt & 0x04)
0058  195B  	BTFSC FCD_LCDDis_00051_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
0059  1505  	BSF gbl_porta,2

		if (pt & 0x08)
005A  19DB  	BTFSC FCD_LCDDis_00051_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
005B  1585  	BSF gbl_porta,3

		if (mask)
005C  08DA  	MOVF FCD_LCDDis_00051_arg_mask, F
005D  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
005E  1605  	BSF gbl_porta,4

		LCD_1__DELAY;
005F  300A  	MOVLW 0x0A
0060  00DC  	MOVWF delay_10us_00000_arg_del
0061  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0062  1685  	BSF gbl_porta,5

		LCD_1__DELAY;
0063  300A  	MOVLW 0x0A
0064  00DC  	MOVWF delay_10us_00000_arg_del
0065  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0066  1285  	BCF gbl_porta,5

		pt = (in & 0x0f);
0067  300F  	MOVLW 0x0F
0068  0559  	ANDWF FCD_LCDDis_00051_arg_in, W
0069  00DB  	MOVWF FCD_LCDDis_00051_1_pt

		LCD_1__DELAY;
006A  300A  	MOVLW 0x0A
006B  00DC  	MOVWF delay_10us_00000_arg_del
006C  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
006D  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
006E  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
006F  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0070  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0071  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0072  1285  	BCF gbl_porta,5

		if (pt & 0x01)
0073  185B  	BTFSC FCD_LCDDis_00051_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0074  1405  	BSF gbl_porta,0

		if (pt & 0x02)
0075  18DB  	BTFSC FCD_LCDDis_00051_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0076  1485  	BSF gbl_porta,1

		if (pt & 0x04)
0077  195B  	BTFSC FCD_LCDDis_00051_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
0078  1505  	BSF gbl_porta,2

		if (pt & 0x08)
0079  19DB  	BTFSC FCD_LCDDis_00051_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
007A  1585  	BSF gbl_porta,3

		if (mask)
007B  08DA  	MOVF FCD_LCDDis_00051_arg_mask, F
007C  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
007D  1605  	BSF gbl_porta,4

		LCD_1__DELAY;
007E  300A  	MOVLW 0x0A
007F  00DC  	MOVWF delay_10us_00000_arg_del
0080  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0081  1685  	BSF gbl_porta,5

		LCD_1__DELAY;
0082  300A  	MOVLW 0x0A
0083  00DC  	MOVWF delay_10us_00000_arg_del
0084  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0085  1285  	BCF gbl_porta,5

		LCD_1__DELAY;
0086  300A  	MOVLW 0x0A
0087  00DC  	MOVWF delay_10us_00000_arg_del
0088  201C  	CALL delay_10us_00000


}
0089  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
01F9  1683  	BSF STATUS, RP0
01FA  1303  	BCF STATUS, RP1
01FB  1005  	BCF gbl_trisa,0
01FC  1283  	BCF STATUS, RP0
01FD  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
01FE  1683  	BSF STATUS, RP0
01FF  1085  	BCF gbl_trisa,1
0200  1283  	BCF STATUS, RP0
0201  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
0202  1683  	BSF STATUS, RP0
0203  1105  	BCF gbl_trisa,2
0204  1283  	BCF STATUS, RP0
0205  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
0206  1683  	BSF STATUS, RP0
0207  1185  	BCF gbl_trisa,3
0208  1283  	BCF STATUS, RP0
0209  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
020A  1683  	BSF STATUS, RP0
020B  1205  	BCF gbl_trisa,4
020C  1283  	BCF STATUS, RP0
020D  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
020E  1683  	BSF STATUS, RP0
020F  1285  	BCF gbl_trisa,5
0210  1283  	BCF STATUS, RP0
0211  1285  	BCF gbl_porta,5


		Wdt_Delay_Ms(12);
0212  300C  	MOVLW 0x0C
0213  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
0214  203E  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
0215  3033  	MOVLW 0x33
0216  00D9  	MOVWF FCD_LCDDis_00051_arg_in
0217  01DA  	CLRF FCD_LCDDis_00051_arg_mask
0218  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
0219  3002  	MOVLW 0x02
021A  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
021B  203E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
021C  3033  	MOVLW 0x33
021D  00D9  	MOVWF FCD_LCDDis_00051_arg_in
021E  01DA  	CLRF FCD_LCDDis_00051_arg_mask
021F  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
0220  3002  	MOVLW 0x02
0221  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
0222  203E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
0223  3032  	MOVLW 0x32
0224  00D9  	MOVWF FCD_LCDDis_00051_arg_in
0225  01DA  	CLRF FCD_LCDDis_00051_arg_mask
0226  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
0227  3002  	MOVLW 0x02
0228  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
0229  203E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
022A  302C  	MOVLW 0x2C
022B  00D9  	MOVWF FCD_LCDDis_00051_arg_in
022C  01DA  	CLRF FCD_LCDDis_00051_arg_mask
022D  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
022E  3002  	MOVLW 0x02
022F  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
0230  203E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
0231  3006  	MOVLW 0x06
0232  00D9  	MOVWF FCD_LCDDis_00051_arg_in
0233  01DA  	CLRF FCD_LCDDis_00051_arg_mask
0234  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
0235  3002  	MOVLW 0x02
0236  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
0237  203E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
0238  300C  	MOVLW 0x0C
0239  00D9  	MOVWF FCD_LCDDis_00051_arg_in
023A  01DA  	CLRF FCD_LCDDis_00051_arg_mask
023B  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
023C  3002  	MOVLW 0x02
023D  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
023E  203E  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
023F  3001  	MOVLW 0x01
0240  00D9  	MOVWF FCD_LCDDis_00051_arg_in
0241  01DA  	CLRF FCD_LCDDis_00051_arg_mask
0242  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
0243  3002  	MOVLW 0x02
0244  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
0245  203E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0246  3002  	MOVLW 0x02
0247  00D9  	MOVWF FCD_LCDDis_00051_arg_in
0248  01DA  	CLRF FCD_LCDDis_00051_arg_mask
0249  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
024A  3002  	MOVLW 0x02
024B  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
024C  203E  	CALL Wdt_Delay__0003E


}
024D  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
01E8  3001  	MOVLW 0x01
01E9  1283  	BCF STATUS, RP0
01EA  1303  	BCF STATUS, RP1
01EB  00D9  	MOVWF FCD_LCDDis_00051_arg_in
01EC  01DA  	CLRF FCD_LCDDis_00051_arg_mask
01ED  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
01EE  3002  	MOVLW 0x02
01EF  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
01F0  203E  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
01F1  3002  	MOVLW 0x02
01F2  00D9  	MOVWF FCD_LCDDis_00051_arg_in
01F3  01DA  	CLRF FCD_LCDDis_00051_arg_mask
01F4  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
01F5  3002  	MOVLW 0x02
01F6  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
01F7  203E  	CALL Wdt_Delay__0003E


}
01F8  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
00A9  08CB  	MOVF FCD_LCDDis_00056_arg_y, F
00AA  1D03  	BTFSS STATUS,Z
00AB  28AF  	GOTO	label10
00AF        label10

			y=0x80;
00AC  3080  	MOVLW 0x80
00AD  00CB  	MOVWF FCD_LCDDis_00056_arg_y

		else if (y==1)
00AE  28BE  	GOTO	label13
00AF  034B  	DECF FCD_LCDDis_00056_arg_y, W
00B0  1D03  	BTFSS STATUS,Z
00B1  28B5  	GOTO	label11
00B5        label11

			y=0xc0;
00B2  30C0  	MOVLW 0xC0
00B3  00CB  	MOVWF FCD_LCDDis_00056_arg_y


		#if (LCD_1__COLCNT == 16)
			else if (y==2)
00B4  28BE  	GOTO	label13
00B5  084B  	MOVF FCD_LCDDis_00056_arg_y, W
00B6  3A02  	XORLW 0x02
00B7  1D03  	BTFSS STATUS,Z
00B8  28BC  	GOTO	label12
00BC        label12

				y=0x90;
00B9  3090  	MOVLW 0x90
00BA  00CB  	MOVWF FCD_LCDDis_00056_arg_y

			else
00BB  28BE  	GOTO	label13
00BE        label13

				y=0xd0;
00BC  30D0  	MOVLW 0xD0
00BD  00CB  	MOVWF FCD_LCDDis_00056_arg_y

		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
00BE  084A  	MOVF FCD_LCDDis_00056_arg_x, W
00BF  074B  	ADDWF FCD_LCDDis_00056_arg_y, W
00C0  00D9  	MOVWF FCD_LCDDis_00051_arg_in
00C1  01DA  	CLRF FCD_LCDDis_00051_arg_mask
00C2  2049  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00C3  3002  	MOVLW 0x02
00C4  00CC  	MOVWF Wdt_Delay__0003E_arg_delay
00C5  203E  	CALL Wdt_Delay__0003E


}
00C6  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)

{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
00FA  1FC8  	BTFSS FCD_LCDDis_00057_arg_Number+D'1',7
00FB  2909  	GOTO	label17
0109        label17

		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
00FC  302D  	MOVLW 0x2D
00FD  00D9  	MOVWF FCD_LCDDis_00051_arg_in
00FE  3010  	MOVLW 0x10
00FF  00DA  	MOVWF FCD_LCDDis_00051_arg_mask
0100  2049  	CALL FCD_LCDDis_00051

			Number = 0 - Number;
0101  0847  	MOVF FCD_LCDDis_00057_arg_Number, W
0102  3C00  	SUBLW 0x00
0103  00CC  	MOVWF CompTempVar2196
0104  09C8  	COMF FCD_LCDDis_00057_arg_Number+D'1', F
0105  1803  	BTFSC STATUS,C
0106  0AC8  	INCF FCD_LCDDis_00057_arg_Number+D'1', F
0107  084C  	MOVF CompTempVar2196, W
0108  00C7  	MOVWF FCD_LCDDis_00057_arg_Number

		}

		tmp_int = Number;
0109  0847  	MOVF FCD_LCDDis_00057_arg_Number, W
010A  00C9  	MOVWF FCD_LCDDis_00057_1_tmp_int
010B  0848  	MOVF FCD_LCDDis_00057_arg_Number+D'1', W
010C  00CA  	MOVWF FCD_LCDDis_00057_1_tmp_int+D'1'

		if (Number >= 10000)
010D  3027  	MOVLW 0x27
010E  0248  	SUBWF FCD_LCDDis_00057_arg_Number+D'1', W
010F  1D03  	BTFSS STATUS,Z
0110  2913  	GOTO	label18
0111  3010  	MOVLW 0x10
0112  0247  	SUBWF FCD_LCDDis_00057_arg_Number, W
0113        label18
0113  1C03  	BTFSS STATUS,C
0114  2941  	GOTO	label22
0115  1BC8  	BTFSC FCD_LCDDis_00057_arg_Number+D'1',7
0116  2941  	GOTO	label22

		{
			tmp_byte = tmp_int / 10000;
0117  01D0  	CLRF CompTempVar2199
0118  0849  	MOVF FCD_LCDDis_00057_1_tmp_int, W
0119  00CC  	MOVWF __div_16_1_00003_arg_a
011A  084A  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', W
011B  00CD  	MOVWF __div_16_1_00003_arg_a+D'1'
011C  1FCA  	BTFSS FCD_LCDDis_00057_1_tmp_int+D'1',7
011D  2924  	GOTO	label19
011E  09CC  	COMF __div_16_1_00003_arg_a, F
011F  09CD  	COMF __div_16_1_00003_arg_a+D'1', F
0120  0ACC  	INCF __div_16_1_00003_arg_a, F
0121  1903  	BTFSC STATUS,Z
0122  0ACD  	INCF __div_16_1_00003_arg_a+D'1', F
0123  0AD0  	INCF CompTempVar2199, F
0124        label19
0124  3010  	MOVLW 0x10
0125  00CE  	MOVWF __div_16_1_00003_arg_b
0126  3027  	MOVLW 0x27
0127  00CF  	MOVWF __div_16_1_00003_arg_b+D'1'
0128  208A  	CALL __div_16_1_00003
0129  0855  	MOVF CompTempVarRet214, W
012A  00CB  	MOVWF FCD_LCDDis_00057_1_tmp_byte
012B  1C50  	BTFSS CompTempVar2199,0
012C  292F  	GOTO	label20
012D  09CB  	COMF FCD_LCDDis_00057_1_tmp_byte, F
012E  0ACB  	INCF FCD_LCDDis_00057_1_tmp_byte, F
012F        label20

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
012F  084B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
0130  3E30  	ADDLW 0x30
0131  00D9  	MOVWF FCD_LCDDis_00051_arg_in
0132  3010  	MOVLW 0x10
0133  00DA  	MOVWF FCD_LCDDis_00051_arg_mask
0134  2049  	CALL FCD_LCDDis_00051


			while (tmp_byte > 0)
0135        label21
0135  084B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
0136  3C00  	SUBLW 0x00
0137  1803  	BTFSC STATUS,C
0138  2941  	GOTO	label22
0140  2935  	GOTO	label21
0141        label22

			{
				tmp_int = tmp_int - 10000;
0139  3010  	MOVLW 0x10
013A  02C9  	SUBWF FCD_LCDDis_00057_1_tmp_int, F
013B  3027  	MOVLW 0x27
013C  1C03  	BTFSS STATUS,C
013D  3028  	MOVLW 0x28
013E  02CA  	SUBWF FCD_LCDDis_00057_1_tmp_int+D'1', F

				tmp_byte--;
013F  03CB  	DECF FCD_LCDDis_00057_1_tmp_byte, F

			}
		}
		if (Number >= 1000)
0141  3003  	MOVLW 0x03
0142  0248  	SUBWF FCD_LCDDis_00057_arg_Number+D'1', W
0143  1D03  	BTFSS STATUS,Z
0144  2947  	GOTO	label23
0145  30E8  	MOVLW 0xE8
0146  0247  	SUBWF FCD_LCDDis_00057_arg_Number, W
0147        label23
0147  1C03  	BTFSS STATUS,C
0148  2977  	GOTO	label27
0149  1BC8  	BTFSC FCD_LCDDis_00057_arg_Number+D'1',7
014A  2977  	GOTO	label27

		{
			tmp_byte = tmp_int / 1000;
014B  01D1  	CLRF CompTempVar2203
014C  0849  	MOVF FCD_LCDDis_00057_1_tmp_int, W
014D  00CC  	MOVWF __div_16_1_00003_arg_a
014E  084A  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', W
014F  00CD  	MOVWF __div_16_1_00003_arg_a+D'1'
0150  1FCA  	BTFSS FCD_LCDDis_00057_1_tmp_int+D'1',7
0151  2958  	GOTO	label24
0152  09CC  	COMF __div_16_1_00003_arg_a, F
0153  09CD  	COMF __div_16_1_00003_arg_a+D'1', F
0154  0ACC  	INCF __div_16_1_00003_arg_a, F
0155  1903  	BTFSC STATUS,Z
0156  0ACD  	INCF __div_16_1_00003_arg_a+D'1', F
0157  0AD1  	INCF CompTempVar2203, F
0158        label24
0158  30E8  	MOVLW 0xE8
0159  00CE  	MOVWF __div_16_1_00003_arg_b
015A  3003  	MOVLW 0x03
015B  00CF  	MOVWF __div_16_1_00003_arg_b+D'1'
015C  208A  	CALL __div_16_1_00003
015D  0855  	MOVF CompTempVarRet214, W
015E  00D0  	MOVWF CompTempVar2202
015F  1C51  	BTFSS CompTempVar2203,0
0160  2963  	GOTO	label25
0161  09D0  	COMF CompTempVar2202, F
0162  0AD0  	INCF CompTempVar2202, F
0163        label25
0163  0850  	MOVF CompTempVar2202, W
0164  00CB  	MOVWF FCD_LCDDis_00057_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0165  084B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
0166  3E30  	ADDLW 0x30
0167  00D9  	MOVWF FCD_LCDDis_00051_arg_in
0168  3010  	MOVLW 0x10
0169  00DA  	MOVWF FCD_LCDDis_00051_arg_mask
016A  2049  	CALL FCD_LCDDis_00051


			while (tmp_byte > 0)
016B        label26
016B  084B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
016C  3C00  	SUBLW 0x00
016D  1803  	BTFSC STATUS,C
016E  2977  	GOTO	label27
0176  296B  	GOTO	label26
0177        label27

			{
				tmp_int = tmp_int - 1000;
016F  30E8  	MOVLW 0xE8
0170  02C9  	SUBWF FCD_LCDDis_00057_1_tmp_int, F
0171  3003  	MOVLW 0x03
0172  1C03  	BTFSS STATUS,C
0173  3004  	MOVLW 0x04
0174  02CA  	SUBWF FCD_LCDDis_00057_1_tmp_int+D'1', F

				tmp_byte--;
0175  03CB  	DECF FCD_LCDDis_00057_1_tmp_byte, F

			}
		}
		if (Number >= 100)
0177  0848  	MOVF FCD_LCDDis_00057_arg_Number+D'1', W
0178  3A80  	XORLW 0x80
0179  00CC  	MOVWF CompTempVar2206
017A  3080  	MOVLW 0x80
017B  024C  	SUBWF CompTempVar2206, W
017C  1D03  	BTFSS STATUS,Z
017D  2980  	GOTO	label28
017E  3064  	MOVLW 0x64
017F  0247  	SUBWF FCD_LCDDis_00057_arg_Number, W
0180        label28
0180  1C03  	BTFSS STATUS,C
0181  29AC  	GOTO	label32

		{
			tmp_byte = tmp_int / 100;
0182  01D1  	CLRF CompTempVar2208
0183  0849  	MOVF FCD_LCDDis_00057_1_tmp_int, W
0184  00CC  	MOVWF __div_16_1_00003_arg_a
0185  084A  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', W
0186  00CD  	MOVWF __div_16_1_00003_arg_a+D'1'
0187  1FCA  	BTFSS FCD_LCDDis_00057_1_tmp_int+D'1',7
0188  298F  	GOTO	label29
0189  09CC  	COMF __div_16_1_00003_arg_a, F
018A  09CD  	COMF __div_16_1_00003_arg_a+D'1', F
018B  0ACC  	INCF __div_16_1_00003_arg_a, F
018C  1903  	BTFSC STATUS,Z
018D  0ACD  	INCF __div_16_1_00003_arg_a+D'1', F
018E  0AD1  	INCF CompTempVar2208, F
018F        label29
018F  3064  	MOVLW 0x64
0190  00CE  	MOVWF __div_16_1_00003_arg_b
0191  01CF  	CLRF __div_16_1_00003_arg_b+D'1'
0192  208A  	CALL __div_16_1_00003
0193  0855  	MOVF CompTempVarRet214, W
0194  00D0  	MOVWF CompTempVar2207
0195  1C51  	BTFSS CompTempVar2208,0
0196  2999  	GOTO	label30
0197  09D0  	COMF CompTempVar2207, F
0198  0AD0  	INCF CompTempVar2207, F
0199        label30
0199  0850  	MOVF CompTempVar2207, W
019A  00CB  	MOVWF FCD_LCDDis_00057_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
019B  084B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
019C  3E30  	ADDLW 0x30
019D  00D9  	MOVWF FCD_LCDDis_00051_arg_in
019E  3010  	MOVLW 0x10
019F  00DA  	MOVWF FCD_LCDDis_00051_arg_mask
01A0  2049  	CALL FCD_LCDDis_00051


			while (tmp_byte > 0)
01A1        label31
01A1  084B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
01A2  3C00  	SUBLW 0x00
01A3  1803  	BTFSC STATUS,C
01A4  29AC  	GOTO	label32
01AB  29A1  	GOTO	label31
01AC        label32

			{
				tmp_int = tmp_int - 100;
01A5  3064  	MOVLW 0x64
01A6  02C9  	SUBWF FCD_LCDDis_00057_1_tmp_int, F
01A7  08CA  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', F
01A8  1C03  	BTFSS STATUS,C
01A9  03CA  	DECF FCD_LCDDis_00057_1_tmp_int+D'1', F

				tmp_byte--;
01AA  03CB  	DECF FCD_LCDDis_00057_1_tmp_byte, F

			}
		}
		if (Number >= 10)
01AC  0848  	MOVF FCD_LCDDis_00057_arg_Number+D'1', W
01AD  3A80  	XORLW 0x80
01AE  00CC  	MOVWF CompTempVar2211
01AF  3080  	MOVLW 0x80
01B0  024C  	SUBWF CompTempVar2211, W
01B1  1D03  	BTFSS STATUS,Z
01B2  29B5  	GOTO	label33
01B3  300A  	MOVLW 0x0A
01B4  0247  	SUBWF FCD_LCDDis_00057_arg_Number, W
01B5        label33
01B5  1C03  	BTFSS STATUS,C
01B6  29E1  	GOTO	label37

		{
			tmp_byte = tmp_int / 10;
01B7  01D1  	CLRF CompTempVar2213
01B8  0849  	MOVF FCD_LCDDis_00057_1_tmp_int, W
01B9  00CC  	MOVWF __div_16_1_00003_arg_a
01BA  084A  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', W
01BB  00CD  	MOVWF __div_16_1_00003_arg_a+D'1'
01BC  1FCA  	BTFSS FCD_LCDDis_00057_1_tmp_int+D'1',7
01BD  29C4  	GOTO	label34
01BE  09CC  	COMF __div_16_1_00003_arg_a, F
01BF  09CD  	COMF __div_16_1_00003_arg_a+D'1', F
01C0  0ACC  	INCF __div_16_1_00003_arg_a, F
01C1  1903  	BTFSC STATUS,Z
01C2  0ACD  	INCF __div_16_1_00003_arg_a+D'1', F
01C3  0AD1  	INCF CompTempVar2213, F
01C4        label34
01C4  300A  	MOVLW 0x0A
01C5  00CE  	MOVWF __div_16_1_00003_arg_b
01C6  01CF  	CLRF __div_16_1_00003_arg_b+D'1'
01C7  208A  	CALL __div_16_1_00003
01C8  0855  	MOVF CompTempVarRet214, W
01C9  00D0  	MOVWF CompTempVar2212
01CA  1C51  	BTFSS CompTempVar2213,0
01CB  29CE  	GOTO	label35
01CC  09D0  	COMF CompTempVar2212, F
01CD  0AD0  	INCF CompTempVar2212, F
01CE        label35
01CE  0850  	MOVF CompTempVar2212, W
01CF  00CB  	MOVWF FCD_LCDDis_00057_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
01D0  084B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
01D1  3E30  	ADDLW 0x30
01D2  00D9  	MOVWF FCD_LCDDis_00051_arg_in
01D3  3010  	MOVLW 0x10
01D4  00DA  	MOVWF FCD_LCDDis_00051_arg_mask
01D5  2049  	CALL FCD_LCDDis_00051


			while (tmp_byte > 0)
01D6        label36
01D6  084B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
01D7  3C00  	SUBLW 0x00
01D8  1803  	BTFSC STATUS,C
01D9  29E1  	GOTO	label37
01E0  29D6  	GOTO	label36
01E1        label37

			{
				tmp_int = tmp_int - 10;
01DA  300A  	MOVLW 0x0A
01DB  02C9  	SUBWF FCD_LCDDis_00057_1_tmp_int, F
01DC  08CA  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', F
01DD  1C03  	BTFSS STATUS,C
01DE  03CA  	DECF FCD_LCDDis_00057_1_tmp_int+D'1', F

				tmp_byte--;
01DF  03CB  	DECF FCD_LCDDis_00057_1_tmp_byte, F

			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);
01E1  0849  	MOVF FCD_LCDDis_00057_1_tmp_int, W
01E2  3E30  	ADDLW 0x30
01E3  00D9  	MOVWF FCD_LCDDis_00051_arg_in
01E4  3010  	MOVLW 0x10
01E5  00DA  	MOVWF FCD_LCDDis_00051_arg_mask
01E6  2049  	CALL FCD_LCDDis_00051


}
01E7  0008  	RETURN


void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
00DE  01D8  	CLRF FCD_LCDDis_00058_1_idx


		for (idx=0; idx<MSZ_String; idx++)
00DF  01D8  	CLRF FCD_LCDDis_00058_1_idx
00E0        label16
00E0  0857  	MOVF FCD_LCDDis_00058_arg_MSZ_String, W
00E1  0258  	SUBWF FCD_LCDDis_00058_1_idx, W
00E2  1803  	BTFSC STATUS,C
00F8  0AD8  	INCF FCD_LCDDis_00058_1_idx, F
00F9  28E0  	GOTO	label16

		{
			if (String[idx] == 0)
00E4  1383  	BCF STATUS,IRP
00E5  1848  	BTFSC FCD_LCDDis_00058_arg_String+D'1',0
00E6  1783  	BSF STATUS,IRP
00E7  0847  	MOVF FCD_LCDDis_00058_arg_String, W
00E8  0758  	ADDWF FCD_LCDDis_00058_1_idx, W
00E9  0084  	MOVWF FSR
00EA  0880  	MOVF INDF, F
00EB  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
00ED  1383  	BCF STATUS,IRP
00EE  1848  	BTFSC FCD_LCDDis_00058_arg_String+D'1',0
00EF  1783  	BSF STATUS,IRP
00F0  0847  	MOVF FCD_LCDDis_00058_arg_String, W
00F1  0758  	ADDWF FCD_LCDDis_00058_1_idx, W
00F2  0084  	MOVWF FSR
00F3  0800  	MOVF INDF, W
00F4  00D9  	MOVWF FCD_LCDDis_00051_arg_in
00F5  3010  	MOVLW 0x10
00F6  00DA  	MOVWF FCD_LCDDis_00051_arg_mask
00F7  2049  	CALL FCD_LCDDis_00051

		}

}
00E3  0008  	RETURN
00EC  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)

{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
00C7  3010  	MOVLW 0x10
00C8  00C9  	MOVWF FCD_LCDDis_0005B_1_rowcount

			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);
00C9  01CA  	CLRF FCD_LCDDis_00056_arg_x
00CA  0847  	MOVF FCD_LCDDis_0005B_arg_Line, W
00CB  00CB  	MOVWF FCD_LCDDis_00056_arg_y
00CC  20A9  	CALL FCD_LCDDis_00056


		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
00CD  01C8  	CLRF FCD_LCDDis_0005B_1_count
00CE        label14
00CE  0849  	MOVF FCD_LCDDis_0005B_1_rowcount, W
00CF  0248  	SUBWF FCD_LCDDis_0005B_1_count, W
00D0  1803  	BTFSC STATUS,C
00D1  28D9  	GOTO	label15
00D7  0AC8  	INCF FCD_LCDDis_0005B_1_count, F
00D8  28CE  	GOTO	label14
00D9        label15

			FCD_LCDDisplay0_RawSend(' ', 0x10);
00D2  3020  	MOVLW 0x20
00D3  00D9  	MOVWF FCD_LCDDis_00051_arg_in
00D4  3010  	MOVLW 0x10
00D5  00DA  	MOVWF FCD_LCDDis_00051_arg_mask
00D6  2049  	CALL FCD_LCDDis_00051


		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);
00D9  01CA  	CLRF FCD_LCDDis_00056_arg_x
00DA  0847  	MOVF FCD_LCDDis_0005B_arg_Line, W
00DB  00CB  	MOVWF FCD_LCDDis_00056_arg_y
00DC  20A9  	CALL FCD_LCDDis_00056


}
00DD  0008  	RETURN


void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations



void main()

{
	//Initialization
	adcon1 = 0x07;
024E  3007  	MOVLW 0x07
024F  1683  	BSF STATUS, RP0
0250  1303  	BCF STATUS, RP1
0251  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0252  30C0  	MOVLW 0xC0
0253  0081  	MOVWF gbl_option_reg



	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
0254  21F9  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0255  21E8  	CALL FCD_LCDDis_00053


	//Loop
	//Loop: While 1
	while (1)
0256        label38
02FE  2A56  	GOTO	label38

	{

		//Output
		//Output: 0 -> C1
		trisc = trisc & 0xFD;
0256  30FD  	MOVLW 0xFD
0257  1683  	BSF STATUS, RP0
0258  0507  	ANDWF gbl_trisc, W
0259  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFD) | 0x02;
		else
			portc = portc & 0xFD;
025A  30FD  	MOVLW 0xFD
025B  1283  	BCF STATUS, RP0
025C  0507  	ANDWF gbl_portc, W
025D  0087  	MOVWF gbl_portc


		//Call Component Macro
		//Call Component Macro: Cursor(1, 0)
		FCD_LCDDisplay0_Cursor(1, 0);
025E  3001  	MOVLW 0x01
025F  00CA  	MOVWF FCD_LCDDis_00056_arg_x
0260  01CB  	CLRF FCD_LCDDis_00056_arg_y
0261  20A9  	CALL FCD_LCDDis_00056


		//Call Component Macro
		//Call Component Macro: PrintString("DISTANCE TEST")
		FCD_LCDDisplay0_PrintString("DISTANCE TEST", 13);
0262  3020  	MOVLW 0x20
0263  00D1  	MOVWF CompTempVar2224+D'8'
0264  3041  	MOVLW 0x41
0265  00CD  	MOVWF CompTempVar2224+D'4'
0266  3043  	MOVLW 0x43
0267  00CF  	MOVWF CompTempVar2224+D'6'
0268  3044  	MOVLW 0x44
0269  00C9  	MOVWF CompTempVar2224
026A  3045  	MOVLW 0x45
026B  00D0  	MOVWF CompTempVar2224+D'7'
026C  00D3  	MOVWF CompTempVar2224+D'10'
026D  3049  	MOVLW 0x49
026E  00CA  	MOVWF CompTempVar2224+D'1'
026F  304E  	MOVLW 0x4E
0270  00CE  	MOVWF CompTempVar2224+D'5'
0271  3053  	MOVLW 0x53
0272  00CB  	MOVWF CompTempVar2224+D'2'
0273  00D4  	MOVWF CompTempVar2224+D'11'
0274  3054  	MOVLW 0x54
0275  00CC  	MOVWF CompTempVar2224+D'3'
0276  00D2  	MOVWF CompTempVar2224+D'9'
0277  00D5  	MOVWF CompTempVar2224+D'12'
0278  01D6  	CLRF CompTempVar2224+D'13'
0279  3000  	MOVLW HIGH(CompTempVar2224+D'0')
027A  00C8  	MOVWF FCD_LCDDis_00058_arg_String+D'1'
027B  3049  	MOVLW LOW(CompTempVar2224+D'0')
027C  00C7  	MOVWF FCD_LCDDis_00058_arg_String
027D  300D  	MOVLW 0x0D
027E  00D7  	MOVWF FCD_LCDDis_00058_arg_MSZ_String
027F  20DE  	CALL FCD_LCDDis_00058


		//Output
		//Output: 1 -> C1
		trisc = trisc & 0xFD;
0280  30FD  	MOVLW 0xFD
0281  1683  	BSF STATUS, RP0
0282  0507  	ANDWF gbl_trisc, W
0283  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFD) | 0x02;
0284  30FD  	MOVLW 0xFD
0285  1283  	BCF STATUS, RP0
0286  0507  	ANDWF gbl_portc, W
0287  00C7  	MOVWF CompTempVar2226
0288  3002  	MOVLW 0x02
0289  0447  	IORWF CompTempVar2226, W
028A  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFD;

		//Delay
		//Delay: 10 us
		delay_us(10);
028B  300A  	MOVLW 0x0A
028C  00C8  	MOVWF delay_us_00000_arg_del
028D  2025  	CALL delay_us_00000


		//Output
		//Output: 0 -> C1
		trisc = trisc & 0xFD;
028E  30FD  	MOVLW 0xFD
028F  1683  	BSF STATUS, RP0
0290  0507  	ANDWF gbl_trisc, W
0291  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFD) | 0x02;
		else
			portc = portc & 0xFD;
0292  30FD  	MOVLW 0xFD
0293  1283  	BCF STATUS, RP0
0294  0507  	ANDWF gbl_portc, W
0295  0087  	MOVWF gbl_portc


		//Connection Point
		//Connection Point: [A]: A
FCC_Main_A:
0296        label39

;

		//Calculation
		//Calculation:
		//  duration = 0
		FCV_DURATION = 0;
0296  01B4  	CLRF gbl_FCV_DURATION
0297  01B5  	CLRF gbl_FCV_DURATION+D'1'
0298  01B6  	CLRF gbl_FCV_DURATION+D'2'
0299  01B7  	CLRF gbl_FCV_DURATION+D'3'


		//Input
		//Input: C2 -> echo
		trisc = trisc | 0x04;
029A  3004  	MOVLW 0x04
029B  1683  	BSF STATUS, RP0
029C  0407  	IORWF gbl_trisc, W
029D  0087  	MOVWF gbl_trisc

		FCV_ECHO = ((portc & 0x04) == 0x04);
029E  3004  	MOVLW 0x04
029F  1283  	BCF STATUS, RP0
02A0  0507  	ANDWF gbl_portc, W
02A1  00C7  	MOVWF CompTempVar2227
02A2  01C8  	CLRF CompTempVar2228
02A3  3004  	MOVLW 0x04
02A4  0247  	SUBWF CompTempVar2227, W
02A5  1903  	BTFSC STATUS,Z
02A6  0AC8  	INCF CompTempVar2228, F
02A7  1046  	BCF gbl_FCV_ECHO,0
02A8  0848  	MOVF CompTempVar2228, W
02A9  1D03  	BTFSS STATUS,Z
02AA  1446  	BSF gbl_FCV_ECHO,0


		//Decision
		//Decision: echo = 1?
		if (FCV_ECHO == 1)
02AB  1C46  	BTFSS gbl_FCV_ECHO,0
02AC  2A96  	GOTO	label39
02AD        label40

		{

			//Loop
			//Loop: While echo = 1
			while (1)
02D1  2AAD  	GOTO	label40

			{

				//Calculation
				//Calculation:
				//  duration = duration + 1
				FCV_DURATION = FCV_DURATION + 1;
02AD  08B4  	MOVF gbl_FCV_DURATION, F
02AE  08B5  	MOVF gbl_FCV_DURATION+D'1', F
02AF  08B6  	MOVF gbl_FCV_DURATION+D'2', F
02B0  08B7  	MOVF gbl_FCV_DURATION+D'3', F
02B1  0AB4  	INCF gbl_FCV_DURATION, F
02B2  1903  	BTFSC STATUS,Z
02B3  0AB5  	INCF gbl_FCV_DURATION+D'1', F
02B4  1903  	BTFSC STATUS,Z
02B5  0AB6  	INCF gbl_FCV_DURATION+D'2', F
02B6  1903  	BTFSC STATUS,Z
02B7  0AB7  	INCF gbl_FCV_DURATION+D'3', F


				//Input
				//Input: C2 -> echo
				trisc = trisc | 0x04;
02B8  3004  	MOVLW 0x04
02B9  1683  	BSF STATUS, RP0
02BA  0407  	IORWF gbl_trisc, W
02BB  0087  	MOVWF gbl_trisc

				FCV_ECHO = ((portc & 0x04) == 0x04);
02BC  3004  	MOVLW 0x04
02BD  1283  	BCF STATUS, RP0
02BE  0507  	ANDWF gbl_portc, W
02BF  00C8  	MOVWF CompTempVar2234
02C0  01C9  	CLRF CompTempVar2235
02C1  3004  	MOVLW 0x04
02C2  0248  	SUBWF CompTempVar2234, W
02C3  1903  	BTFSC STATUS,Z
02C4  0AC9  	INCF CompTempVar2235, F
02C5  1046  	BCF gbl_FCV_ECHO,0
02C6  0849  	MOVF CompTempVar2235, W
02C7  1D03  	BTFSS STATUS,Z
02C8  1446  	BSF gbl_FCV_ECHO,0


				//Delay
				//Delay: 1 us
				delay_us(1);
02C9  3001  	MOVLW 0x01
02CA  00C8  	MOVWF delay_us_00000_arg_del
02CB  2025  	CALL delay_us_00000



				if ((FCV_ECHO == 1) == 0) break;
02CC  01C7  	CLRF CompTempVar2229
02CD  1846  	BTFSC gbl_FCV_ECHO,0
02CE  0AC7  	INCF CompTempVar2229, F
02CF  08C7  	MOVF CompTempVar2229, F
02D0  1D03  	BTFSS STATUS,Z

			}

			//Call Component Macro
			//Call Component Macro: ClearLine(3)
			FCD_LCDDisplay0_ClearLine(3);
02D2  3003  	MOVLW 0x03
02D3  00C7  	MOVWF FCD_LCDDis_0005B_arg_Line
02D4  20C7  	CALL FCD_LCDDis_0005B


			//Call Component Macro
			//Call Component Macro: Cursor(0, 3)
			FCD_LCDDisplay0_Cursor(0, 3);
02D5  01CA  	CLRF FCD_LCDDis_00056_arg_x
02D6  3003  	MOVLW 0x03
02D7  00CB  	MOVWF FCD_LCDDis_00056_arg_y
02D8  20A9  	CALL FCD_LCDDis_00056


			//Call Component Macro
			//Call Component Macro: PrintString("D=")
			FCD_LCDDisplay0_PrintString("D=", 2);
02D9  3044  	MOVLW 0x44
02DA  00C9  	MOVWF CompTempVar2236
02DB  303D  	MOVLW 0x3D
02DC  00CA  	MOVWF CompTempVar2236+D'1'
02DD  01CB  	CLRF CompTempVar2236+D'2'
02DE  3000  	MOVLW HIGH(CompTempVar2236+D'0')
02DF  00C8  	MOVWF FCD_LCDDis_00058_arg_String+D'1'
02E0  3049  	MOVLW LOW(CompTempVar2236+D'0')
02E1  00C7  	MOVWF FCD_LCDDis_00058_arg_String
02E2  3002  	MOVLW 0x02
02E3  00D7  	MOVWF FCD_LCDDis_00058_arg_MSZ_String
02E4  20DE  	CALL FCD_LCDDis_00058


			//Call Component Macro
			//Call Component Macro: Cursor(2, 3)
			FCD_LCDDisplay0_Cursor(2, 3);
02E5  3002  	MOVLW 0x02
02E6  00CA  	MOVWF FCD_LCDDis_00056_arg_x
02E7  3003  	MOVLW 0x03
02E8  00CB  	MOVWF FCD_LCDDis_00056_arg_y
02E9  20A9  	CALL FCD_LCDDis_00056


			//Call Component Macro
			//Call Component Macro: PrintNumber(duration)
			FCD_LCDDisplay0_PrintNumber(FCV_DURATION);
02EA  0834  	MOVF gbl_FCV_DURATION, W
02EB  00C7  	MOVWF FCD_LCDDis_00057_arg_Number
02EC  0835  	MOVF gbl_FCV_DURATION+D'1', W
02ED  00C8  	MOVWF FCD_LCDDis_00057_arg_Number+D'1'
02EE  20FA  	CALL FCD_LCDDis_00057


			//Call Component Macro
			//Call Component Macro: PrintString("cm")
			FCD_LCDDisplay0_PrintString("cm", 2);
02EF  3063  	MOVLW 0x63
02F0  00C9  	MOVWF CompTempVar2238
02F1  306D  	MOVLW 0x6D
02F2  00CA  	MOVWF CompTempVar2238+D'1'
02F3  01CB  	CLRF CompTempVar2238+D'2'
02F4  3000  	MOVLW HIGH(CompTempVar2238+D'0')
02F5  00C8  	MOVWF FCD_LCDDis_00058_arg_String+D'1'
02F6  3049  	MOVLW LOW(CompTempVar2238+D'0')
02F7  00C7  	MOVWF FCD_LCDDis_00058_arg_String
02F8  3002  	MOVLW 0x02
02F9  00D7  	MOVWF FCD_LCDDis_00058_arg_MSZ_String
02FA  20DE  	CALL FCD_LCDDis_00058


		} else {

			//Goto Connection Point
			//Goto Connection Point: [A]: A
			goto FCC_Main_A;


		}

		//Delay
		//Delay: 1 s
		delay_s(1);
02FB  3001  	MOVLW 0x01
02FC  00C7  	MOVWF delay_s_00000_arg_del
02FD  202F  	CALL delay_s_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
032D  1283  	BCF STATUS, RP0
032E  1303  	BCF STATUS, RP1
032F  0E3A  	SWAPF Int1BContext+D'2', W
0330  0084  	MOVWF FSR
0331  0E39  	SWAPF Int1BContext+D'1', W
0332  008A  	MOVWF PCLATH
0333  0E38  	SWAPF Int1BContext, W
0334  0083  	MOVWF STATUS
0335  0EFF  	SWAPF Int1Context, F
0336  0E7F  	SWAPF Int1Context, W
0337  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2AFF  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B8  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B9  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00BA  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2B2D  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08CE  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30CC  	MOVLW 0xCC
0015        label2
0015  3EFF  	ADDLW 0xFF
0016  1D03  	BTFSS STATUS,Z
0017  2815  	GOTO	label2
0018  0000  	NOP
0019  0BCE  	DECFSZ delay_ms_00000_arg_del, F
001A  2814  	GOTO	label1
001B  0008  	RETURN
001C        ; } delay_ms function end

001C        delay_10us_00000
001C        ; { delay_10us ; function begin
001C        label3
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0BDC  	DECFSZ delay_10us_00000_arg_del, F
0023  281C  	GOTO	label3
0024  0008  	RETURN
0025        ; } delay_10us function end

0025        delay_us_00000
0025        ; { delay_us ; function begin
0025  3003  	MOVLW 0x03
0026  07C8  	ADDWF delay_us_00000_arg_del, F
0027  0CC8  	RRF delay_us_00000_arg_del, F
0028  0CC8  	RRF delay_us_00000_arg_del, F
0029  307F  	MOVLW 0x7F
002A  05C8  	ANDWF delay_us_00000_arg_del, F
002B        label4
002B  0000  	NOP
002C  0BC8  	DECFSZ delay_us_00000_arg_del, F
002D  282B  	GOTO	label4
002E  0008  	RETURN
002F        ; } delay_us function end

002F        delay_s_00000
002F        ; { delay_s ; function begin
002F        label5
002F  30FA  	MOVLW 0xFA
0030  00CE  	MOVWF delay_ms_00000_arg_del
0031  2010  	CALL delay_ms_00000
0032  30FA  	MOVLW 0xFA
0033  00CE  	MOVWF delay_ms_00000_arg_del
0034  2010  	CALL delay_ms_00000
0035  30FA  	MOVLW 0xFA
0036  00CE  	MOVWF delay_ms_00000_arg_del
0037  2010  	CALL delay_ms_00000
0038  30FA  	MOVLW 0xFA
0039  00CE  	MOVWF delay_ms_00000_arg_del
003A  2010  	CALL delay_ms_00000
003B  0BC7  	DECFSZ delay_s_00000_arg_del, F
003C  282F  	GOTO	label5
003D  0008  	RETURN
003E        ; } delay_s function end


008A        __div_16_1_00003
008A        ; { __div_16_16 ; function begin
008A  01D2  	CLRF __div_16_1_00003_1_r
008B  01D3  	CLRF __div_16_1_00003_1_r+D'1'
008C  01D5  	CLRF CompTempVarRet214
008D  01D6  	CLRF CompTempVarRet214+D'1'
008E  01D4  	CLRF __div_16_1_00003_1_i
008F        label7
008F  1A54  	BTFSC __div_16_1_00003_1_i,4
0090  0008  	RETURN
0091  1003  	BCF STATUS,C
0092  0DD5  	RLF CompTempVarRet214, F
0093  0DD6  	RLF CompTempVarRet214+D'1', F
0094  0DCC  	RLF __div_16_1_00003_arg_a, F
0095  0DCD  	RLF __div_16_1_00003_arg_a+D'1', F
0096  0DD2  	RLF __div_16_1_00003_1_r, F
0097  0DD3  	RLF __div_16_1_00003_1_r+D'1', F
0098  084F  	MOVF __div_16_1_00003_arg_b+D'1', W
0099  0253  	SUBWF __div_16_1_00003_1_r+D'1', W
009A  1D03  	BTFSS STATUS,Z
009B  289E  	GOTO	label8
009C  084E  	MOVF __div_16_1_00003_arg_b, W
009D  0252  	SUBWF __div_16_1_00003_1_r, W
009E        label8
009E  1C03  	BTFSS STATUS,C
009F  28A7  	GOTO	label9
00A0  084E  	MOVF __div_16_1_00003_arg_b, W
00A1  02D2  	SUBWF __div_16_1_00003_1_r, F
00A2  084F  	MOVF __div_16_1_00003_arg_b+D'1', W
00A3  1C03  	BTFSS STATUS,C
00A4  03D3  	DECF __div_16_1_00003_1_r+D'1', F
00A5  02D3  	SUBWF __div_16_1_00003_1_r+D'1', F
00A6  1455  	BSF CompTempVarRet214,0
00A7        label9
00A7  0AD4  	INCF __div_16_1_00003_1_i, F
00A8  288F  	GOTO	label7
00A9        ; } __div_16_16 function end


02FF        _startup
02FF  30D5  	MOVLW 0xD5
0300  1283  	BCF STATUS, RP0
0301  1303  	BCF STATUS, RP1
0302  00A0  	MOVWF gbl_14_LSR
0303  30C4  	MOVLW 0xC4
0304  00A1  	MOVWF gbl_14_LSR+D'1'
0305  30BB  	MOVLW 0xBB
0306  00A2  	MOVWF gbl_14_LSR+D'2'
0307  30DC  	MOVLW 0xDC
0308  00A3  	MOVWF gbl_14_LSR+D'3'
0309  01A4  	CLRF gbl_15_gbl_aSig
030A  01A5  	CLRF gbl_15_gbl_aSig+D'1'
030B  01A6  	CLRF gbl_15_gbl_aSig+D'2'
030C  01A7  	CLRF gbl_15_gbl_aSig+D'3'
030D  01A8  	CLRF gbl_15_gbl_bSig
030E  01A9  	CLRF gbl_15_gbl_bSig+D'1'
030F  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0310  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0311  01AC  	CLRF gbl_15_gbl_zSig
0312  01AD  	CLRF gbl_15_gbl_zSig+D'1'
0313  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0314  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0315  01C0  	CLRF gbl_15_gbl_aExp
0316  01C1  	CLRF gbl_15_gbl_bExp
0317  01BB  	CLRF gbl_15_gbl_zExp
0318  01BC  	CLRF gbl_15_gbl_zExp+D'1'
0319  01C2  	CLRF gbl_15_gbl_aSign
031A  01C3  	CLRF gbl_15_gbl_bSign
031B  01C4  	CLRF gbl_15_gbl_zSign
031C  01C5  	CLRF gbl_15_gbl_zSigZero
031D  01B0  	CLRF gbl_15_gbl_ret
031E  01B1  	CLRF gbl_15_gbl_ret+D'1'
031F  01B2  	CLRF gbl_15_gbl_ret+D'2'
0320  01B3  	CLRF gbl_15_gbl_ret+D'3'
0321  01BE  	CLRF gbl_float_rounding_mode
0322  01BF  	CLRF gbl_float_exception_flags
0323  01BD  	CLRF gbl_float_detect_tininess

032A  118A  	BCF PCLATH,3
032B  120A  	BCF PCLATH,4
032C  2A4E  	GOTO	main

2007  1E7A  	DW 0x1E7A
