;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
0272  01DB  	CLRF Wdt_Delay__0003E_1_i
0273        label48
0273  085A  	MOVF Wdt_Delay__0003E_arg_delay, W
0274  025B  	SUBWF Wdt_Delay__0003E_1_i, W
0275  1803  	BTFSC STATUS,C
027B  0ADB  	INCF Wdt_Delay__0003E_1_i, F
027C  2A73  	GOTO	label48

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0277  0064  	CLRWDT

        delay_ms(1);
0278  3001  	MOVLW 0x01
0279  00DC  	MOVWF delay_ms_00000_arg_del
027A  2010  	CALL delay_ms_00000

    }
}
0276  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\Thermometer\Flowcode\ThermoTEST.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Tuesday, June 30, 2020 00:19:35
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 1
#define MX_USES_SINT32 1
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 3276800
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f32
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f32);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_display();
void FCM_calc();
void FCM_i2c_comm();


//Variable declarations
#define FCV_TRUE (1)
#define FCV_FALSE (0)
MX_UINT8 FCV_DATA0 = (0xff);
0BF8  30FF  	MOVLW 0xFF
0BF9  00CE  	MOVWF gbl_FCV_DATA0

MX_SINT32 FCV_RAW = (0);
0BFA  01B4  	CLRF gbl_FCV_RAW
0BFB  01B5  	CLRF gbl_FCV_RAW+D'1'
0BFC  01B6  	CLRF gbl_FCV_RAW+D'2'
0BFD  01B7  	CLRF gbl_FCV_RAW+D'3'

MX_UINT8 FCV_TEMP_CDP = (0x0);
0BFE  01CF  	CLRF gbl_FCV_TEMP_CDP

MX_UINT8 FCV_DATA1 = (0xff);
0BFF  30FF  	MOVLW 0xFF
0C00  00D0  	MOVWF gbl_FCV_DATA1

MX_UINT8 FCV_DP2 = (0x0);
0C01  01D1  	CLRF gbl_FCV_DP2

MX_UINT8 FCV_DATA2 = (0xff);
0C02  30FF  	MOVLW 0xFF
0C03  00D2  	MOVWF gbl_FCV_DATA2

MX_FLOAT FCV_FL;
MX_UINT8 FCV_RT_BYTE = (0x1);
0C04  3001  	MOVLW 0x01
0C05  00D3  	MOVWF gbl_FCV_RT_BYTE

MX_UINT8 FCV_LSB = (0x0);
0C06  01D4  	CLRF gbl_FCV_LSB

MX_UINT8 FCV_MSB = (0x0);
0C07  01D5  	CLRF gbl_FCV_MSB

MX_UINT8 FCV_I2C_RX = (0x0);
0C08  01D6  	CLRF gbl_FCV_I2C_RX

MX_SINT32 FCV_TEMP_C = (0);
0C09  01BC  	CLRF gbl_FCV_TEMP_C
0C0A  01BD  	CLRF gbl_FCV_TEMP_C+D'1'
0C0B  01BE  	CLRF gbl_FCV_TEMP_C+D'2'
0C0C  01BF  	CLRF gbl_FCV_TEMP_C+D'3'


MX_UINT8 FCLV_LOOP1;



//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    porta
	#define LCD_1__PORT1    porta
	#define LCD_1__PORT2    porta
	#define LCD_1__PORT3    porta
	#define LCD_1__PORT4    porta
	#define LCD_1__PORT5    porta
	#define LCD_1__TRIS0    trisa
	#define LCD_1__TRIS1    trisa
	#define LCD_1__TRIS2    trisa
	#define LCD_1__TRIS3    trisa
	#define LCD_1__TRIS4    trisa
	#define LCD_1__TRIS5    trisa
	#define LCD_1__BIT0    	0
	#define LCD_1__BIT1    	1
	#define LCD_1__BIT2    	2
	#define LCD_1__BIT3    	3
	#define LCD_1__RS      	4
	#define LCD_1__E       	5
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);


//I2C_Master(0): //Defines:

/**** Macro Substitutions ****
a = Unique component ID
b = I2C Channel - 0=SW, 1-4=HW
c = Baud Rate
d = SM BUS Enable 0/2
e = Slew Rate Enable 0/1
f = Bitbanged Data Port Letter
g = Bitbanged Data Pin
h = Bitbanged Clock Port Letter
i = Bitbanged Clock Pin
******************************/

//BMODE
//Bit 0 - Slew Control
//Bit 1 - SMBus Control

//Definitions for I2C slot allocation
#ifndef	MX_I2C_REF1
	#define MX_I2C_REF1
	#define I2CMASTER_2_MX_I2C_UREF			1
	#define MX_I2C_CHANNEL_1		1
	#define MX_I2C_SDA_PIN_1		4
	#define MX_I2C_SDA_PORT_1		porta
	#define MX_I2C_SDA_TRIS_1		trisa
	#define MX_I2C_SCL_PIN_1		3
	#define MX_I2C_SCL_PORT_1		porta
	#define MX_I2C_SCL_TRIS_1		trisa
	#define MX_I2C_BMODE_1			0 | 0
	#define MX_I2C_BAUD_1			100000
	#define MX_I2C_INT_1			0
#else
 #ifndef MX_I2C_REF2
	#define MX_I2C_REF2
	#define I2CMASTER_2_MX_I2C_UREF			2
	#define MX_I2C_CHANNEL_2		1
	#define MX_I2C_SDA_PIN_2		4
	#define MX_I2C_SDA_PORT_2		porta
	#define MX_I2C_SDA_TRIS_2		trisa
	#define MX_I2C_SCL_PIN_2		3
	#define MX_I2C_SCL_PORT_2		porta
	#define MX_I2C_SCL_TRIS_2		trisa
	#define MX_I2C_BMODE_2			0 | 0
	#define MX_I2C_BAUD_2			100000
	#define MX_I2C_INT_2			0
 #else
  #ifndef MX_I2C_REF3
	#define MX_I2C_REF3
	#define I2CMASTER_2_MX_I2C_UREF			3
	#define MX_I2C_CHANNEL_3		1
	#define MX_I2C_SDA_PIN_3		4
	#define MX_I2C_SDA_PORT_3		porta
	#define MX_I2C_SDA_TRIS_3		trisa
	#define MX_I2C_SCL_PIN_3		3
	#define MX_I2C_SCL_PORT_3		porta
	#define MX_I2C_SCL_TRIS_3		trisa
	#define MX_I2C_BMODE_3			0 | 0
	#define MX_I2C_BAUD_3			100000
	#define MX_I2C_INT_3			0
  #else
   #ifndef MX_I2C_REF4
	#define MX_I2C_REF4
	#define I2CMASTER_2_MX_I2C_UREF			4
	#define MX_I2C_CHANNEL_4		1
	#define MX_I2C_SDA_PIN_4		4
	#define MX_I2C_SDA_PORT_4		porta
	#define MX_I2C_SDA_TRIS_4		trisa
	#define MX_I2C_SCL_PIN_4		3
	#define MX_I2C_SCL_PORT_4		porta
	#define MX_I2C_SCL_TRIS_4		trisa
	#define MX_I2C_BMODE_4			0 | 0
	#define MX_I2C_BAUD_4			100000
	#define MX_I2C_INT_4			0
   #endif
  #endif
 #endif
#endif

#define I2CMASTER_2_I2C_Master_Init		CAL_APPEND(FC_CAL_I2C_Master_Init_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_Uninit	CAL_APPEND(FC_CAL_I2C_Master_Uninit_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_Start		CAL_APPEND(FC_CAL_I2C_Master_Start_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_Restart	CAL_APPEND(FC_CAL_I2C_Master_Restart_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_Stop		CAL_APPEND(FC_CAL_I2C_Master_Stop_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_TX_Byte	CAL_APPEND(FC_CAL_I2C_Master_TX_Byte_, I2CMASTER_2_MX_I2C_UREF)
#define I2CMASTER_2_I2C_Master_RX_Byte	CAL_APPEND(FC_CAL_I2C_Master_RX_Byte_, I2CMASTER_2_MX_I2C_UREF)

extern void I2CMASTER_2_I2C_Master_Init ();
extern void I2CMASTER_2_I2C_Master_Uninit ();
extern void I2CMASTER_2_I2C_Master_Start ();
extern void I2CMASTER_2_I2C_Master_Restart ();
extern void I2CMASTER_2_I2C_Master_Stop ();
extern MX_UINT8 I2CMASTER_2_I2C_Master_TX_Byte (MX_UINT8 Data);
extern MX_UINT8 I2CMASTER_2_I2C_Master_RX_Byte (MX_UINT8 Last);




//I2C_Master(0): //Macro function declarations

void FCD_I2C_Master0_MI2C_Init();
void FCD_I2C_Master0_MI2C_Start();
void FCD_I2C_Master0_MI2C_Restart();
void FCD_I2C_Master0_MI2C_Stop();
MX_UINT8 FCD_I2C_Master0_MI2C_Transmit_Byte(MX_UINT8 Data);
MX_UINT8 FCD_I2C_Master0_MI2C_Receive_Byte(MX_UINT8 Last);
void FCD_I2C_Master0_MI2C_Send_Byte_Transaction(MX_UINT8 Device_ID, MX_UINT8 AddrH, MX_UINT8 AddrL, MX_UINT8 Data);
MX_UINT8 FCD_I2C_Master0_MI2C_Receive_Byte_Transaction(MX_UINT8 Device_ID, MX_UINT8 AddrH, MX_UINT8 AddrL);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
02D5  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
02D6  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
02D7  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
02D8  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
02D9  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
02DA  1285  	BCF gbl_porta,5

		pt = ((in >> 4) & 0x0f);
02DB  0E6B  	SWAPF FCD_LCDDis_0005C_arg_in, W
02DC  390F  	ANDLW 0x0F
02DD  00ED  	MOVWF FCD_LCDDis_0005C_1_pt
02DE  300F  	MOVLW 0x0F
02DF  05ED  	ANDWF FCD_LCDDis_0005C_1_pt, F

		if (pt & 0x01)
02E0  186D  	BTFSC FCD_LCDDis_0005C_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
02E1  1405  	BSF gbl_porta,0

		if (pt & 0x02)
02E2  18ED  	BTFSC FCD_LCDDis_0005C_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
02E3  1485  	BSF gbl_porta,1

		if (pt & 0x04)
02E4  196D  	BTFSC FCD_LCDDis_0005C_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
02E5  1505  	BSF gbl_porta,2

		if (pt & 0x08)
02E6  19ED  	BTFSC FCD_LCDDis_0005C_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
02E7  1585  	BSF gbl_porta,3

		if (mask)
02E8  08EC  	MOVF FCD_LCDDis_0005C_arg_mask, F
02E9  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
02EA  1605  	BSF gbl_porta,4

		LCD_1__DELAY;
02EB  300A  	MOVLW 0x0A
02EC  00EE  	MOVWF delay_10us_00000_arg_del
02ED  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
02EE  1685  	BSF gbl_porta,5

		LCD_1__DELAY;
02EF  300A  	MOVLW 0x0A
02F0  00EE  	MOVWF delay_10us_00000_arg_del
02F1  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
02F2  1285  	BCF gbl_porta,5

		pt = (in & 0x0f);
02F3  300F  	MOVLW 0x0F
02F4  056B  	ANDWF FCD_LCDDis_0005C_arg_in, W
02F5  00ED  	MOVWF FCD_LCDDis_0005C_1_pt

		LCD_1__DELAY;
02F6  300A  	MOVLW 0x0A
02F7  00EE  	MOVWF delay_10us_00000_arg_del
02F8  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
02F9  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
02FA  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
02FB  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
02FC  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
02FD  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
02FE  1285  	BCF gbl_porta,5

		if (pt & 0x01)
02FF  186D  	BTFSC FCD_LCDDis_0005C_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0300  1405  	BSF gbl_porta,0

		if (pt & 0x02)
0301  18ED  	BTFSC FCD_LCDDis_0005C_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0302  1485  	BSF gbl_porta,1

		if (pt & 0x04)
0303  196D  	BTFSC FCD_LCDDis_0005C_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
0304  1505  	BSF gbl_porta,2

		if (pt & 0x08)
0305  19ED  	BTFSC FCD_LCDDis_0005C_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
0306  1585  	BSF gbl_porta,3

		if (mask)
0307  08EC  	MOVF FCD_LCDDis_0005C_arg_mask, F
0308  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
0309  1605  	BSF gbl_porta,4

		LCD_1__DELAY;
030A  300A  	MOVLW 0x0A
030B  00EE  	MOVWF delay_10us_00000_arg_del
030C  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
030D  1685  	BSF gbl_porta,5

		LCD_1__DELAY;
030E  300A  	MOVLW 0x0A
030F  00EE  	MOVWF delay_10us_00000_arg_del
0310  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0311  1285  	BCF gbl_porta,5

		LCD_1__DELAY;
0312  300A  	MOVLW 0x0A
0313  00EE  	MOVWF delay_10us_00000_arg_del
0314  201C  	CALL delay_10us_00000


}
0315  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
0B56  1683  	BSF STATUS, RP0
0B57  1303  	BCF STATUS, RP1
0B58  1005  	BCF gbl_trisa,0
0B59  1283  	BCF STATUS, RP0
0B5A  1005  	BCF gbl_porta,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
0B5B  1683  	BSF STATUS, RP0
0B5C  1085  	BCF gbl_trisa,1
0B5D  1283  	BCF STATUS, RP0
0B5E  1085  	BCF gbl_porta,1

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
0B5F  1683  	BSF STATUS, RP0
0B60  1105  	BCF gbl_trisa,2
0B61  1283  	BCF STATUS, RP0
0B62  1105  	BCF gbl_porta,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
0B63  1683  	BSF STATUS, RP0
0B64  1185  	BCF gbl_trisa,3
0B65  1283  	BCF STATUS, RP0
0B66  1185  	BCF gbl_porta,3

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
0B67  1683  	BSF STATUS, RP0
0B68  1205  	BCF gbl_trisa,4
0B69  1283  	BCF STATUS, RP0
0B6A  1205  	BCF gbl_porta,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
0B6B  1683  	BSF STATUS, RP0
0B6C  1285  	BCF gbl_trisa,5
0B6D  1283  	BCF STATUS, RP0
0B6E  1285  	BCF gbl_porta,5


		Wdt_Delay_Ms(12);
0B6F  300C  	MOVLW 0x0C
0B70  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0B71  118A  	BCF PCLATH,3
0B72  2272  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
0B73  3033  	MOVLW 0x33
0B74  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0B75  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0B76  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0B77  3002  	MOVLW 0x02
0B78  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0B79  2272  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
0B7A  3033  	MOVLW 0x33
0B7B  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0B7C  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0B7D  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0B7E  3002  	MOVLW 0x02
0B7F  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0B80  2272  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
0B81  3032  	MOVLW 0x32
0B82  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0B83  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0B84  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0B85  3002  	MOVLW 0x02
0B86  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0B87  2272  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
0B88  302C  	MOVLW 0x2C
0B89  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0B8A  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0B8B  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0B8C  3002  	MOVLW 0x02
0B8D  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0B8E  2272  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
0B8F  3006  	MOVLW 0x06
0B90  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0B91  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0B92  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0B93  3002  	MOVLW 0x02
0B94  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0B95  2272  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
0B96  300C  	MOVLW 0x0C
0B97  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0B98  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0B99  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0B9A  3002  	MOVLW 0x02
0B9B  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0B9C  2272  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
0B9D  3001  	MOVLW 0x01
0B9E  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0B9F  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0BA0  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0BA1  3002  	MOVLW 0x02
0BA2  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0BA3  2272  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0BA4  3002  	MOVLW 0x02
0BA5  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0BA6  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0BA7  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0BA8  3002  	MOVLW 0x02
0BA9  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0BAA  2272  	CALL Wdt_Delay__0003E


}
0BAB  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
091A  3001  	MOVLW 0x01
091B  1283  	BCF STATUS, RP0
091C  1303  	BCF STATUS, RP1
091D  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
091E  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
091F  118A  	BCF PCLATH,3
0920  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0921  3002  	MOVLW 0x02
0922  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0923  2272  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0924  3002  	MOVLW 0x02
0925  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0926  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0927  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0928  3002  	MOVLW 0x02
0929  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
092A  2272  	CALL Wdt_Delay__0003E


}
092B  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
08FB  08D9  	MOVF FCD_LCDDis_00053_arg_y, F
08FC  1D03  	BTFSS STATUS,Z
08FD  2901  	GOTO	label179
0901        label179

			y=0x80;
08FE  3080  	MOVLW 0x80
08FF  00D9  	MOVWF FCD_LCDDis_00053_arg_y

		else if (y==1)
0900  2910  	GOTO	label182
0901  0359  	DECF FCD_LCDDis_00053_arg_y, W
0902  1D03  	BTFSS STATUS,Z
0903  2907  	GOTO	label180
0907        label180

			y=0xc0;
0904  30C0  	MOVLW 0xC0
0905  00D9  	MOVWF FCD_LCDDis_00053_arg_y


		#if (LCD_1__COLCNT == 16)
			else if (y==2)
0906  2910  	GOTO	label182
0907  0859  	MOVF FCD_LCDDis_00053_arg_y, W
0908  3A02  	XORLW 0x02
0909  1D03  	BTFSS STATUS,Z
090A  290E  	GOTO	label181
090E        label181

				y=0x90;
090B  3090  	MOVLW 0x90
090C  00D9  	MOVWF FCD_LCDDis_00053_arg_y

			else
090D  2910  	GOTO	label182
0910        label182

				y=0xd0;
090E  30D0  	MOVLW 0xD0
090F  00D9  	MOVWF FCD_LCDDis_00053_arg_y

		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
0910  0858  	MOVF FCD_LCDDis_00053_arg_x, W
0911  0759  	ADDWF FCD_LCDDis_00053_arg_y, W
0912  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0913  01EC  	CLRF FCD_LCDDis_0005C_arg_mask
0914  118A  	BCF PCLATH,3
0915  22D5  	CALL FCD_LCDDis_0005C

		Wdt_Delay_Ms(2);
0916  3002  	MOVLW 0x02
0917  00DA  	MOVWF Wdt_Delay__0003E_arg_delay
0918  2272  	CALL Wdt_Delay__0003E


}
0919  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)

{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
07DD  1FD9  	BTFSS FCD_LCDDis_00055_arg_Number+D'1',7
07DE  2FEC  	GOTO	label157
07EC        label157

		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
07DF  302D  	MOVLW 0x2D
07E0  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
07E1  3010  	MOVLW 0x10
07E2  00EC  	MOVWF FCD_LCDDis_0005C_arg_mask
07E3  22D5  	CALL FCD_LCDDis_0005C

			Number = 0 - Number;
07E4  0858  	MOVF FCD_LCDDis_00055_arg_Number, W
07E5  3C00  	SUBLW 0x00
07E6  00DD  	MOVWF CompTempVar2215
07E7  09D9  	COMF FCD_LCDDis_00055_arg_Number+D'1', F
07E8  1803  	BTFSC STATUS,C
07E9  0AD9  	INCF FCD_LCDDis_00055_arg_Number+D'1', F
07EA  085D  	MOVF CompTempVar2215, W
07EB  00D8  	MOVWF FCD_LCDDis_00055_arg_Number

		}

		tmp_int = Number;
07EC  0858  	MOVF FCD_LCDDis_00055_arg_Number, W
07ED  00DA  	MOVWF FCD_LCDDis_00055_1_tmp_int
07EE  0859  	MOVF FCD_LCDDis_00055_arg_Number+D'1', W
07EF  00DB  	MOVWF FCD_LCDDis_00055_1_tmp_int+D'1'

		if (Number >= 10000)
07F0  3027  	MOVLW 0x27
07F1  0259  	SUBWF FCD_LCDDis_00055_arg_Number+D'1', W
07F2  1D03  	BTFSS STATUS,Z
07F3  2FF6  	GOTO	label158
07F4  3010  	MOVLW 0x10
07F5  0258  	SUBWF FCD_LCDDis_00055_arg_Number, W
07F6        label158
07F6  158A  	BSF PCLATH,3
07F7  1C03  	BTFSS STATUS,C
07F8  2829  	GOTO	label162
07F9  1BD9  	BTFSC FCD_LCDDis_00055_arg_Number+D'1',7
07FA  2829  	GOTO	label162

		{
			tmp_byte = tmp_int / 10000;
07FB  01E1  	CLRF CompTempVar2218
07FC  085A  	MOVF FCD_LCDDis_00055_1_tmp_int, W
07FD  00DD  	MOVWF __div_16_1_00003_arg_a
07FE  085B  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', W
07FF  00DE  	MOVWF __div_16_1_00003_arg_a+D'1'
0800  1FDB  	BTFSS FCD_LCDDis_00055_1_tmp_int+D'1',7
0801  2808  	GOTO	label159
0802  09DD  	COMF __div_16_1_00003_arg_a, F
0803  09DE  	COMF __div_16_1_00003_arg_a+D'1', F
0804  0ADD  	INCF __div_16_1_00003_arg_a, F
0805  1903  	BTFSC STATUS,Z
0806  0ADE  	INCF __div_16_1_00003_arg_a+D'1', F
0807  0AE1  	INCF CompTempVar2218, F
0808        label159
0808  3010  	MOVLW 0x10
0809  00DF  	MOVWF __div_16_1_00003_arg_b
080A  3027  	MOVLW 0x27
080B  00E0  	MOVWF __div_16_1_00003_arg_b+D'1'
080C  118A  	BCF PCLATH,3
080D  2253  	CALL __div_16_1_00003
080E  0866  	MOVF CompTempVarRet214, W
080F  00DC  	MOVWF FCD_LCDDis_00055_1_tmp_byte
0810  158A  	BSF PCLATH,3
0811  1C61  	BTFSS CompTempVar2218,0
0812  2815  	GOTO	label160
0813  09DC  	COMF FCD_LCDDis_00055_1_tmp_byte, F
0814  0ADC  	INCF FCD_LCDDis_00055_1_tmp_byte, F
0815        label160

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0815  085C  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
0816  3E30  	ADDLW 0x30
0817  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0818  3010  	MOVLW 0x10
0819  00EC  	MOVWF FCD_LCDDis_0005C_arg_mask
081A  118A  	BCF PCLATH,3
081B  22D5  	CALL FCD_LCDDis_0005C


			while (tmp_byte > 0)
081C        label161
081C  085C  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
081D  3C00  	SUBLW 0x00
081E  158A  	BSF PCLATH,3
081F  1803  	BTFSC STATUS,C
0820  2829  	GOTO	label162
0828  281C  	GOTO	label161
0829        label162

			{
				tmp_int = tmp_int - 10000;
0821  3010  	MOVLW 0x10
0822  02DA  	SUBWF FCD_LCDDis_00055_1_tmp_int, F
0823  3027  	MOVLW 0x27
0824  1C03  	BTFSS STATUS,C
0825  3028  	MOVLW 0x28
0826  02DB  	SUBWF FCD_LCDDis_00055_1_tmp_int+D'1', F

				tmp_byte--;
0827  03DC  	DECF FCD_LCDDis_00055_1_tmp_byte, F

			}
		}
		if (Number >= 1000)
0829  3003  	MOVLW 0x03
082A  0259  	SUBWF FCD_LCDDis_00055_arg_Number+D'1', W
082B  1D03  	BTFSS STATUS,Z
082C  282F  	GOTO	label163
082D  30E8  	MOVLW 0xE8
082E  0258  	SUBWF FCD_LCDDis_00055_arg_Number, W
082F        label163
082F  1C03  	BTFSS STATUS,C
0830  2863  	GOTO	label167
0831  1BD9  	BTFSC FCD_LCDDis_00055_arg_Number+D'1',7
0832  2863  	GOTO	label167

		{
			tmp_byte = tmp_int / 1000;
0833  01E2  	CLRF CompTempVar2222
0834  085A  	MOVF FCD_LCDDis_00055_1_tmp_int, W
0835  00DD  	MOVWF __div_16_1_00003_arg_a
0836  085B  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', W
0837  00DE  	MOVWF __div_16_1_00003_arg_a+D'1'
0838  1FDB  	BTFSS FCD_LCDDis_00055_1_tmp_int+D'1',7
0839  2840  	GOTO	label164
083A  09DD  	COMF __div_16_1_00003_arg_a, F
083B  09DE  	COMF __div_16_1_00003_arg_a+D'1', F
083C  0ADD  	INCF __div_16_1_00003_arg_a, F
083D  1903  	BTFSC STATUS,Z
083E  0ADE  	INCF __div_16_1_00003_arg_a+D'1', F
083F  0AE2  	INCF CompTempVar2222, F
0840        label164
0840  30E8  	MOVLW 0xE8
0841  00DF  	MOVWF __div_16_1_00003_arg_b
0842  3003  	MOVLW 0x03
0843  00E0  	MOVWF __div_16_1_00003_arg_b+D'1'
0844  118A  	BCF PCLATH,3
0845  2253  	CALL __div_16_1_00003
0846  0866  	MOVF CompTempVarRet214, W
0847  00E1  	MOVWF CompTempVar2221
0848  158A  	BSF PCLATH,3
0849  1C62  	BTFSS CompTempVar2222,0
084A  284D  	GOTO	label165
084B  09E1  	COMF CompTempVar2221, F
084C  0AE1  	INCF CompTempVar2221, F
084D        label165
084D  0861  	MOVF CompTempVar2221, W
084E  00DC  	MOVWF FCD_LCDDis_00055_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
084F  085C  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
0850  3E30  	ADDLW 0x30
0851  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
0852  3010  	MOVLW 0x10
0853  00EC  	MOVWF FCD_LCDDis_0005C_arg_mask
0854  118A  	BCF PCLATH,3
0855  22D5  	CALL FCD_LCDDis_0005C


			while (tmp_byte > 0)
0856        label166
0856  085C  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
0857  3C00  	SUBLW 0x00
0858  158A  	BSF PCLATH,3
0859  1803  	BTFSC STATUS,C
085A  2863  	GOTO	label167
0862  2856  	GOTO	label166
0863        label167

			{
				tmp_int = tmp_int - 1000;
085B  30E8  	MOVLW 0xE8
085C  02DA  	SUBWF FCD_LCDDis_00055_1_tmp_int, F
085D  3003  	MOVLW 0x03
085E  1C03  	BTFSS STATUS,C
085F  3004  	MOVLW 0x04
0860  02DB  	SUBWF FCD_LCDDis_00055_1_tmp_int+D'1', F

				tmp_byte--;
0861  03DC  	DECF FCD_LCDDis_00055_1_tmp_byte, F

			}
		}
		if (Number >= 100)
0863  0859  	MOVF FCD_LCDDis_00055_arg_Number+D'1', W
0864  3A80  	XORLW 0x80
0865  00DD  	MOVWF CompTempVar2225
0866  3080  	MOVLW 0x80
0867  025D  	SUBWF CompTempVar2225, W
0868  1D03  	BTFSS STATUS,Z
0869  286C  	GOTO	label168
086A  3064  	MOVLW 0x64
086B  0258  	SUBWF FCD_LCDDis_00055_arg_Number, W
086C        label168
086C  1C03  	BTFSS STATUS,C
086D  289C  	GOTO	label172

		{
			tmp_byte = tmp_int / 100;
086E  01E2  	CLRF CompTempVar2227
086F  085A  	MOVF FCD_LCDDis_00055_1_tmp_int, W
0870  00DD  	MOVWF __div_16_1_00003_arg_a
0871  085B  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', W
0872  00DE  	MOVWF __div_16_1_00003_arg_a+D'1'
0873  1FDB  	BTFSS FCD_LCDDis_00055_1_tmp_int+D'1',7
0874  287B  	GOTO	label169
0875  09DD  	COMF __div_16_1_00003_arg_a, F
0876  09DE  	COMF __div_16_1_00003_arg_a+D'1', F
0877  0ADD  	INCF __div_16_1_00003_arg_a, F
0878  1903  	BTFSC STATUS,Z
0879  0ADE  	INCF __div_16_1_00003_arg_a+D'1', F
087A  0AE2  	INCF CompTempVar2227, F
087B        label169
087B  3064  	MOVLW 0x64
087C  00DF  	MOVWF __div_16_1_00003_arg_b
087D  01E0  	CLRF __div_16_1_00003_arg_b+D'1'
087E  118A  	BCF PCLATH,3
087F  2253  	CALL __div_16_1_00003
0880  0866  	MOVF CompTempVarRet214, W
0881  00E1  	MOVWF CompTempVar2226
0882  158A  	BSF PCLATH,3
0883  1C62  	BTFSS CompTempVar2227,0
0884  2887  	GOTO	label170
0885  09E1  	COMF CompTempVar2226, F
0886  0AE1  	INCF CompTempVar2226, F
0887        label170
0887  0861  	MOVF CompTempVar2226, W
0888  00DC  	MOVWF FCD_LCDDis_00055_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0889  085C  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
088A  3E30  	ADDLW 0x30
088B  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
088C  3010  	MOVLW 0x10
088D  00EC  	MOVWF FCD_LCDDis_0005C_arg_mask
088E  118A  	BCF PCLATH,3
088F  22D5  	CALL FCD_LCDDis_0005C


			while (tmp_byte > 0)
0890        label171
0890  085C  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
0891  3C00  	SUBLW 0x00
0892  158A  	BSF PCLATH,3
0893  1803  	BTFSC STATUS,C
0894  289C  	GOTO	label172
089B  2890  	GOTO	label171
089C        label172

			{
				tmp_int = tmp_int - 100;
0895  3064  	MOVLW 0x64
0896  02DA  	SUBWF FCD_LCDDis_00055_1_tmp_int, F
0897  08DB  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', F
0898  1C03  	BTFSS STATUS,C
0899  03DB  	DECF FCD_LCDDis_00055_1_tmp_int+D'1', F

				tmp_byte--;
089A  03DC  	DECF FCD_LCDDis_00055_1_tmp_byte, F

			}
		}
		if (Number >= 10)
089C  0859  	MOVF FCD_LCDDis_00055_arg_Number+D'1', W
089D  3A80  	XORLW 0x80
089E  00DD  	MOVWF CompTempVar2230
089F  3080  	MOVLW 0x80
08A0  025D  	SUBWF CompTempVar2230, W
08A1  1D03  	BTFSS STATUS,Z
08A2  28A5  	GOTO	label173
08A3  300A  	MOVLW 0x0A
08A4  0258  	SUBWF FCD_LCDDis_00055_arg_Number, W
08A5        label173
08A5  1C03  	BTFSS STATUS,C
08A6  28D5  	GOTO	label177

		{
			tmp_byte = tmp_int / 10;
08A7  01E2  	CLRF CompTempVar2232
08A8  085A  	MOVF FCD_LCDDis_00055_1_tmp_int, W
08A9  00DD  	MOVWF __div_16_1_00003_arg_a
08AA  085B  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', W
08AB  00DE  	MOVWF __div_16_1_00003_arg_a+D'1'
08AC  1FDB  	BTFSS FCD_LCDDis_00055_1_tmp_int+D'1',7
08AD  28B4  	GOTO	label174
08AE  09DD  	COMF __div_16_1_00003_arg_a, F
08AF  09DE  	COMF __div_16_1_00003_arg_a+D'1', F
08B0  0ADD  	INCF __div_16_1_00003_arg_a, F
08B1  1903  	BTFSC STATUS,Z
08B2  0ADE  	INCF __div_16_1_00003_arg_a+D'1', F
08B3  0AE2  	INCF CompTempVar2232, F
08B4        label174
08B4  300A  	MOVLW 0x0A
08B5  00DF  	MOVWF __div_16_1_00003_arg_b
08B6  01E0  	CLRF __div_16_1_00003_arg_b+D'1'
08B7  118A  	BCF PCLATH,3
08B8  2253  	CALL __div_16_1_00003
08B9  0866  	MOVF CompTempVarRet214, W
08BA  00E1  	MOVWF CompTempVar2231
08BB  158A  	BSF PCLATH,3
08BC  1C62  	BTFSS CompTempVar2232,0
08BD  28C0  	GOTO	label175
08BE  09E1  	COMF CompTempVar2231, F
08BF  0AE1  	INCF CompTempVar2231, F
08C0        label175
08C0  0861  	MOVF CompTempVar2231, W
08C1  00DC  	MOVWF FCD_LCDDis_00055_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
08C2  085C  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
08C3  3E30  	ADDLW 0x30
08C4  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
08C5  3010  	MOVLW 0x10
08C6  00EC  	MOVWF FCD_LCDDis_0005C_arg_mask
08C7  118A  	BCF PCLATH,3
08C8  22D5  	CALL FCD_LCDDis_0005C


			while (tmp_byte > 0)
08C9        label176
08C9  085C  	MOVF FCD_LCDDis_00055_1_tmp_byte, W
08CA  3C00  	SUBLW 0x00
08CB  158A  	BSF PCLATH,3
08CC  1803  	BTFSC STATUS,C
08CD  28D5  	GOTO	label177
08D4  28C9  	GOTO	label176
08D5        label177

			{
				tmp_int = tmp_int - 10;
08CE  300A  	MOVLW 0x0A
08CF  02DA  	SUBWF FCD_LCDDis_00055_1_tmp_int, F
08D0  08DB  	MOVF FCD_LCDDis_00055_1_tmp_int+D'1', F
08D1  1C03  	BTFSS STATUS,C
08D2  03DB  	DECF FCD_LCDDis_00055_1_tmp_int+D'1', F

				tmp_byte--;
08D3  03DC  	DECF FCD_LCDDis_00055_1_tmp_byte, F

			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);
08D5  085A  	MOVF FCD_LCDDis_00055_1_tmp_int, W
08D6  3E30  	ADDLW 0x30
08D7  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
08D8  3010  	MOVLW 0x10
08D9  00EC  	MOVWF FCD_LCDDis_0005C_arg_mask
08DA  118A  	BCF PCLATH,3
08DB  22D5  	CALL FCD_LCDDis_0005C


}
08DC  0008  	RETURN


void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
08DD  01EA  	CLRF FCD_LCDDis_00054_1_idx


		for (idx=0; idx<MSZ_String; idx++)
08DE  01EA  	CLRF FCD_LCDDis_00054_1_idx
08DF        label178
08DF  0869  	MOVF FCD_LCDDis_00054_arg_MSZ_String, W
08E0  026A  	SUBWF FCD_LCDDis_00054_1_idx, W
08E1  1803  	BTFSC STATUS,C
08F8  0AEA  	INCF FCD_LCDDis_00054_1_idx, F
08F9  158A  	BSF PCLATH,3
08FA  28DF  	GOTO	label178

		{
			if (String[idx] == 0)
08E3  1383  	BCF STATUS,IRP
08E4  1859  	BTFSC FCD_LCDDis_00054_arg_String+D'1',0
08E5  1783  	BSF STATUS,IRP
08E6  0858  	MOVF FCD_LCDDis_00054_arg_String, W
08E7  076A  	ADDWF FCD_LCDDis_00054_1_idx, W
08E8  0084  	MOVWF FSR
08E9  0880  	MOVF INDF, F
08EA  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
08EC  1383  	BCF STATUS,IRP
08ED  1859  	BTFSC FCD_LCDDis_00054_arg_String+D'1',0
08EE  1783  	BSF STATUS,IRP
08EF  0858  	MOVF FCD_LCDDis_00054_arg_String, W
08F0  076A  	ADDWF FCD_LCDDis_00054_1_idx, W
08F1  0084  	MOVWF FSR
08F2  0800  	MOVF INDF, W
08F3  00EB  	MOVWF FCD_LCDDis_0005C_arg_in
08F4  3010  	MOVLW 0x10
08F5  00EC  	MOVWF FCD_LCDDis_0005C_arg_mask
08F6  118A  	BCF PCLATH,3
08F7  22D5  	CALL FCD_LCDDis_0005C

		}

}
08E2  0008  	RETURN
08EB  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}



//I2C_Master(0): //Macro implementations


void FCD_I2C_Master0_MI2C_Init()

{
	
		I2CMASTER_2_I2C_Master_Init();
0BAC  118A  	BCF PCLATH,3
0BAD  27CE  	CALL FC_CAL_I2C_00064


}
0BAE  0008  	RETURN


void FCD_I2C_Master0_MI2C_Start()

{
	
		I2CMASTER_2_I2C_Master_Start();
0940  118A  	BCF PCLATH,3
0941  22CD  	CALL FC_CAL_I2C_00066


}
0942  0008  	RETURN


void FCD_I2C_Master0_MI2C_Restart()

{
	
		I2CMASTER_2_I2C_Master_Restart();
0936  118A  	BCF PCLATH,3
0937  22C5  	CALL FC_CAL_I2C_00067


}
0938  0008  	RETURN


void FCD_I2C_Master0_MI2C_Stop()

{
	
		I2CMASTER_2_I2C_Master_Stop();
092C  118A  	BCF PCLATH,3
092D  22B9  	CALL FC_CAL_I2C_00068


}
092E  0008  	RETURN


MX_UINT8 FCD_I2C_Master0_MI2C_Transmit_Byte(MX_UINT8 Data)

{
	
		return I2CMASTER_2_I2C_Master_TX_Byte(Data);
0939  0858  	MOVF FCD_I2C_Ma_00058_arg_Data, W
093A  00D9  	MOVWF FC_CAL_I2C_00069_arg_Data
093B  118A  	BCF PCLATH,3
093C  22AA  	CALL FC_CAL_I2C_00069
093D  085A  	MOVF CompTempVarRet2266, W
093E  00D9  	MOVWF CompTempVarRet2259


}
093F  0008  	RETURN


MX_UINT8 FCD_I2C_Master0_MI2C_Receive_Byte(MX_UINT8 Last)

{
	
		return I2CMASTER_2_I2C_Master_RX_Byte(Last);
092F  0858  	MOVF FCD_I2C_Ma_0005A_arg_Last, W
0930  00D9  	MOVWF FC_CAL_I2C_0006A_arg_Last
0931  118A  	BCF PCLATH,3
0932  2295  	CALL FC_CAL_I2C_0006A
0933  085A  	MOVF CompTempVarRet2267, W
0934  00D9  	MOVWF CompTempVarRet2260


}
0935  0008  	RETURN


void FCD_I2C_Master0_MI2C_Send_Byte_Transaction(MX_UINT8 Device_ID, MX_UINT8 AddrH, MX_UINT8 AddrL, MX_UINT8 Data)
{
	
		Device_ID = Device_ID << 1;					//Shift Device ID to enable write mode

		I2CMASTER_2_I2C_Master_Start();						//Start transaction
		I2CMASTER_2_I2C_Master_TX_Byte(Device_ID);			//Transmit Device Address
		I2CMASTER_2_I2C_Master_TX_Byte(AddrH);				//Transmit Internal Address
		I2CMASTER_2_I2C_Master_TX_Byte(AddrL);
		I2CMASTER_2_I2C_Master_TX_Byte(Data);				//Send Data byte
		I2CMASTER_2_I2C_Master_Stop();						//Stop Transaction

}

MX_UINT8 FCD_I2C_Master0_MI2C_Receive_Byte_Transaction(MX_UINT8 Device_ID, MX_UINT8 AddrH, MX_UINT8 AddrL)
{
	
		MX_UINT8 RetVal = 0;
		Device_ID = Device_ID << 1;					//Shift Device ID to enable write mode

		I2CMASTER_2_I2C_Master_Start();						//Start transaction
		I2CMASTER_2_I2C_Master_TX_Byte(Device_ID);			//Transmit Device Address
		I2CMASTER_2_I2C_Master_TX_Byte(AddrH);				//Transmit Internal Address
		I2CMASTER_2_I2C_Master_TX_Byte(AddrL);
		I2CMASTER_2_I2C_Master_Restart();					//Restart transaction

		Device_ID = Device_ID | 0x01;				//Change Device ID to read mode
		I2CMASTER_2_I2C_Master_TX_Byte(Device_ID);			//Transmit Device Address
		RetVal = I2CMASTER_2_I2C_Master_RX_Byte(1);			//Read data at address
		I2CMASTER_2_I2C_Master_Stop();						//Stop Transaction

		return RetVal;								//Return data

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_display()

{

	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0978  211A  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: Cursor(0, 0)
	FCD_LCDDisplay0_Cursor(0, 0);
0979  01D8  	CLRF FCD_LCDDis_00053_arg_x
097A  01D9  	CLRF FCD_LCDDis_00053_arg_y
097B  158A  	BSF PCLATH,3
097C  20FB  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("Thermal TEST")
	FCD_LCDDisplay0_PrintString("Thermal TEST", 12);
097D  3020  	MOVLW 0x20
097E  00E1  	MOVWF CompTempVar2195+D'7'
097F  3045  	MOVLW 0x45
0980  00E3  	MOVWF CompTempVar2195+D'9'
0981  3053  	MOVLW 0x53
0982  00E4  	MOVWF CompTempVar2195+D'10'
0983  3054  	MOVLW 0x54
0984  00DA  	MOVWF CompTempVar2195
0985  00E2  	MOVWF CompTempVar2195+D'8'
0986  00E5  	MOVWF CompTempVar2195+D'11'
0987  3061  	MOVLW 0x61
0988  00DF  	MOVWF CompTempVar2195+D'5'
0989  3065  	MOVLW 0x65
098A  00DC  	MOVWF CompTempVar2195+D'2'
098B  3068  	MOVLW 0x68
098C  00DB  	MOVWF CompTempVar2195+D'1'
098D  306C  	MOVLW 0x6C
098E  00E0  	MOVWF CompTempVar2195+D'6'
098F  306D  	MOVLW 0x6D
0990  00DE  	MOVWF CompTempVar2195+D'4'
0991  3072  	MOVLW 0x72
0992  00DD  	MOVWF CompTempVar2195+D'3'
0993  01E6  	CLRF CompTempVar2195+D'12'
0994  3000  	MOVLW HIGH(CompTempVar2195+D'0')
0995  00D9  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0996  305A  	MOVLW LOW(CompTempVar2195+D'0')
0997  00D8  	MOVWF FCD_LCDDis_00054_arg_String
0998  300C  	MOVLW 0x0C
0999  00E9  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
099A  158A  	BSF PCLATH,3
099B  20DD  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: Cursor(0, 1)
	FCD_LCDDisplay0_Cursor(0, 1);
099C  01D8  	CLRF FCD_LCDDis_00053_arg_x
099D  3001  	MOVLW 0x01
099E  00D9  	MOVWF FCD_LCDDis_00053_arg_y
099F  20FB  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("Temp:")
	FCD_LCDDisplay0_PrintString("Temp:", 5);
09A0  3054  	MOVLW 0x54
09A1  00DA  	MOVWF CompTempVar2197
09A2  3065  	MOVLW 0x65
09A3  00DB  	MOVWF CompTempVar2197+D'1'
09A4  306D  	MOVLW 0x6D
09A5  00DC  	MOVWF CompTempVar2197+D'2'
09A6  3070  	MOVLW 0x70
09A7  00DD  	MOVWF CompTempVar2197+D'3'
09A8  303A  	MOVLW 0x3A
09A9  00DE  	MOVWF CompTempVar2197+D'4'
09AA  01DF  	CLRF CompTempVar2197+D'5'
09AB  3000  	MOVLW HIGH(CompTempVar2197+D'0')
09AC  00D9  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
09AD  305A  	MOVLW LOW(CompTempVar2197+D'0')
09AE  00D8  	MOVWF FCD_LCDDis_00054_arg_String
09AF  3005  	MOVLW 0x05
09B0  00E9  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
09B1  158A  	BSF PCLATH,3
09B2  20DD  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: PrintNumber(temp_c)
	FCD_LCDDisplay0_PrintNumber(FCV_TEMP_C);
09B3  083C  	MOVF gbl_FCV_TEMP_C, W
09B4  00D8  	MOVWF FCD_LCDDis_00055_arg_Number
09B5  083D  	MOVF gbl_FCV_TEMP_C+D'1', W
09B6  00D9  	MOVWF FCD_LCDDis_00055_arg_Number+D'1'
09B7  118A  	BCF PCLATH,3
09B8  27DD  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: PrintString(".")
	FCD_LCDDisplay0_PrintString(".", 1);
09B9  302E  	MOVLW 0x2E
09BA  00DA  	MOVWF CompTempVar2199
09BB  01DB  	CLRF CompTempVar2199+D'1'
09BC  3000  	MOVLW HIGH(CompTempVar2199+D'0')
09BD  00D9  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
09BE  305A  	MOVLW LOW(CompTempVar2199+D'0')
09BF  00D8  	MOVWF FCD_LCDDis_00054_arg_String
09C0  3001  	MOVLW 0x01
09C1  00E9  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
09C2  158A  	BSF PCLATH,3
09C3  20DD  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: PrintNumber(temp_cdp)
	FCD_LCDDisplay0_PrintNumber(FCV_TEMP_CDP);
09C4  084F  	MOVF gbl_FCV_TEMP_CDP, W
09C5  00D8  	MOVWF FCD_LCDDis_00055_arg_Number
09C6  01D9  	CLRF FCD_LCDDis_00055_arg_Number+D'1'
09C7  118A  	BCF PCLATH,3
09C8  27DD  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: Cursor(10, 1)
	FCD_LCDDisplay0_Cursor(10, 1);
09C9  300A  	MOVLW 0x0A
09CA  00D8  	MOVWF FCD_LCDDis_00053_arg_x
09CB  3001  	MOVLW 0x01
09CC  00D9  	MOVWF FCD_LCDDis_00053_arg_y
09CD  158A  	BSF PCLATH,3
09CE  20FB  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("C")
	FCD_LCDDisplay0_PrintString("C", 1);
09CF  3043  	MOVLW 0x43
09D0  00DA  	MOVWF CompTempVar2201
09D1  01DB  	CLRF CompTempVar2201+D'1'
09D2  3000  	MOVLW HIGH(CompTempVar2201+D'0')
09D3  00D9  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
09D4  305A  	MOVLW LOW(CompTempVar2201+D'0')
09D5  00D8  	MOVWF FCD_LCDDis_00054_arg_String
09D6  3001  	MOVLW 0x01
09D7  00E9  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
09D8  158A  	BSF PCLATH,3
09D9  20DD  	CALL FCD_LCDDis_00054


	//Decision
	//Decision: temp_c > 37?
	if (FCV_TEMP_C > 37)
09DA  083F  	MOVF gbl_FCV_TEMP_C+D'3', W
09DB  3C00  	SUBLW 0x00
09DC  1D03  	BTFSS STATUS,Z
09DD  29E8  	GOTO	label183
09DE  083E  	MOVF gbl_FCV_TEMP_C+D'2', W
09DF  3C00  	SUBLW 0x00
09E0  1D03  	BTFSS STATUS,Z
09E1  29E8  	GOTO	label183
09E2  083D  	MOVF gbl_FCV_TEMP_C+D'1', W
09E3  3C00  	SUBLW 0x00
09E4  1D03  	BTFSS STATUS,Z
09E5  29E8  	GOTO	label183
09E6  083C  	MOVF gbl_FCV_TEMP_C, W
09E7  3C25  	SUBLW 0x25
09E8        label183
09E8  1BBF  	BTFSC gbl_FCV_TEMP_C+D'3',7
09E9  1403  	BSF STATUS,C
09EA  1803  	BTFSC STATUS,C
09EB  2A27  	GOTO	label184
0A27        label184

	{

		//Call Component Macro
		//Call Component Macro: Cursor(2, 2)
		FCD_LCDDisplay0_Cursor(2, 2);
09EC  3002  	MOVLW 0x02
09ED  00D8  	MOVWF FCD_LCDDis_00053_arg_x
09EE  00D9  	MOVWF FCD_LCDDis_00053_arg_y
09EF  20FB  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: PrintString("COVID 19 RISK!")
		FCD_LCDDisplay0_PrintString("COVID 19 RISK!", 14);
09F0  3020  	MOVLW 0x20
09F1  00DF  	MOVWF CompTempVar2203+D'5'
09F2  00E2  	MOVWF CompTempVar2203+D'8'
09F3  3021  	MOVLW 0x21
09F4  00E7  	MOVWF CompTempVar2203+D'13'
09F5  3031  	MOVLW 0x31
09F6  00E0  	MOVWF CompTempVar2203+D'6'
09F7  3039  	MOVLW 0x39
09F8  00E1  	MOVWF CompTempVar2203+D'7'
09F9  3043  	MOVLW 0x43
09FA  00DA  	MOVWF CompTempVar2203
09FB  3044  	MOVLW 0x44
09FC  00DE  	MOVWF CompTempVar2203+D'4'
09FD  3049  	MOVLW 0x49
09FE  00DD  	MOVWF CompTempVar2203+D'3'
09FF  00E4  	MOVWF CompTempVar2203+D'10'
0A00  304B  	MOVLW 0x4B
0A01  00E6  	MOVWF CompTempVar2203+D'12'
0A02  304F  	MOVLW 0x4F
0A03  00DB  	MOVWF CompTempVar2203+D'1'
0A04  3052  	MOVLW 0x52
0A05  00E3  	MOVWF CompTempVar2203+D'9'
0A06  3053  	MOVLW 0x53
0A07  00E5  	MOVWF CompTempVar2203+D'11'
0A08  3056  	MOVLW 0x56
0A09  00DC  	MOVWF CompTempVar2203+D'2'
0A0A  01E8  	CLRF CompTempVar2203+D'14'
0A0B  3000  	MOVLW HIGH(CompTempVar2203+D'0')
0A0C  00D9  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0A0D  305A  	MOVLW LOW(CompTempVar2203+D'0')
0A0E  00D8  	MOVWF FCD_LCDDis_00054_arg_String
0A0F  300E  	MOVLW 0x0E
0A10  00E9  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0A11  158A  	BSF PCLATH,3
0A12  20DD  	CALL FCD_LCDDis_00054


		//Output
		//Output: 1 -> B0
		trisb = trisb & 0xFE;
0A13  30FE  	MOVLW 0xFE
0A14  1683  	BSF STATUS, RP0
0A15  0506  	ANDWF gbl_trisb, W
0A16  0086  	MOVWF gbl_trisb

		if ((1))
			portb = (portb & 0xFE) | 0x01;
0A17  30FE  	MOVLW 0xFE
0A18  1283  	BCF STATUS, RP0
0A19  0506  	ANDWF gbl_portb, W
0A1A  00D8  	MOVWF CompTempVar2205
0A1B  3001  	MOVLW 0x01
0A1C  0458  	IORWF CompTempVar2205, W
0A1D  0086  	MOVWF gbl_portb

		else
			portb = portb & 0xFE;

		//Output
		//Output: 0 -> B1
		trisb = trisb & 0xFD;
0A1E  30FD  	MOVLW 0xFD
0A1F  1683  	BSF STATUS, RP0
0A20  0506  	ANDWF gbl_trisb, W
0A21  0086  	MOVWF gbl_trisb

		if ((0))
			portb = (portb & 0xFD) | 0x02;
		else
			portb = portb & 0xFD;
0A22  30FD  	MOVLW 0xFD
0A23  1283  	BCF STATUS, RP0
0A24  0506  	ANDWF gbl_portb, W
0A25  0086  	MOVWF gbl_portb


	} else {
0A26  2A54  	GOTO	label185
0A54        label185


		//Call Component Macro
		//Call Component Macro: Cursor(2, 2)
		FCD_LCDDisplay0_Cursor(2, 2);
0A27  3002  	MOVLW 0x02
0A28  00D8  	MOVWF FCD_LCDDis_00053_arg_x
0A29  00D9  	MOVWF FCD_LCDDis_00053_arg_y
0A2A  20FB  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: PrintString("PASSED!")
		FCD_LCDDisplay0_PrintString("PASSED!", 7);
0A2B  3050  	MOVLW 0x50
0A2C  00DA  	MOVWF CompTempVar2206
0A2D  3041  	MOVLW 0x41
0A2E  00DB  	MOVWF CompTempVar2206+D'1'
0A2F  3053  	MOVLW 0x53
0A30  00DC  	MOVWF CompTempVar2206+D'2'
0A31  00DD  	MOVWF CompTempVar2206+D'3'
0A32  3045  	MOVLW 0x45
0A33  00DE  	MOVWF CompTempVar2206+D'4'
0A34  3044  	MOVLW 0x44
0A35  00DF  	MOVWF CompTempVar2206+D'5'
0A36  3021  	MOVLW 0x21
0A37  00E0  	MOVWF CompTempVar2206+D'6'
0A38  01E1  	CLRF CompTempVar2206+D'7'
0A39  3000  	MOVLW HIGH(CompTempVar2206+D'0')
0A3A  00D9  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0A3B  305A  	MOVLW LOW(CompTempVar2206+D'0')
0A3C  00D8  	MOVWF FCD_LCDDis_00054_arg_String
0A3D  3007  	MOVLW 0x07
0A3E  00E9  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0A3F  158A  	BSF PCLATH,3
0A40  20DD  	CALL FCD_LCDDis_00054


		//Output
		//Output: 0 -> B0
		trisb = trisb & 0xFE;
0A41  30FE  	MOVLW 0xFE
0A42  1683  	BSF STATUS, RP0
0A43  0506  	ANDWF gbl_trisb, W
0A44  0086  	MOVWF gbl_trisb

		if ((0))
			portb = (portb & 0xFE) | 0x01;
		else
			portb = portb & 0xFE;
0A45  30FE  	MOVLW 0xFE
0A46  1283  	BCF STATUS, RP0
0A47  0506  	ANDWF gbl_portb, W
0A48  0086  	MOVWF gbl_portb


		//Output
		//Output: 1 -> B1
		trisb = trisb & 0xFD;
0A49  30FD  	MOVLW 0xFD
0A4A  1683  	BSF STATUS, RP0
0A4B  0506  	ANDWF gbl_trisb, W
0A4C  0086  	MOVWF gbl_trisb

		if ((1))
			portb = (portb & 0xFD) | 0x02;
0A4D  30FD  	MOVLW 0xFD
0A4E  1283  	BCF STATUS, RP0
0A4F  0506  	ANDWF gbl_portb, W
0A50  00D8  	MOVWF CompTempVar2208
0A51  3002  	MOVLW 0x02
0A52  0458  	IORWF CompTempVar2208, W
0A53  0086  	MOVWF gbl_portb

		else
			portb = portb & 0xFD;

	}

	//Call Component Macro
	//Call Component Macro: Cursor(0, 3)
	FCD_LCDDisplay0_Cursor(0, 3);
0A54  01D8  	CLRF FCD_LCDDis_00053_arg_x
0A55  3003  	MOVLW 0x03
0A56  00D9  	MOVWF FCD_LCDDis_00053_arg_y
0A57  20FB  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintString("RAW:")
	FCD_LCDDisplay0_PrintString("RAW:", 4);
0A58  3052  	MOVLW 0x52
0A59  00DA  	MOVWF CompTempVar2209
0A5A  3041  	MOVLW 0x41
0A5B  00DB  	MOVWF CompTempVar2209+D'1'
0A5C  3057  	MOVLW 0x57
0A5D  00DC  	MOVWF CompTempVar2209+D'2'
0A5E  303A  	MOVLW 0x3A
0A5F  00DD  	MOVWF CompTempVar2209+D'3'
0A60  01DE  	CLRF CompTempVar2209+D'4'
0A61  3000  	MOVLW HIGH(CompTempVar2209+D'0')
0A62  00D9  	MOVWF FCD_LCDDis_00054_arg_String+D'1'
0A63  305A  	MOVLW LOW(CompTempVar2209+D'0')
0A64  00D8  	MOVWF FCD_LCDDis_00054_arg_String
0A65  3004  	MOVLW 0x04
0A66  00E9  	MOVWF FCD_LCDDis_00054_arg_MSZ_String
0A67  158A  	BSF PCLATH,3
0A68  20DD  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: Cursor(4, 3)
	FCD_LCDDisplay0_Cursor(4, 3);
0A69  3004  	MOVLW 0x04
0A6A  00D8  	MOVWF FCD_LCDDis_00053_arg_x
0A6B  3003  	MOVLW 0x03
0A6C  00D9  	MOVWF FCD_LCDDis_00053_arg_y
0A6D  20FB  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintNumber(data0)
	FCD_LCDDisplay0_PrintNumber(FCV_DATA0);
0A6E  084E  	MOVF gbl_FCV_DATA0, W
0A6F  00D8  	MOVWF FCD_LCDDis_00055_arg_Number
0A70  01D9  	CLRF FCD_LCDDis_00055_arg_Number+D'1'
0A71  27DD  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: Cursor(8, 3)
	FCD_LCDDisplay0_Cursor(8, 3);
0A72  3008  	MOVLW 0x08
0A73  00D8  	MOVWF FCD_LCDDis_00053_arg_x
0A74  3003  	MOVLW 0x03
0A75  00D9  	MOVWF FCD_LCDDis_00053_arg_y
0A76  158A  	BSF PCLATH,3
0A77  20FB  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintNumber(data1)
	FCD_LCDDisplay0_PrintNumber(FCV_DATA1);
0A78  0850  	MOVF gbl_FCV_DATA1, W
0A79  00D8  	MOVWF FCD_LCDDis_00055_arg_Number
0A7A  01D9  	CLRF FCD_LCDDis_00055_arg_Number+D'1'
0A7B  27DD  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: Cursor(12, 3)
	FCD_LCDDisplay0_Cursor(12, 3);
0A7C  300C  	MOVLW 0x0C
0A7D  00D8  	MOVWF FCD_LCDDis_00053_arg_x
0A7E  3003  	MOVLW 0x03
0A7F  00D9  	MOVWF FCD_LCDDis_00053_arg_y
0A80  158A  	BSF PCLATH,3
0A81  20FB  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: PrintNumber(data1)
	FCD_LCDDisplay0_PrintNumber(FCV_DATA1);
0A82  0850  	MOVF gbl_FCV_DATA1, W
0A83  00D8  	MOVWF FCD_LCDDis_00055_arg_Number
0A84  01D9  	CLRF FCD_LCDDis_00055_arg_Number+D'1'
0A85  27DD  	CALL FCD_LCDDis_00055


}
0A86  0008  	RETURN



void FCM_calc()

{

	//Calculation
	//Calculation:
	//  lsb = data0
	//  msb = data1
	FCV_LSB = FCV_DATA0;
0A87  1283  	BCF STATUS, RP0
0A88  1303  	BCF STATUS, RP1
0A89  084E  	MOVF gbl_FCV_DATA0, W
0A8A  00D4  	MOVWF gbl_FCV_LSB

	FCV_MSB = FCV_DATA1;
0A8B  0850  	MOVF gbl_FCV_DATA1, W
0A8C  00D5  	MOVWF gbl_FCV_MSB


	//Calculation
	//Calculation:
	//  raw = msb
	FCV_RAW = FCV_MSB;
0A8D  0855  	MOVF gbl_FCV_MSB, W
0A8E  00B4  	MOVWF gbl_FCV_RAW
0A8F  01B5  	CLRF gbl_FCV_RAW+D'1'
0A90  01B6  	CLRF gbl_FCV_RAW+D'2'
0A91  01B7  	CLRF gbl_FCV_RAW+D'3'


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<8; FCLV_LOOP1++)
0A92  01D7  	CLRF gbl_FCLV_LOOP1
0A93        label186
0A93  3008  	MOVLW 0x08
0A94  0257  	SUBWF gbl_FCLV_LOOP1, W
0A95  1803  	BTFSC STATUS,C
0A96  2AA2  	GOTO	label187
0AA0  0AD7  	INCF gbl_FCLV_LOOP1, F
0AA1  2A93  	GOTO	label186
0AA2        label187

	{

		//Calculation
		//Calculation:
		//  raw = raw << 1
		FCV_RAW = FCV_RAW << 1;
0A97  08B4  	MOVF gbl_FCV_RAW, F
0A98  08B5  	MOVF gbl_FCV_RAW+D'1', F
0A99  08B6  	MOVF gbl_FCV_RAW+D'2', F
0A9A  08B7  	MOVF gbl_FCV_RAW+D'3', F
0A9B  1003  	BCF STATUS,C
0A9C  0DB4  	RLF gbl_FCV_RAW, F
0A9D  0DB5  	RLF gbl_FCV_RAW+D'1', F
0A9E  0DB6  	RLF gbl_FCV_RAW+D'2', F
0A9F  0DB7  	RLF gbl_FCV_RAW+D'3', F



	}

	//Calculation
	//Calculation:
	//  raw = raw + lsb
	FCV_RAW = FCV_RAW + FCV_LSB;
0AA2  0854  	MOVF gbl_FCV_LSB, W
0AA3  00D8  	MOVWF CompTempVar2241
0AA4  01D9  	CLRF CompTempVar2242
0AA5  01DA  	CLRF CompTempVar2243
0AA6  01DB  	CLRF CompTempVar2244
0AA7  0834  	MOVF gbl_FCV_RAW, W
0AA8  07D8  	ADDWF CompTempVar2241, F
0AA9  0835  	MOVF gbl_FCV_RAW+D'1', W
0AAA  1803  	BTFSC STATUS,C
0AAB  0F35  	INCFSZ gbl_FCV_RAW+D'1', W
0AAC  07D9  	ADDWF CompTempVar2242, F
0AAD  0836  	MOVF gbl_FCV_RAW+D'2', W
0AAE  1803  	BTFSC STATUS,C
0AAF  0F36  	INCFSZ gbl_FCV_RAW+D'2', W
0AB0  07DA  	ADDWF CompTempVar2243, F
0AB1  0837  	MOVF gbl_FCV_RAW+D'3', W
0AB2  1803  	BTFSC STATUS,C
0AB3  0F37  	INCFSZ gbl_FCV_RAW+D'3', W
0AB4  07DB  	ADDWF CompTempVar2244, F
0AB5  0858  	MOVF CompTempVar2241, W
0AB6  00B4  	MOVWF gbl_FCV_RAW
0AB7  0859  	MOVF CompTempVar2242, W
0AB8  00B5  	MOVWF gbl_FCV_RAW+D'1'
0AB9  085A  	MOVF CompTempVar2243, W
0ABA  00B6  	MOVWF gbl_FCV_RAW+D'2'
0ABB  085B  	MOVF CompTempVar2244, W
0ABC  00B7  	MOVWF gbl_FCV_RAW+D'3'


	//Calculation
	//Calculation:
	//  fl = (raw / 50) - 270
	FCV_FL = flt_fromi((FCV_RAW / 50) - 270);
0ABD  01E0  	CLRF CompTempVar2257
0ABE  0834  	MOVF gbl_FCV_RAW, W
0ABF  00D8  	MOVWF __div_32_3_00001_arg_a
0AC0  0835  	MOVF gbl_FCV_RAW+D'1', W
0AC1  00D9  	MOVWF __div_32_3_00001_arg_a+D'1'
0AC2  0836  	MOVF gbl_FCV_RAW+D'2', W
0AC3  00DA  	MOVWF __div_32_3_00001_arg_a+D'2'
0AC4  0837  	MOVF gbl_FCV_RAW+D'3', W
0AC5  00DB  	MOVWF __div_32_3_00001_arg_a+D'3'
0AC6  1FB7  	BTFSS gbl_FCV_RAW+D'3',7
0AC7  2AD4  	GOTO	label188
0AC8  09D8  	COMF __div_32_3_00001_arg_a, F
0AC9  09D9  	COMF __div_32_3_00001_arg_a+D'1', F
0ACA  09DA  	COMF __div_32_3_00001_arg_a+D'2', F
0ACB  09DB  	COMF __div_32_3_00001_arg_a+D'3', F
0ACC  0AD8  	INCF __div_32_3_00001_arg_a, F
0ACD  1903  	BTFSC STATUS,Z
0ACE  0AD9  	INCF __div_32_3_00001_arg_a+D'1', F
0ACF  1903  	BTFSC STATUS,Z
0AD0  0ADA  	INCF __div_32_3_00001_arg_a+D'2', F
0AD1  1903  	BTFSC STATUS,Z
0AD2  0ADB  	INCF __div_32_3_00001_arg_a+D'3', F
0AD3  0AE0  	INCF CompTempVar2257, F
0AD4        label188
0AD4  3032  	MOVLW 0x32
0AD5  00DC  	MOVWF __div_32_3_00001_arg_b
0AD6  01DD  	CLRF __div_32_3_00001_arg_b+D'1'
0AD7  01DE  	CLRF __div_32_3_00001_arg_b+D'2'
0AD8  01DF  	CLRF __div_32_3_00001_arg_b+D'3'
0AD9  118A  	BCF PCLATH,3
0ADA  2795  	CALL __div_32_3_00001
0ADB  0868  	MOVF CompTempVarRet210, W
0ADC  00ED  	MOVWF float32_from_int32_arg_a
0ADD  0869  	MOVF CompTempVarRet210+D'1', W
0ADE  00EE  	MOVWF float32_from_int32_arg_a+D'1'
0ADF  086A  	MOVF CompTempVarRet210+D'2', W
0AE0  00EF  	MOVWF float32_from_int32_arg_a+D'2'
0AE1  086B  	MOVF CompTempVarRet210+D'3', W
0AE2  00F0  	MOVWF float32_from_int32_arg_a+D'3'
0AE3  158A  	BSF PCLATH,3
0AE4  1C60  	BTFSS CompTempVar2257,0
0AE5  2AF1  	GOTO	label189
0AE6  09ED  	COMF float32_from_int32_arg_a, F
0AE7  09EE  	COMF float32_from_int32_arg_a+D'1', F
0AE8  09EF  	COMF float32_from_int32_arg_a+D'2', F
0AE9  09F0  	COMF float32_from_int32_arg_a+D'3', F
0AEA  0AED  	INCF float32_from_int32_arg_a, F
0AEB  1903  	BTFSC STATUS,Z
0AEC  0AEE  	INCF float32_from_int32_arg_a+D'1', F
0AED  1903  	BTFSC STATUS,Z
0AEE  0AEF  	INCF float32_from_int32_arg_a+D'2', F
0AEF  1903  	BTFSC STATUS,Z
0AF0  0AF0  	INCF float32_from_int32_arg_a+D'3', F
0AF1        label189
0AF1  300E  	MOVLW 0x0E
0AF2  02ED  	SUBWF float32_from_int32_arg_a, F
0AF3  3001  	MOVLW 0x01
0AF4  00E0  	MOVWF CompTempVar2258
0AF5  1C03  	BTFSS STATUS,C
0AF6  0F60  	INCFSZ CompTempVar2258, W
0AF7  02EE  	SUBWF float32_from_int32_arg_a+D'1', F
0AF8  3000  	MOVLW 0x00
0AF9  00E0  	MOVWF CompTempVar2258
0AFA  1C03  	BTFSS STATUS,C
0AFB  0F60  	INCFSZ CompTempVar2258, W
0AFC  02EF  	SUBWF float32_from_int32_arg_a+D'2', F
0AFD  3000  	MOVLW 0x00
0AFE  00E0  	MOVWF CompTempVar2258
0AFF  1C03  	BTFSS STATUS,C
0B00  0F60  	INCFSZ CompTempVar2258, W
0B01  02F0  	SUBWF float32_from_int32_arg_a+D'3', F
0B02  118A  	BCF PCLATH,3
0B03  25C7  	CALL float32_from_int32
0B04  0875  	MOVF CompTempVarRet673, W
0B05  00B8  	MOVWF gbl_FCV_FL
0B06  0876  	MOVF CompTempVarRet673+D'1', W
0B07  00B9  	MOVWF gbl_FCV_FL+D'1'
0B08  0877  	MOVF CompTempVarRet673+D'2', W
0B09  00BA  	MOVWF gbl_FCV_FL+D'2'
0B0A  0878  	MOVF CompTempVarRet673+D'3', W
0B0B  00BB  	MOVWF gbl_FCV_FL+D'3'


	//Calculation
	//Calculation:
	//  temp_c = fl
	FCV_TEMP_C = flt_toi(FCV_FL);
0B0C  0838  	MOVF gbl_FCV_FL, W
0B0D  00D8  	MOVWF float32_to_int32_arg_a
0B0E  0839  	MOVF gbl_FCV_FL+D'1', W
0B0F  00D9  	MOVWF float32_to_int32_arg_a+D'1'
0B10  083A  	MOVF gbl_FCV_FL+D'2', W
0B11  00DA  	MOVWF float32_to_int32_arg_a+D'2'
0B12  083B  	MOVF gbl_FCV_FL+D'3', W
0B13  00DB  	MOVWF float32_to_int32_arg_a+D'3'
0B14  2316  	CALL float32_to_int32
0B15  0863  	MOVF CompTempVarRet710, W
0B16  00BC  	MOVWF gbl_FCV_TEMP_C
0B17  0864  	MOVF CompTempVarRet710+D'1', W
0B18  00BD  	MOVWF gbl_FCV_TEMP_C+D'1'
0B19  0865  	MOVF CompTempVarRet710+D'2', W
0B1A  00BE  	MOVWF gbl_FCV_TEMP_C+D'2'
0B1B  0866  	MOVF CompTempVarRet710+D'3', W
0B1C  00BF  	MOVWF gbl_FCV_TEMP_C+D'3'


	//Calculation
	//Calculation:
	//  dp2 = (fl - temp_c) * 100
	FCV_DP2 = flt_toi(flt_mul((flt_sub(FCV_FL, flt_fromi(FCV_TEMP_C))), 100));
0B1D  0838  	MOVF gbl_FCV_FL, W
0B1E  00E4  	MOVWF float32_addsub_arg_a
0B1F  0839  	MOVF gbl_FCV_FL+D'1', W
0B20  00E5  	MOVWF float32_addsub_arg_a+D'1'
0B21  083A  	MOVF gbl_FCV_FL+D'2', W
0B22  00E6  	MOVWF float32_addsub_arg_a+D'2'
0B23  083B  	MOVF gbl_FCV_FL+D'3', W
0B24  00E7  	MOVWF float32_addsub_arg_a+D'3'
0B25  083C  	MOVF gbl_FCV_TEMP_C, W
0B26  00ED  	MOVWF float32_from_int32_arg_a
0B27  083D  	MOVF gbl_FCV_TEMP_C+D'1', W
0B28  00EE  	MOVWF float32_from_int32_arg_a+D'1'
0B29  083E  	MOVF gbl_FCV_TEMP_C+D'2', W
0B2A  00EF  	MOVWF float32_from_int32_arg_a+D'2'
0B2B  083F  	MOVF gbl_FCV_TEMP_C+D'3', W
0B2C  00F0  	MOVWF float32_from_int32_arg_a+D'3'
0B2D  25C7  	CALL float32_from_int32
0B2E  0875  	MOVF CompTempVarRet673, W
0B2F  00E8  	MOVWF float32_addsub_arg_b
0B30  0876  	MOVF CompTempVarRet673+D'1', W
0B31  00E9  	MOVWF float32_addsub_arg_b+D'1'
0B32  0877  	MOVF CompTempVarRet673+D'2', W
0B33  00EA  	MOVWF float32_addsub_arg_b+D'2'
0B34  0878  	MOVF CompTempVarRet673+D'3', W
0B35  00EB  	MOVWF float32_addsub_arg_b+D'3'
0B36  3001  	MOVLW 0x01
0B37  00EC  	MOVWF float32_addsub_arg_subtract
0B38  261C  	CALL float32_addsub
0B39  0874  	MOVF CompTempVarRet879, W
0B3A  00DC  	MOVWF float32_mul_arg_a
0B3B  0875  	MOVF CompTempVarRet879+D'1', W
0B3C  00DD  	MOVWF float32_mul_arg_a+D'1'
0B3D  0876  	MOVF CompTempVarRet879+D'2', W
0B3E  00DE  	MOVWF float32_mul_arg_a+D'2'
0B3F  0877  	MOVF CompTempVarRet879+D'3', W
0B40  00DF  	MOVWF float32_mul_arg_a+D'3'
0B41  01E0  	CLRF float32_mul_arg_b
0B42  01E1  	CLRF float32_mul_arg_b+D'1'
0B43  30C8  	MOVLW 0xC8
0B44  00E2  	MOVWF float32_mul_arg_b+D'2'
0B45  3042  	MOVLW 0x42
0B46  00E3  	MOVWF float32_mul_arg_b+D'3'
0B47  2483  	CALL float32_mul
0B48  086E  	MOVF CompTempVarRet927, W
0B49  00D8  	MOVWF float32_to_int32_arg_a
0B4A  086F  	MOVF CompTempVarRet927+D'1', W
0B4B  00D9  	MOVWF float32_to_int32_arg_a+D'1'
0B4C  0870  	MOVF CompTempVarRet927+D'2', W
0B4D  00DA  	MOVWF float32_to_int32_arg_a+D'2'
0B4E  0871  	MOVF CompTempVarRet927+D'3', W
0B4F  00DB  	MOVWF float32_to_int32_arg_a+D'3'
0B50  2316  	CALL float32_to_int32
0B51  0863  	MOVF CompTempVarRet710, W
0B52  00D1  	MOVWF gbl_FCV_DP2


	//Calculation
	//Calculation:
	//  temp_cdp = dp2
	FCV_TEMP_CDP = FCV_DP2;
0B53  0851  	MOVF gbl_FCV_DP2, W
0B54  00CF  	MOVWF gbl_FCV_TEMP_CDP


}
0B55  0008  	RETURN



void FCM_i2c_comm()

{

	//Call Component Macro
	//Call Component Macro: MI2C_Start()
	FCD_I2C_Master0_MI2C_Start();
0943  2140  	CALL FCD_I2C_Ma_00057


	//Calculation
	//Calculation:
	//  rt_byte = 0
	FCV_RT_BYTE = 0;
0944  1283  	BCF STATUS, RP0
0945  01D3  	CLRF gbl_FCV_RT_BYTE


	//Call Component Macro
	//Call Component Macro: rt_byte=MI2C_Transmit_Byte(0xB4)
	FCV_RT_BYTE = FCD_I2C_Master0_MI2C_Transmit_Byte(0xB4);
0946  30B4  	MOVLW 0xB4
0947  00D8  	MOVWF FCD_I2C_Ma_00058_arg_Data
0948  158A  	BSF PCLATH,3
0949  2139  	CALL FCD_I2C_Ma_00058
094A  0859  	MOVF CompTempVarRet2259, W
094B  00D3  	MOVWF gbl_FCV_RT_BYTE


	//Calculation
	//Calculation:
	//  rt_byte = 0
	FCV_RT_BYTE = 0;
094C  01D3  	CLRF gbl_FCV_RT_BYTE


	//Call Component Macro
	//Call Component Macro: rt_byte=MI2C_Transmit_Byte(0x07)
	FCV_RT_BYTE = FCD_I2C_Master0_MI2C_Transmit_Byte(0x07);
094D  3007  	MOVLW 0x07
094E  00D8  	MOVWF FCD_I2C_Ma_00058_arg_Data
094F  158A  	BSF PCLATH,3
0950  2139  	CALL FCD_I2C_Ma_00058
0951  0859  	MOVF CompTempVarRet2259, W
0952  00D3  	MOVWF gbl_FCV_RT_BYTE


	//Comment:
	//end of RD/WR cmd

	//Call Component Macro
	//Call Component Macro: MI2C_Restart()
	FCD_I2C_Master0_MI2C_Restart();
0953  158A  	BSF PCLATH,3
0954  2136  	CALL FCD_I2C_Ma_00059


	//Calculation
	//Calculation:
	//  rt_byte = 0
	FCV_RT_BYTE = 0;
0955  1283  	BCF STATUS, RP0
0956  01D3  	CLRF gbl_FCV_RT_BYTE


	//Call Component Macro
	//Call Component Macro: rt_byte=MI2C_Transmit_Byte(0xB4)
	FCV_RT_BYTE = FCD_I2C_Master0_MI2C_Transmit_Byte(0xB4);
0957  30B4  	MOVLW 0xB4
0958  00D8  	MOVWF FCD_I2C_Ma_00058_arg_Data
0959  158A  	BSF PCLATH,3
095A  2139  	CALL FCD_I2C_Ma_00058
095B  0859  	MOVF CompTempVarRet2259, W
095C  00D3  	MOVWF gbl_FCV_RT_BYTE


	//Call Component Macro
	//Call Component Macro: i2c_rx=MI2C_Receive_Byte(rt_byte)
	FCV_I2C_RX = FCD_I2C_Master0_MI2C_Receive_Byte(FCV_RT_BYTE);
095D  0853  	MOVF gbl_FCV_RT_BYTE, W
095E  00D8  	MOVWF FCD_I2C_Ma_0005A_arg_Last
095F  158A  	BSF PCLATH,3
0960  212F  	CALL FCD_I2C_Ma_0005A
0961  0859  	MOVF CompTempVarRet2260, W
0962  00D6  	MOVWF gbl_FCV_I2C_RX


	//Calculation
	//Calculation:
	//  data0 = i2c_rx
	FCV_DATA0 = FCV_I2C_RX;
0963  0856  	MOVF gbl_FCV_I2C_RX, W
0964  00CE  	MOVWF gbl_FCV_DATA0


	//Call Component Macro
	//Call Component Macro: i2c_rx=MI2C_Receive_Byte(rt_byte)
	FCV_I2C_RX = FCD_I2C_Master0_MI2C_Receive_Byte(FCV_RT_BYTE);
0965  0853  	MOVF gbl_FCV_RT_BYTE, W
0966  00D8  	MOVWF FCD_I2C_Ma_0005A_arg_Last
0967  158A  	BSF PCLATH,3
0968  212F  	CALL FCD_I2C_Ma_0005A
0969  0859  	MOVF CompTempVarRet2260, W
096A  00D6  	MOVWF gbl_FCV_I2C_RX


	//Calculation
	//Calculation:
	//  data1 = i2c_rx
	FCV_DATA1 = FCV_I2C_RX;
096B  0856  	MOVF gbl_FCV_I2C_RX, W
096C  00D0  	MOVWF gbl_FCV_DATA1


	//Call Component Macro
	//Call Component Macro: i2c_rx=MI2C_Receive_Byte(rt_byte)
	FCV_I2C_RX = FCD_I2C_Master0_MI2C_Receive_Byte(FCV_RT_BYTE);
096D  0853  	MOVF gbl_FCV_RT_BYTE, W
096E  00D8  	MOVWF FCD_I2C_Ma_0005A_arg_Last
096F  158A  	BSF PCLATH,3
0970  212F  	CALL FCD_I2C_Ma_0005A
0971  0859  	MOVF CompTempVarRet2260, W
0972  00D6  	MOVWF gbl_FCV_I2C_RX


	//Calculation
	//Calculation:
	//  data2 = i2c_rx
	FCV_DATA2 = FCV_I2C_RX;
0973  0856  	MOVF gbl_FCV_I2C_RX, W
0974  00D2  	MOVWF gbl_FCV_DATA2


	//Call Component Macro
	//Call Component Macro: MI2C_Stop()
	FCD_I2C_Master0_MI2C_Stop();
0975  158A  	BSF PCLATH,3
0976  212C  	CALL FCD_I2C_Ma_0005B


}
0977  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
0BAF  3007  	MOVLW 0x07
0BB0  1683  	BSF STATUS, RP0
0BB1  1303  	BCF STATUS, RP1
0BB2  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0BB3  30C0  	MOVLW 0xC0
0BB4  0081  	MOVWF gbl_option_reg



	//Calculation
	//Calculation:
	//  data0 = 0xff
	//  data1 = 0xff
	//  data2 = 0xff
	//  lsb = 0x00
	//  msb = 0x00
	FCV_DATA0 = 0xff;
0BB5  30FF  	MOVLW 0xFF
0BB6  1283  	BCF STATUS, RP0
0BB7  00CE  	MOVWF gbl_FCV_DATA0

	FCV_DATA1 = 0xff;
0BB8  00D0  	MOVWF gbl_FCV_DATA1

	FCV_DATA2 = 0xff;
0BB9  00D2  	MOVWF gbl_FCV_DATA2

	FCV_LSB = 0x00;
0BBA  01D4  	CLRF gbl_FCV_LSB

	FCV_MSB = 0x00;
0BBB  01D5  	CLRF gbl_FCV_MSB


	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
0BBC  2356  	CALL FCD_LCDDis_0005D


	//Call Component Macro
	//Call Component Macro: MI2C_Init()
	FCD_I2C_Master0_MI2C_Init();
0BBD  158A  	BSF PCLATH,3
0BBE  23AC  	CALL FCD_I2C_Ma_0006B


	//Loop
	//Loop: While 1
	while (1)
0BBF        label190
0BD1  158A  	BSF PCLATH,3
0BD2  2BBF  	GOTO	label190

	{

		//Call Macro
		//Call Macro: i2c_comm()
		FCM_i2c_comm();
0BBF  158A  	BSF PCLATH,3
0BC0  2143  	CALL FCM_i2c_co_00056


		//Call Macro
		//Call Macro: calc()
		FCM_calc();
0BC1  158A  	BSF PCLATH,3
0BC2  2287  	CALL FCM_calc_00000


		//Call Macro
		//Call Macro: display()
		FCM_display();
0BC3  158A  	BSF PCLATH,3
0BC4  2178  	CALL FCM_displa_00051


		//Delay
		//Delay: 800 ms
		delay_ms(255);
0BC5  30FF  	MOVLW 0xFF
0BC6  00DC  	MOVWF delay_ms_00000_arg_del
0BC7  2010  	CALL delay_ms_00000

		delay_ms(255);
0BC8  30FF  	MOVLW 0xFF
0BC9  00DC  	MOVWF delay_ms_00000_arg_del
0BCA  2010  	CALL delay_ms_00000

		delay_ms(255);
0BCB  30FF  	MOVLW 0xFF
0BCC  00DC  	MOVWF delay_ms_00000_arg_del
0BCD  2010  	CALL delay_ms_00000

		delay_ms(35);
0BCE  3023  	MOVLW 0x23
0BCF  00DC  	MOVWF delay_ms_00000_arg_del
0BD0  2010  	CALL delay_ms_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0C10  1283  	BCF STATUS, RP0
0C11  1303  	BCF STATUS, RP1
0C12  0E42  	SWAPF Int1BContext+D'2', W
0C13  0084  	MOVWF FSR
0C14  0E41  	SWAPF Int1BContext+D'1', W
0C15  008A  	MOVWF PCLATH
0C16  0E40  	SWAPF Int1BContext, W
0C17  0083  	MOVWF STATUS
0C18  0EFF  	SWAPF Int1Context, F
0C19  0E7F  	SWAPF Int1Context, W
0C1A  0009  	RETFIE





/*********************************************************************
 *                  Flowcode CAL I2C File
 *
 * File: PIC_CAL_I2C.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 210911 | BR | Created
 * 021211 | BR | Converted to new dynamic defines mechanism
 *
 */


//When using hardware I2C channels override port and pin conns with FCD conn definitions
#ifdef MX_I2C_REF1
	#if MX_I2C_CHANNEL_1 > 0
		#undef MX_I2C_SDA_PIN_1
		#undef MX_I2C_SDA_PORT_1
		#undef MX_I2C_SDA_TRIS_1
		#undef MX_I2C_SCL_PIN_1
		#undef MX_I2C_SCL_PORT_1
		#undef MX_I2C_SCL_TRIS_1
	#endif
	#if MX_I2C_CHANNEL_1 == 1
		#define MX_I2C_SDA_PIN_1		MX_I2C_1_SDA_PIN
		#define MX_I2C_SDA_PORT_1		MX_I2C_1_SDA_PORT
		#define MX_I2C_SDA_TRIS_1		MX_I2C_1_SDA_TRIS
		#define MX_I2C_SCL_PIN_1		MX_I2C_1_SCL_PIN
		#define MX_I2C_SCL_PORT_1		MX_I2C_1_SCL_PORT
		#define MX_I2C_SCL_TRIS_1		MX_I2C_1_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_1 == 2
		#define MX_I2C_SDA_PIN_1		MX_I2C_2_SDA_PIN
		#define MX_I2C_SDA_PORT_1		MX_I2C_2_SDA_PORT
		#define MX_I2C_SDA_TRIS_1		MX_I2C_2_SDA_TRIS
		#define MX_I2C_SCL_PIN_1		MX_I2C_2_SCL_PIN
		#define MX_I2C_SCL_PORT_1		MX_I2C_2_SCL_PORT
		#define MX_I2C_SCL_TRIS_1		MX_I2C_2_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_1 == 3
		#define MX_I2C_SDA_PIN_1		MX_I2C_3_SDA_PIN
		#define MX_I2C_SDA_PORT_1		MX_I2C_3_SDA_PORT
		#define MX_I2C_SDA_TRIS_1		MX_I2C_3_SDA_TRIS
		#define MX_I2C_SCL_PIN_1		MX_I2C_3_SCL_PIN
		#define MX_I2C_SCL_PORT_1		MX_I2C_3_SCL_PORT
		#define MX_I2C_SCL_TRIS_1		MX_I2C_3_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_1 == 4
		#define MX_I2C_SDA_PIN_1		MX_I2C_4_SDA_PIN
		#define MX_I2C_SDA_PORT_1		MX_I2C_4_SDA_PORT
		#define MX_I2C_SDA_TRIS_1		MX_I2C_4_SDA_TRIS
		#define MX_I2C_SCL_PIN_1		MX_I2C_4_SCL_PIN
		#define MX_I2C_SCL_PORT_1		MX_I2C_4_SCL_PORT
		#define MX_I2C_SCL_TRIS_1		MX_I2C_4_SCL_TRIS
	#endif
#endif
#ifdef MX_I2C_REF2
	#if MX_I2C_CHANNEL_2 > 0
		#undef MX_I2C_SDA_PIN_2
		#undef MX_I2C_SDA_PORT_2
		#undef MX_I2C_SDA_TRIS_2
		#undef MX_I2C_SCL_PIN_2
		#undef MX_I2C_SCL_PORT_2
		#undef MX_I2C_SCL_TRIS_2
	#endif
	#if MX_I2C_CHANNEL_2 == 1
		#define MX_I2C_SDA_PIN_2		MX_I2C_1_SDA_PIN
		#define MX_I2C_SDA_PORT_2		MX_I2C_1_SDA_PORT
		#define MX_I2C_SDA_TRIS_2		MX_I2C_1_SDA_TRIS
		#define MX_I2C_SCL_PIN_2		MX_I2C_1_SCL_PIN
		#define MX_I2C_SCL_PORT_2		MX_I2C_1_SCL_PORT
		#define MX_I2C_SCL_TRIS_2		MX_I2C_1_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_2 == 2
		#define MX_I2C_SDA_PIN_2		MX_I2C_2_SDA_PIN
		#define MX_I2C_SDA_PORT_2		MX_I2C_2_SDA_PORT
		#define MX_I2C_SDA_TRIS_2		MX_I2C_2_SDA_TRIS
		#define MX_I2C_SCL_PIN_2		MX_I2C_2_SCL_PIN
		#define MX_I2C_SCL_PORT_2		MX_I2C_2_SCL_PORT
		#define MX_I2C_SCL_TRIS_2		MX_I2C_2_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_2 == 3
		#define MX_I2C_SDA_PIN_2		MX_I2C_3_SDA_PIN
		#define MX_I2C_SDA_PORT_2		MX_I2C_3_SDA_PORT
		#define MX_I2C_SDA_TRIS_2		MX_I2C_3_SDA_TRIS
		#define MX_I2C_SCL_PIN_2		MX_I2C_3_SCL_PIN
		#define MX_I2C_SCL_PORT_2		MX_I2C_3_SCL_PORT
		#define MX_I2C_SCL_TRIS_2		MX_I2C_3_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_2 == 4
		#define MX_I2C_SDA_PIN_2		MX_I2C_4_SDA_PIN
		#define MX_I2C_SDA_PORT_2		MX_I2C_4_SDA_PORT
		#define MX_I2C_SDA_TRIS_2		MX_I2C_4_SDA_TRIS
		#define MX_I2C_SCL_PIN_2		MX_I2C_4_SCL_PIN
		#define MX_I2C_SCL_PORT_2		MX_I2C_4_SCL_PORT
		#define MX_I2C_SCL_TRIS_2		MX_I2C_4_SCL_TRIS
	#endif
#endif
#ifdef MX_I2C_REF3
	#if MX_I2C_CHANNEL_3 > 0
		#undef MX_I2C_SDA_PIN_3
		#undef MX_I2C_SDA_PORT_3
		#undef MX_I2C_SDA_TRIS_3
		#undef MX_I2C_SCL_PIN_3
		#undef MX_I2C_SCL_PORT_3
		#undef MX_I2C_SCL_TRIS_3
	#endif
	#if MX_I2C_CHANNEL_3 == 1
		#define MX_I2C_SDA_PIN_3		MX_I2C_1_SDA_PIN
		#define MX_I2C_SDA_PORT_3		MX_I2C_1_SDA_PORT
		#define MX_I2C_SDA_TRIS_3		MX_I2C_1_SDA_TRIS
		#define MX_I2C_SCL_PIN_3		MX_I2C_1_SCL_PIN
		#define MX_I2C_SCL_PORT_3		MX_I2C_1_SCL_PORT
		#define MX_I2C_SCL_TRIS_3		MX_I2C_1_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_3 == 2
		#define MX_I2C_SDA_PIN_3		MX_I2C_2_SDA_PIN
		#define MX_I2C_SDA_PORT_3		MX_I2C_2_SDA_PORT
		#define MX_I2C_SDA_TRIS_3		MX_I2C_2_SDA_TRIS
		#define MX_I2C_SCL_PIN_3		MX_I2C_2_SCL_PIN
		#define MX_I2C_SCL_PORT_3		MX_I2C_2_SCL_PORT
		#define MX_I2C_SCL_TRIS_3		MX_I2C_2_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_3 == 3
		#define MX_I2C_SDA_PIN_3		MX_I2C_3_SDA_PIN
		#define MX_I2C_SDA_PORT_3		MX_I2C_3_SDA_PORT
		#define MX_I2C_SDA_TRIS_3		MX_I2C_3_SDA_TRIS
		#define MX_I2C_SCL_PIN_3		MX_I2C_3_SCL_PIN
		#define MX_I2C_SCL_PORT_3		MX_I2C_3_SCL_PORT
		#define MX_I2C_SCL_TRIS_3		MX_I2C_3_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_3 == 4
		#define MX_I2C_SDA_PIN_3		MX_I2C_4_SDA_PIN
		#define MX_I2C_SDA_PORT_3		MX_I2C_4_SDA_PORT
		#define MX_I2C_SDA_TRIS_3		MX_I2C_4_SDA_TRIS
		#define MX_I2C_SCL_PIN_3		MX_I2C_4_SCL_PIN
		#define MX_I2C_SCL_PORT_3		MX_I2C_4_SCL_PORT
		#define MX_I2C_SCL_TRIS_3		MX_I2C_4_SCL_TRIS
	#endif
#endif
#ifdef MX_I2C_REF4
	#if MX_I2C_CHANNEL_4 > 0
		#undef MX_I2C_SDA_PIN_4
		#undef MX_I2C_SDA_PORT_4
		#undef MX_I2C_SDA_TRIS_4
		#undef MX_I2C_SCL_PIN_4
		#undef MX_I2C_SCL_PORT_4
		#undef MX_I2C_SCL_TRIS_4
	#endif
	#if MX_I2C_CHANNEL_4 == 1
		#define MX_I2C_SDA_PIN_4		MX_I2C_1_SDA_PIN
		#define MX_I2C_SDA_PORT_4		MX_I2C_1_SDA_PORT
		#define MX_I2C_SDA_TRIS_4		MX_I2C_1_SDA_TRIS
		#define MX_I2C_SCL_PIN_4		MX_I2C_1_SCL_PIN
		#define MX_I2C_SCL_PORT_4		MX_I2C_1_SCL_PORT
		#define MX_I2C_SCL_TRIS_4		MX_I2C_1_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_4 == 2
		#define MX_I2C_SDA_PIN_4		MX_I2C_2_SDA_PIN
		#define MX_I2C_SDA_PORT_4		MX_I2C_2_SDA_PORT
		#define MX_I2C_SDA_TRIS_4		MX_I2C_2_SDA_TRIS
		#define MX_I2C_SCL_PIN_4		MX_I2C_2_SCL_PIN
		#define MX_I2C_SCL_PORT_4		MX_I2C_2_SCL_PORT
		#define MX_I2C_SCL_TRIS_4		MX_I2C_2_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_4 == 3
		#define MX_I2C_SDA_PIN_4		MX_I2C_3_SDA_PIN
		#define MX_I2C_SDA_PORT_4		MX_I2C_3_SDA_PORT
		#define MX_I2C_SDA_TRIS_4		MX_I2C_3_SDA_TRIS
		#define MX_I2C_SCL_PIN_4		MX_I2C_3_SCL_PIN
		#define MX_I2C_SCL_PORT_4		MX_I2C_3_SCL_PORT
		#define MX_I2C_SCL_TRIS_4		MX_I2C_3_SCL_TRIS
	#endif
	#if MX_I2C_CHANNEL_4 == 4
		#define MX_I2C_SDA_PIN_4		MX_I2C_4_SDA_PIN
		#define MX_I2C_SDA_PORT_4		MX_I2C_4_SDA_PORT
		#define MX_I2C_SDA_TRIS_4		MX_I2C_4_SDA_TRIS
		#define MX_I2C_SCL_PIN_4		MX_I2C_4_SCL_PIN
		#define MX_I2C_SCL_PORT_4		MX_I2C_4_SCL_PORT
		#define MX_I2C_SCL_TRIS_4		MX_I2C_4_SCL_TRIS
	#endif
#endif

#define MX_I2C_CHANNEL_X		CAL_APPEND(MX_I2C_CHANNEL_, MX_I2C_NUM)
#define MX_I2C_SDA_PIN_X		CAL_APPEND(MX_I2C_SDA_PIN_, MX_I2C_NUM)
#define MX_I2C_SDA_PORT_X		CAL_APPEND(MX_I2C_SDA_PORT_, MX_I2C_NUM)
#define MX_I2C_SDA_TRIS_X		CAL_APPEND(MX_I2C_SDA_TRIS_, MX_I2C_NUM)
#define MX_I2C_SCL_PIN_X		CAL_APPEND(MX_I2C_SCL_PIN_, MX_I2C_NUM)
#define MX_I2C_SCL_PORT_X		CAL_APPEND(MX_I2C_SCL_PORT_, MX_I2C_NUM)
#define MX_I2C_SCL_TRIS_X		CAL_APPEND(MX_I2C_SCL_TRIS_, MX_I2C_NUM)
#define MX_I2C_BMODE_X			CAL_APPEND(MX_I2C_BMODE_, MX_I2C_NUM)
#define MX_I2C_BAUD_X			CAL_APPEND(MX_I2C_BAUD_, MX_I2C_NUM)
#define MX_I2C_INT_X			CAL_APPEND(MX_I2C_INT_, MX_I2C_NUM)


//Function Prototypes
CALFUNCTION(void, FC_CAL_I2C_Master_Init_, (void));
CALFUNCTION(void, FC_CAL_I2C_Master_Uninit_, (void));
CALFUNCTION(void, FC_CAL_I2C_Master_Start_, (void));
CALFUNCTION(void, FC_CAL_I2C_Master_Restart_, (void));
CALFUNCTION(void, FC_CAL_I2C_Master_Stop_, (void));
CALFUNCTION(MX_UINT8, FC_CAL_I2C_Master_TX_Byte_, (MX_UINT8 Data));
CALFUNCTION(MX_UINT8, FC_CAL_I2C_Master_RX_Byte_, (MX_UINT8 Last));

CALFUNCTION(void, FC_CAL_I2C_Slave_Init_, (void));
CALFUNCTION(void, FC_CAL_I2C_Slave_Uninit_, (void));
CALFUNCTION(void, FC_CAL_I2C_Slave_SetTxData_, (MX_UINT8 Data));
CALFUNCTION(MX_UINT8, FC_CAL_I2C_Slave_GetRxData_, (MX_UINT8 Last));


//Ensure SSPCON register is defined correctly
#ifndef SSPCON
  #ifdef SSPCON1
	#define sspcon	sspcon1
  #else
	#ifdef SSP1CON1
		#define sspcon	ssp1con1
	#endif
  #endif
#endif

//Ensure SSPIF register is defined correctly
#ifndef SSPIF
  #ifdef SSP1IF
	#define SSPIF	SSP1IF
  #else
	#error "I2C does not have the SSPIF defined on this chip - does your chip support this feature?"
  #endif
#endif


//Ensure SSPCON2 register is defined correctly
#ifndef SSPCON2
  #ifdef SSP1CON2
	#define sspcon2	ssp1con2
  #endif
#endif


//Ensure SSPSTAT register is defined correctly
#ifndef SSPSTAT
  #ifdef SSP1STAT
	#define sspstat	ssp1stat
  #endif
#endif


//Ensure SSPADD register is defined correctly
#ifndef SSPADD
  #ifdef SSP1ADD
	#define sspadd	ssp1add
  #endif
#endif


//Ensure SSPBUFF register is defined correctly
#ifndef SSPBUFF
  #ifdef SSP1BUFF
	#define sspbuff	ssp1buff
  #endif
#endif


//If software channel is enabled then define bit delay.
#if (MX_I2C_CHANNEL_X == 0)
  #ifndef MX_I2C_SW_DEL
	#define MX_I2C_SW_DEL
	#define MX_I2C_DELAY	delay_us(20);
  #endif
#endif


CALFUNCTION(void, FC_CAL_I2C_Master_Init_, (void))

{

	#if (MX_I2C_CHANNEL_X == 0)															//Use Master I2C Software
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Configure SDA as Input
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Configure SCL as Input
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		#ifndef MX_MI2C
			#error "This chip does not have Master I2C capability"
		#else

			#ifndef MX_I2C_1
				#error "This chip does not have Master I2C channel 1"
			#endif

			#if (MX_I2C_BMODE_X & 0x01)
				cr_bit (sspstat,SMP);										//Slew Rate Control Enabled
			#else
				st_bit (sspstat,SMP);										//Slew Rate Control Disabled
07CE  1683  	BSF STATUS, RP0
07CF  1303  	BCF STATUS, RP1
07D0  1794  	BSF gbl_sspstat,7

		    #endif

			#if (MX_I2C_BMODE_X & 0x02)
				st_bit (sspstat,CKE);										//Enable SMBus specific inputs
			#else
				cr_bit (sspstat,CKE);										//Disable SMBus specific inputs
07D1  1314  	BCF gbl_sspstat,6

			#endif

			sspcon = 0x28;													//Setup I2C into Master Mode
07D2  3028  	MOVLW 0x28
07D3  1283  	BCF STATUS, RP0
07D4  0094  	MOVWF gbl_sspcon

			sspadd = MX_I2C_BAUD_X;											//Set the Baud Rate
07D5  30A0  	MOVLW 0xA0
07D6  1683  	BSF STATUS, RP0
07D7  0093  	MOVWF gbl_sspadd

			sspcon2 = 0x00;													//Clear the control bits
07D8  0191  	CLRF gbl_sspcon2

			st_bit(intcon, GIE);
07D9  178B  	BSF gbl_intcon,7

			FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Configure SDA as Input
07DA  1607  	BSF gbl_trisc,4

			FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Configure SCL as Input
07DB  1587  	BSF gbl_trisc,3

		#endif
	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		#ifndef MX_MI2C
			#error "This chip does not have Master I2C capability"
		#else

			#ifndef MX_I2C_2
				#error "This chip does not have Master I2C channel 2"
			#endif

		  #ifdef MX_I2C_2_REMAPPABLE
			RPOR4 = 9;														//SDA2 - RB1 - RP4
			RPOR5 = 10;														//SCL2 - RB2 - RP5
		  #endif

			#if (MX_I2C_BMODE_X & 0x01)
				cr_bit (ssp2stat,SMP);										//Slew Rate Control Enabled
			#else
				st_bit (ssp2stat,SMP);										//Slew Rate Control Disabled
			#endif

			#if (MX_I2C_BMODE_X & 0x02)
				st_bit (ssp2stat,CKE);										//Enable SMBus specific inputs
			#else
				cr_bit (ssp2stat,CKE);										//Disable SMBus specific inputs
			#endif

			ssp2con = 0x28;													//Setup I2C into Master Mode
			ssp2add = MX_I2C_BAUD_X;										//Set the Baud Rate
			ssp2con2 = 0x00;												//Clear the control bits
			st_bit(intcon, GIE);
			FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);			//Configure SDA as Input
			FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);			//Configure SCL as Input
		#endif
	#endif
}
07DC  0008  	RETURN


CALFUNCTION(void, FC_CAL_I2C_Master_Uninit_, (void))
{
	#if (MX_I2C_CHANNEL_X == 0)																//Use Master I2C Software
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);			//Configure SDA as Input
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);			//Configure SCL as Input
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(sspcon, SSPEN);												//Disable SSP
	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(ssp2con, SSPEN);												//Disable SSP
	#endif
}

CALFUNCTION(void, FC_CAL_I2C_Master_Start_, (void))

{
	#if (MX_I2C_CHANNEL_X == 0)															//Use Master I2C Software
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Make Sure SCL is Set
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Make Sure SDA is Set
		MX_I2C_DELAY;																	//Small Delay
		FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Clear SDA
		MX_I2C_DELAY;																	//Small Delay
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Clear SCL
		MX_I2C_DELAY;																	//Small Delay
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(pir1, SSPIF);												//Clear SSP interrupt flag
02CD  1283  	BCF STATUS, RP0
02CE  1303  	BCF STATUS, RP1
02CF  118C  	BCF gbl_pir1,3

		st_bit(sspcon2,SEN);												//Initiate start condition
02D0  1683  	BSF STATUS, RP0
02D1  1411  	BSF gbl_sspcon2,0

		while(ts_bit(sspcon2,SEN));											//Wait for start bit to be generated
02D2        label59
02D2  1811  	BTFSC gbl_sspcon2,0
02D3  2AD2  	GOTO	label59

	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(pir3, SSP2IF);												//Clear SSP interrupt flag
		st_bit(ssp2con2,SEN);												//Initiate start condition
		while(ts_bit(ssp2con2,SEN));										//Wait for start bit to be generated
	#endif
}
02D4  0008  	RETURN


CALFUNCTION(void, FC_CAL_I2C_Master_Restart_, (void))

{
	#if (MX_I2C_CHANNEL_X == 0)															//Use Master I2C Software
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Set SDA High
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
		MX_I2C_DELAY;
		FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Set SDA Low
		MX_I2C_DELAY;
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
		MX_I2C_DELAY;
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(pir1, SSPIF);												//Clear SSP interrupt flag
02C5  1283  	BCF STATUS, RP0
02C6  1303  	BCF STATUS, RP1
02C7  118C  	BCF gbl_pir1,3

		st_bit(sspcon2,RSEN);												//Initiate restart condition
02C8  1683  	BSF STATUS, RP0
02C9  1491  	BSF gbl_sspcon2,1

		while(ts_bit(sspcon2,RSEN));										//Wait for restart bit to be generated
02CA        label58
02CA  1891  	BTFSC gbl_sspcon2,1
02CB  2ACA  	GOTO	label58

	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(pir3, SSP2IF);												//Clear SSP interrupt flag
		st_bit(ssp2con2,RSEN);												//Initiate restart condition
		while(ts_bit(ssp2con2,RSEN));										//Wait for restart bit to be generated
	#endif
}
02CC  0008  	RETURN


CALFUNCTION(void, FC_CAL_I2C_Master_Stop_, (void))

{
	#if (MX_I2C_CHANNEL_X == 0)															//Use Master I2C Software
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
		FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Set SDA Low
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);		//Set SDA High
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(pir1,SSPIF);													//Clear SSP interrupt flag
02B9  1283  	BCF STATUS, RP0
02BA  1303  	BCF STATUS, RP1
02BB  118C  	BCF gbl_pir1,3

		st_bit(sspcon2,PEN);												//Initiate stop condition
02BC  1683  	BSF STATUS, RP0
02BD  1511  	BSF gbl_sspcon2,2

		while(ts_bit(sspcon2,PEN));											//Wait for stop bit to be generated
02BE        label57
02BE  1911  	BTFSC gbl_sspcon2,2
02BF  2ABE  	GOTO	label57

	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(pir3,SSP2IF);												//Clear SSP interrupt flag
		st_bit(ssp2con2,PEN);												//Initiate stop condition
		while(ts_bit(ssp2con2,PEN));										//Wait for stop bit to be generated
	#endif

  delay_ms(10);																//Wait before reusing the I2C BUS
02C0  300A  	MOVLW 0x0A
02C1  1283  	BCF STATUS, RP0
02C2  00DC  	MOVWF delay_ms_00000_arg_del
02C3  2010  	CALL delay_ms_00000

}
02C4  0008  	RETURN


CALFUNCTION(MX_UINT8, FC_CAL_I2C_Master_TX_Byte_, (MX_UINT8 Data))

{
	#if (MX_I2C_CHANNEL_X == 0)												//Use Master I2C Software
		char bit_mask;
		char local_ack = 0;
		for(bit_mask=0x80;bit_mask;bit_mask=bit_mask>>1)
		{
			if(Data & bit_mask)
			{
				FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);	//Set SDA High
			}
			else
			{
				FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);	//Set SDA Low
			}
			MX_I2C_DELAY;
			FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
			MX_I2C_DELAY;
			FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
			MX_I2C_DELAY;
		}
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);			//Set SDA High
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);			//Set SCL High
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);
		if (FC_CAL_Bit_In(MX_I2C_SDA_PORT_X, MX_I2C_SDA_PIN_X))		//Get the Status Bit
			local_ack = 1;
		MX_I2C_DELAY;
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);			//Set SCL Low
		MX_I2C_DELAY;
		return (local_ack);													//0 = Ack received : 1 = Ack not received
	#endif

	#if (MX_I2C_CHANNEL_X == 1)												//Use Master I2C Hardware 1
		cr_bit(pir1,SSPIF);													//Clear SSP interrupt flag
02AA  118C  	BCF gbl_pir1,3

		sspbuf=Data;														//Send byte
02AB  0859  	MOVF FC_CAL_I2C_00069_arg_Data, W
02AC  0093  	MOVWF gbl_sspbuf

		while(ts_bit(pir1,SSPIF) == 0);										//Wait for control bit to be sent
02AD        label55
02AD  1D8C  	BTFSS gbl_pir1,3
02AE  2AAD  	GOTO	label55

		if(ts_bit(sspcon2,ACKSTAT))											//Check Acknowledgement
02AF  1683  	BSF STATUS, RP0
02B0  1F11  	BTFSS gbl_sspcon2,6
02B1  2AB6  	GOTO	label56
02B6        label56

			return (1);														//No Acknowledgement
02B2  3001  	MOVLW 0x01
02B3  1283  	BCF STATUS, RP0
02B4  00DA  	MOVWF CompTempVarRet2266

		else return (0);													//Acknowledgement received
02B6  1283  	BCF STATUS, RP0
02B7  01DA  	CLRF CompTempVarRet2266

	#endif

	#if (MX_I2C_CHANNEL_X == 2)												//Use Master I2C Hardware 2
		cr_bit(pir3,SSP2IF);												//Clear SSP interrupt flag
		ssp2buf=Data;														//Send byte
		while(ts_bit(pir3,SSP2IF) == 0);									//Wait for control bit to be sent
		if(ts_bit(ssp2con2,ACKSTAT))										//Check Acknowledgement
			return (1);														//No Acknowledgement
		else return (0);													//Acknowledgement received
	#endif
}
02B5  0008  	RETURN
02B8  0008  	RETURN


CALFUNCTION(MX_UINT8, FC_CAL_I2C_Master_RX_Byte_, (MX_UINT8 Last))

{
	#if (MX_I2C_CHANNEL_X == 0)												//Use Master I2C Software
		char bit_mask;
		char Data = 0;
		char local_ack;
		FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);			//Set SDA High
		MX_I2C_DELAY;
		for(bit_mask=0x80;bit_mask;bit_mask=bit_mask>>1)
		{
			FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
			MX_I2C_DELAY;
			FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);
			if(FC_CAL_Bit_In(MX_I2C_SDA_PORT_X, MX_I2C_SDA_PIN_X))	//Read Incoming Bit
				Data = Data | bit_mask;														//Add data to variable
			FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
			MX_I2C_DELAY;
		}
		if (Last)																		//Acknowledge?
		{
			FC_CAL_Bit_In_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);	//Send Nack
		}
		else
		{
			FC_CAL_Bit_Low_DDR(MX_I2C_SDA_PORT_X, MX_I2C_SDA_TRIS_X, MX_I2C_SDA_PIN_X);	//Send Ack
		}
		MX_I2C_DELAY;
		FC_CAL_Bit_In_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL High
		MX_I2C_DELAY;
		FC_CAL_Bit_Low_DDR(MX_I2C_SCL_PORT_X, MX_I2C_SCL_TRIS_X, MX_I2C_SCL_PIN_X);		//Set SCL Low
		MX_I2C_DELAY;
		return (Data);
	#endif

	#if (MX_I2C_CHANNEL_X == 1)						//Use Master I2C Hardware 1
		cr_bit(pir1,SSPIF);							//Clear SSP interrupt flag
0295  118C  	BCF gbl_pir1,3

		st_bit(sspcon2,RCEN);						//Initiate Read
0296  1683  	BSF STATUS, RP0
0297  1591  	BSF gbl_sspcon2,3

		while(ts_bit(pir1,3) == 0);					//Wait for data read
0298        label51
0298  1283  	BCF STATUS, RP0
0299  1D8C  	BTFSS gbl_pir1,3
029A  2A98  	GOTO	label51

		if (Last)
029B  08D9  	MOVF FC_CAL_I2C_0006A_arg_Last, F
029C  1903  	BTFSC STATUS,Z
029D  2AA1  	GOTO	label52
02A1        label52

			st_bit(sspcon2,ACKDT);					//Send Nack
029E  1683  	BSF STATUS, RP0
029F  1691  	BSF gbl_sspcon2,5

		else cr_bit(sspcon2,ACKDT);					//Send Ack
02A0  2AA3  	GOTO	label53
02A1  1683  	BSF STATUS, RP0
02A2  1291  	BCF gbl_sspcon2,5
02A3        label53

		st_bit(sspcon2,ACKEN);						//Initiate Nack
02A3  1611  	BSF gbl_sspcon2,4

		while(ts_bit(sspcon2,ACKEN));				//Wait for data read
02A4        label54
02A4  1A11  	BTFSC gbl_sspcon2,4
02A5  2AA4  	GOTO	label54

		return(sspbuf);								//Store incoming data
02A6  1283  	BCF STATUS, RP0
02A7  0813  	MOVF gbl_sspbuf, W
02A8  00DA  	MOVWF CompTempVarRet2267

	#endif

	#if (MX_I2C_CHANNEL_X == 2)						//Use Master I2C Hardware 2
		cr_bit(pir3,SSP2IF);						//Clear SSP interrupt flag
		st_bit(ssp2con2,RCEN);						//Initiate Read
		while(ts_bit(pir3,SSP2IF) == 0);			//Wait for data read
		if (Last)
			st_bit(ssp2con2,ACKDT);					//Send Nack
		else cr_bit(ssp2con2,ACKDT);				//Send Ack
		st_bit(ssp2con2,ACKEN);						//Initiate Nack
		while(ts_bit(ssp2con2,ACKEN));				//Wait for data read
		return(ssp2buf);							//Store incoming data
	#endif
}
02A9  0008  	RETURN





//Slave functions currently not implemented
CALFUNCTION(void, FC_CAL_I2C_Slave_Init_, (void))
{

}

CALFUNCTION(void, FC_CAL_I2C_Slave_Uninit_, (void))
{

}

CALFUNCTION(void, FC_CAL_I2C_Slave_SetTxData_, (MX_UINT8 Data))
{

}

CALFUNCTION(MX_UINT8, FC_CAL_I2C_Slave_GetRxData_, (MX_UINT8 Last))
{

}


////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  158A  	BSF PCLATH,3
0001  2BD3  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00C0  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00C1  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00C2  	MOVWF Int1BContext+D'2'
000D  158A  	BSF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2C10  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08DC  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30CC  	MOVLW 0xCC
0015        label2
0015  3EFF  	ADDLW 0xFF
0016  1D03  	BTFSS STATUS,Z
0017  2815  	GOTO	label2
0018  0000  	NOP
0019  0BDC  	DECFSZ delay_ms_00000_arg_del, F
001A  2814  	GOTO	label1
001B  0008  	RETURN
001C        ; } delay_ms function end

001C        delay_10us_00000
001C        ; { delay_10us ; function begin
001C        label3
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0BEE  	DECFSZ delay_10us_00000_arg_del, F
0023  281C  	GOTO	label3
0024  0008  	RETURN
0025        ; } delay_10us function end

0025        shift32Rig_0002B
0025        ; { shift32RightJammingbSig ; function begin
0025  08F8  	MOVF shift32Rig_0002B_arg_shiftCount, F
0026  1D03  	BTFSS STATUS,Z
0027  282B  	GOTO	label4
0028  08F9  	MOVF shift32Rig_0002B_arg_shiftCount+D'1', F
0029  1903  	BTFSC STATUS,Z
002A  0008  	RETURN
002B        label4
002B  3020  	MOVLW 0x20
002C  0278  	SUBWF shift32Rig_0002B_arg_shiftCount, W
002D  0879  	MOVF shift32Rig_0002B_arg_shiftCount+D'1', W
002E  1803  	BTFSC STATUS,C
002F  2842  	GOTO	label6
0030  1D03  	BTFSS STATUS,Z
0031  2842  	GOTO	label6
0032  126D  	BCF shift32Rig_0002B_3_stickyBit,4
0033  0878  	MOVF shift32Rig_0002B_arg_shiftCount, W
0034  00FA  	MOVWF shift32Rig_0002B_3_count
0035        label5
0035  1828  	BTFSC gbl_15_gbl_bSig,0
0036  166D  	BSF shift32Rig_0002B_3_stickyBit,4
0037  1003  	BCF STATUS,C
0038  0CAB  	RRF gbl_15_gbl_bSig+D'3', F
0039  0CAA  	RRF gbl_15_gbl_bSig+D'2', F
003A  0CA9  	RRF gbl_15_gbl_bSig+D'1', F
003B  0CA8  	RRF gbl_15_gbl_bSig, F
003C  03FA  	DECF shift32Rig_0002B_3_count, F
003D  1D03  	BTFSS STATUS,Z
003E  2835  	GOTO	label5
003F  1A6D  	BTFSC shift32Rig_0002B_3_stickyBit,4
0040  1428  	BSF gbl_15_gbl_bSig,0
0041  0008  	RETURN
0042        label6
0042  0828  	MOVF gbl_15_gbl_bSig, W
0043  0429  	IORWF gbl_15_gbl_bSig+D'1', W
0044  042A  	IORWF gbl_15_gbl_bSig+D'2', W
0045  042B  	IORWF gbl_15_gbl_bSig+D'3', W
0046  39FF  	ANDLW 0xFF
0047  1903  	BTFSC STATUS,Z
0048  0008  	RETURN
0049  3001  	MOVLW 0x01
004A  00A8  	MOVWF gbl_15_gbl_bSig
004B  01A9  	CLRF gbl_15_gbl_bSig+D'1'
004C  01AA  	CLRF gbl_15_gbl_bSig+D'2'
004D  01AB  	CLRF gbl_15_gbl_bSig+D'3'
004E  0008  	RETURN
004F        ; } shift32RightJammingbSig function end

004F        roundFloat_0001A
004F        ; { roundFloat32NA ; function begin
004F  1283  	BCF STATUS, RP0
0050  1303  	BCF STATUS, RP1
0051  01F8  	CLRF roundFloat_0001A_1_roundNe_0001B
0052  3040  	MOVLW 0x40
0053  00F9  	MOVWF roundFloat_0001A_1_roundIn_0001C
0054  08C6  	MOVF gbl_float_rounding_mode, F
0055  1D03  	BTFSS STATUS,Z
0056  2859  	GOTO	label7
0057  3001  	MOVLW 0x01
0058  00F8  	MOVWF roundFloat_0001A_1_roundNe_0001B
0059        label7
0059  08F8  	MOVF roundFloat_0001A_1_roundNe_0001B, F
005A  1D03  	BTFSS STATUS,Z
005B  286F  	GOTO	label10
005C  0846  	MOVF gbl_float_rounding_mode, W
005D  3A03  	XORLW 0x03
005E  1D03  	BTFSS STATUS,Z
005F  2862  	GOTO	label8
0060  01F9  	CLRF roundFloat_0001A_1_roundIn_0001C
0061  286F  	GOTO	label10
0062        label8
0062  307F  	MOVLW 0x7F
0063  00F9  	MOVWF roundFloat_0001A_1_roundIn_0001C
0064  08CC  	MOVF gbl_15_gbl_zSign, F
0065  1903  	BTFSC STATUS,Z
0066  286C  	GOTO	label9
0067  0846  	MOVF gbl_float_rounding_mode, W
0068  3A02  	XORLW 0x02
0069  1903  	BTFSC STATUS,Z
006A  01F9  	CLRF roundFloat_0001A_1_roundIn_0001C
006B  286F  	GOTO	label10
006C        label9
006C  0346  	DECF gbl_float_rounding_mode, W
006D  1903  	BTFSC STATUS,Z
006E  01F9  	CLRF roundFloat_0001A_1_roundIn_0001C
006F        label10
006F  082C  	MOVF gbl_15_gbl_zSig, W
0070  1683  	BSF STATUS, RP0
0071  00A0  	MOVWF roundFloat_0001A_1_zSigPlusRound
0072  1283  	BCF STATUS, RP0
0073  082D  	MOVF gbl_15_gbl_zSig+D'1', W
0074  1683  	BSF STATUS, RP0
0075  00A1  	MOVWF roundFloat_0001A_1_zSigPlusRound+D'1'
0076  1283  	BCF STATUS, RP0
0077  082E  	MOVF gbl_15_gbl_zSig+D'2', W
0078  1683  	BSF STATUS, RP0
0079  00A2  	MOVWF roundFloat_0001A_1_zSigPlusRound+D'2'
007A  1283  	BCF STATUS, RP0
007B  082F  	MOVF gbl_15_gbl_zSig+D'3', W
007C  1683  	BSF STATUS, RP0
007D  00A3  	MOVWF roundFloat_0001A_1_zSigPlusRound+D'3'
007E  1283  	BCF STATUS, RP0
007F  0879  	MOVF roundFloat_0001A_1_roundIn_0001C, W
0080  1683  	BSF STATUS, RP0
0081  00A4  	MOVWF CompTempVar683
0082  01A5  	CLRF CompTempVar683+D'1'
0083  01A6  	CLRF CompTempVar683+D'2'
0084  01A7  	CLRF CompTempVar683+D'3'
0085  1283  	BCF STATUS, RP0
0086  1FF9  	BTFSS roundFloat_0001A_1_roundIn_0001C,7
0087  288C  	GOTO	label11
0088  1683  	BSF STATUS, RP0
0089  03A5  	DECF CompTempVar683+D'1', F
008A  03A6  	DECF CompTempVar683+D'2', F
008B  03A7  	DECF CompTempVar683+D'3', F
008C        label11
008C  1683  	BSF STATUS, RP0
008D  0824  	MOVF CompTempVar683, W
008E  07A0  	ADDWF roundFloat_0001A_1_zSigPlusRound, F
008F  0825  	MOVF CompTempVar683+D'1', W
0090  1803  	BTFSC STATUS,C
0091  0F25  	INCFSZ CompTempVar683+D'1', W
0092  07A1  	ADDWF roundFloat_0001A_1_zSigPlusRound+D'1', F
0093  0826  	MOVF CompTempVar683+D'2', W
0094  1803  	BTFSC STATUS,C
0095  0F26  	INCFSZ CompTempVar683+D'2', W
0096  07A2  	ADDWF roundFloat_0001A_1_zSigPlusRound+D'2', F
0097  0827  	MOVF CompTempVar683+D'3', W
0098  1803  	BTFSC STATUS,C
0099  0F27  	INCFSZ CompTempVar683+D'3', W
009A  07A3  	ADDWF roundFloat_0001A_1_zSigPlusRound+D'3', F
009B  307F  	MOVLW 0x7F
009C  1283  	BCF STATUS, RP0
009D  052C  	ANDWF gbl_15_gbl_zSig, W
009E  00FA  	MOVWF roundFloat_0001A_1_roundBits
009F  3000  	MOVLW 0x00
00A0  0244  	SUBWF gbl_15_gbl_zExp+D'1', W
00A1  1D03  	BTFSS STATUS,Z
00A2  28A5  	GOTO	label12
00A3  30FD  	MOVLW 0xFD
00A4  0243  	SUBWF gbl_15_gbl_zExp, W
00A5        label12
00A5  1C03  	BTFSS STATUS,C
00A6  294E  	GOTO	label27
00A7  0843  	MOVF gbl_15_gbl_zExp, W
00A8  3CFD  	SUBLW 0xFD
00A9  0844  	MOVF gbl_15_gbl_zExp+D'1', W
00AA  1803  	BTFSC STATUS,C
00AB  1D03  	BTFSS STATUS,Z
00AC  1BC4  	BTFSC gbl_15_gbl_zExp+D'1',7
00AD  28AF  	GOTO	label13
00AE  28B8  	GOTO	label14
00AF        label13
00AF  30FD  	MOVLW 0xFD
00B0  0643  	XORWF gbl_15_gbl_zExp, W
00B1  1903  	BTFSC STATUS,Z
00B2  0844  	MOVF gbl_15_gbl_zExp+D'1', W
00B3  1D03  	BTFSS STATUS,Z
00B4  28D0  	GOTO	label16
00B5  1683  	BSF STATUS, RP0
00B6  1FA3  	BTFSS roundFloat_0001A_1_zSigPlusRound+D'3',7
00B7  28D0  	GOTO	label16
00B8        label14
00B8  3028  	MOVLW 0x28
00B9  1283  	BCF STATUS, RP0
00BA  04C7  	IORWF gbl_float_exception_flags, F
00BB  08F9  	MOVF roundFloat_0001A_1_roundIn_0001C, F
00BC  1D03  	BTFSS STATUS,Z
00BD  28C8  	GOTO	label15
00BE  307F  	MOVLW 0x7F
00BF  00AE  	MOVWF gbl_15_gbl_zSig+D'2'
00C0  30FF  	MOVLW 0xFF
00C1  00AC  	MOVWF gbl_15_gbl_zSig
00C2  00AD  	MOVWF gbl_15_gbl_zSig+D'1'
00C3  01AF  	CLRF gbl_15_gbl_zSig+D'3'
00C4  30FE  	MOVLW 0xFE
00C5  00C3  	MOVWF gbl_15_gbl_zExp
00C6  01C4  	CLRF gbl_15_gbl_zExp+D'1'
00C7  0008  	RETURN
00C8        label15
00C8  30FF  	MOVLW 0xFF
00C9  00C3  	MOVWF gbl_15_gbl_zExp
00CA  01C4  	CLRF gbl_15_gbl_zExp+D'1'
00CB  01AC  	CLRF gbl_15_gbl_zSig
00CC  01AD  	CLRF gbl_15_gbl_zSig+D'1'
00CD  01AE  	CLRF gbl_15_gbl_zSig+D'2'
00CE  01AF  	CLRF gbl_15_gbl_zSig+D'3'
00CF  0008  	RETURN
00D0        label16
00D0  1283  	BCF STATUS, RP0
00D1  1FC4  	BTFSS gbl_15_gbl_zExp+D'1',7
00D2  294E  	GOTO	label27
00D3  01FE  	CLRF CompTempVar690
00D4  0345  	DECF gbl_float_detect_tininess, W
00D5  1903  	BTFSC STATUS,Z
00D6  0AFE  	INCF CompTempVar690, F
00D7  01FD  	CLRF CompTempVar689
00D8  0844  	MOVF gbl_15_gbl_zExp+D'1', W
00D9  3A80  	XORLW 0x80
00DA  1683  	BSF STATUS, RP0
00DB  00A7  	MOVWF CompTempVar696
00DC  307F  	MOVLW 0x7F
00DD  0227  	SUBWF CompTempVar696, W
00DE  1D03  	BTFSS STATUS,Z
00DF  28E3  	GOTO	label17
00E0  30FF  	MOVLW 0xFF
00E1  1283  	BCF STATUS, RP0
00E2  0243  	SUBWF gbl_15_gbl_zExp, W
00E3        label17
00E3  1803  	BTFSC STATUS,C
00E4  28E7  	GOTO	label18
00E5  1283  	BCF STATUS, RP0
00E6  0AFD  	INCF CompTempVar689, F
00E7  1683  	BSF STATUS, RP0
00E8  01A6  	CLRF CompTempVar694
00E9  1283  	BCF STATUS, RP0
00EA  08FD  	MOVF CompTempVar689, F
00EB  1903  	BTFSC STATUS,Z
00EC  08FE  	MOVF CompTempVar690, F
00ED  1903  	BTFSC STATUS,Z
00EE  28F1  	GOTO	label19
00EF  1683  	BSF STATUS, RP0
00F0  0AA6  	INCF CompTempVar694, F
00F1  3080  	MOVLW 0x80
00F2  1683  	BSF STATUS, RP0
00F3  0523  	ANDWF roundFloat_0001A_1_zSigPlusRound+D'3', W
00F4  00A4  	MOVWF CompTempVar692
00F5  01A5  	CLRF CompTempVar693
00F6  0AA5  	INCF CompTempVar693, F
00F7  08A4  	MOVF CompTempVar692, F
00F8  1D03  	BTFSS STATUS,Z
00F9  1025  	BCF CompTempVar693,0
00FA  1283  	BCF STATUS, RP0
00FB  01FB  	CLRF roundFloat_0001A_1_isTiny
00FC  1683  	BSF STATUS, RP0
00FD  08A5  	MOVF CompTempVar693, F
00FE  1903  	BTFSC STATUS,Z
00FF  08A6  	MOVF CompTempVar694, F
0100  1903  	BTFSC STATUS,Z
0101  2904  	GOTO	label20
0102  1283  	BCF STATUS, RP0
0103  0AFB  	INCF roundFloat_0001A_1_isTiny, F
0104  1283  	BCF STATUS, RP0
0105  08C3  	MOVF gbl_15_gbl_zExp, F
0106  1903  	BTFSC STATUS,Z
0107  08C4  	MOVF gbl_15_gbl_zExp+D'1', F
0108  1903  	BTFSC STATUS,Z
0109  2941  	GOTO	label26
010A  0943  	COMF gbl_15_gbl_zExp, W
010B  00FD  	MOVWF CompTempVar697
010C  0944  	COMF gbl_15_gbl_zExp+D'1', W
010D  00FE  	MOVWF CompTempVar698
010E  0AFD  	INCF CompTempVar697, F
010F  1903  	BTFSC STATUS,Z
0110  0AFE  	INCF CompTempVar698, F
0111  3020  	MOVLW 0x20
0112  027D  	SUBWF CompTempVar697, W
0113  087E  	MOVF CompTempVar698, W
0114  1803  	BTFSC STATUS,C
0115  2918  	GOTO	label21
0116  1903  	BTFSC STATUS,Z
0117  291A  	GOTO	label22
0118        label21
0118  1FFE  	BTFSS CompTempVar698,7
0119  2935  	GOTO	label25
011A        label22
011A  1683  	BSF STATUS, RP0
011B  1024  	BCF roundFloat_0001A_30_stickyBit,0
011C  1283  	BCF STATUS, RP0
011D  0943  	COMF gbl_15_gbl_zExp, W
011E  1683  	BSF STATUS, RP0
011F  00A5  	MOVWF roundFloat_0001A_30_count
0120  0AA5  	INCF roundFloat_0001A_30_count, F
0121        label23
0121  1283  	BCF STATUS, RP0
0122  1C2C  	BTFSS gbl_15_gbl_zSig,0
0123  2926  	GOTO	label24
0124  1683  	BSF STATUS, RP0
0125  1424  	BSF roundFloat_0001A_30_stickyBit,0
0126  1003  	BCF STATUS,C
0127  1283  	BCF STATUS, RP0
0128  0CAF  	RRF gbl_15_gbl_zSig+D'3', F
0129  0CAE  	RRF gbl_15_gbl_zSig+D'2', F
012A  0CAD  	RRF gbl_15_gbl_zSig+D'1', F
012B  0CAC  	RRF gbl_15_gbl_zSig, F
012C  1683  	BSF STATUS, RP0
012D  03A5  	DECF roundFloat_0001A_30_count, F
012E  1D03  	BTFSS STATUS,Z
012F  2921  	GOTO	label23
0130  1C24  	BTFSS roundFloat_0001A_30_stickyBit,0
0131  2941  	GOTO	label26
0132  1283  	BCF STATUS, RP0
0133  142C  	BSF gbl_15_gbl_zSig,0
0134  2941  	GOTO	label26
0135        label25
0135  082C  	MOVF gbl_15_gbl_zSig, W
0136  042D  	IORWF gbl_15_gbl_zSig+D'1', W
0137  042E  	IORWF gbl_15_gbl_zSig+D'2', W
0138  042F  	IORWF gbl_15_gbl_zSig+D'3', W
0139  39FF  	ANDLW 0xFF
013A  1903  	BTFSC STATUS,Z
013B  2941  	GOTO	label26
013C  3001  	MOVLW 0x01
013D  00AC  	MOVWF gbl_15_gbl_zSig
013E  01AD  	CLRF gbl_15_gbl_zSig+D'1'
013F  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0140  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0141        label26
0141  1283  	BCF STATUS, RP0
0142  01C3  	CLRF gbl_15_gbl_zExp
0143  01C4  	CLRF gbl_15_gbl_zExp+D'1'
0144  307F  	MOVLW 0x7F
0145  052C  	ANDWF gbl_15_gbl_zSig, W
0146  00FA  	MOVWF roundFloat_0001A_1_roundBits
0147  08FB  	MOVF roundFloat_0001A_1_isTiny, F
0148  1903  	BTFSC STATUS,Z
0149  294E  	GOTO	label27
014A  08FA  	MOVF roundFloat_0001A_1_roundBits, F
014B  1903  	BTFSC STATUS,Z
014C  294E  	GOTO	label27
014D  1647  	BSF gbl_float_exception_flags,4
014E        label27
014E  08FA  	MOVF roundFloat_0001A_1_roundBits, F
014F  1D03  	BTFSS STATUS,Z
0150  16C7  	BSF gbl_float_exception_flags,5
0151  0879  	MOVF roundFloat_0001A_1_roundIn_0001C, W
0152  1683  	BSF STATUS, RP0
0153  00A4  	MOVWF CompTempVar701
0154  01A5  	CLRF CompTempVar701+D'1'
0155  01A6  	CLRF CompTempVar701+D'2'
0156  01A7  	CLRF CompTempVar701+D'3'
0157  1283  	BCF STATUS, RP0
0158  1FF9  	BTFSS roundFloat_0001A_1_roundIn_0001C,7
0159  295E  	GOTO	label28
015A  1683  	BSF STATUS, RP0
015B  03A5  	DECF CompTempVar701+D'1', F
015C  03A6  	DECF CompTempVar701+D'2', F
015D  03A7  	DECF CompTempVar701+D'3', F
015E        label28
015E  1683  	BSF STATUS, RP0
015F  0824  	MOVF CompTempVar701, W
0160  1283  	BCF STATUS, RP0
0161  07AC  	ADDWF gbl_15_gbl_zSig, F
0162  1683  	BSF STATUS, RP0
0163  0825  	MOVF CompTempVar701+D'1', W
0164  1C03  	BTFSS STATUS,C
0165  2969  	GOTO	label29
0166  0F25  	INCFSZ CompTempVar701+D'1', W
0167  2969  	GOTO	label29
0168  296B  	GOTO	label30
0169        label29
0169  1283  	BCF STATUS, RP0
016A  07AD  	ADDWF gbl_15_gbl_zSig+D'1', F
016B        label30
016B  1683  	BSF STATUS, RP0
016C  0826  	MOVF CompTempVar701+D'2', W
016D  1C03  	BTFSS STATUS,C
016E  2972  	GOTO	label31
016F  0F26  	INCFSZ CompTempVar701+D'2', W
0170  2972  	GOTO	label31
0171  2974  	GOTO	label32
0172        label31
0172  1283  	BCF STATUS, RP0
0173  07AE  	ADDWF gbl_15_gbl_zSig+D'2', F
0174        label32
0174  1683  	BSF STATUS, RP0
0175  0827  	MOVF CompTempVar701+D'3', W
0176  1C03  	BTFSS STATUS,C
0177  297B  	GOTO	label33
0178  0F27  	INCFSZ CompTempVar701+D'3', W
0179  297B  	GOTO	label33
017A  297D  	GOTO	label34
017B        label33
017B  1283  	BCF STATUS, RP0
017C  07AF  	ADDWF gbl_15_gbl_zSig+D'3', F
017D        label34
017D  3007  	MOVLW 0x07
017E  1283  	BCF STATUS, RP0
017F  00FD  	MOVWF roundFloat_0001A_44_i
0180        label35
0180  08FD  	MOVF roundFloat_0001A_44_i, F
0181  1903  	BTFSC STATUS,Z
0182  298A  	GOTO	label36
0183  1003  	BCF STATUS,C
0184  0CAF  	RRF gbl_15_gbl_zSig+D'3', F
0185  0CAE  	RRF gbl_15_gbl_zSig+D'2', F
0186  0CAD  	RRF gbl_15_gbl_zSig+D'1', F
0187  0CAC  	RRF gbl_15_gbl_zSig, F
0188  03FD  	DECF roundFloat_0001A_44_i, F
0189  2980  	GOTO	label35
018A        label36
018A  3040  	MOVLW 0x40
018B  067A  	XORWF roundFloat_0001A_1_roundBits, W
018C  1D03  	BTFSS STATUS,Z
018D  2991  	GOTO	label37
018E  08F8  	MOVF roundFloat_0001A_1_roundNe_0001B, F
018F  1D03  	BTFSS STATUS,Z
0190  102C  	BCF gbl_15_gbl_zSig,0
0191        label37
0191  082C  	MOVF gbl_15_gbl_zSig, W
0192  042D  	IORWF gbl_15_gbl_zSig+D'1', W
0193  042E  	IORWF gbl_15_gbl_zSig+D'2', W
0194  042F  	IORWF gbl_15_gbl_zSig+D'3', W
0195  39FF  	ANDLW 0xFF
0196  1D03  	BTFSS STATUS,Z
0197  0008  	RETURN
0198  01C3  	CLRF gbl_15_gbl_zExp
0199  01C4  	CLRF gbl_15_gbl_zExp+D'1'
019A  0008  	RETURN
019B        ; } roundFloat32NA function end

019B        packFloat3_0001D
019B        ; { packFloat32NA ; function begin
019B  1283  	BCF STATUS, RP0
019C  1303  	BCF STATUS, RP1
019D  1C2F  	BTFSS gbl_15_gbl_zSig+D'3',0
019E  29A3  	GOTO	label38
019F  3002  	MOVLW 0x02
01A0  07C3  	ADDWF gbl_15_gbl_zExp, F
01A1  1803  	BTFSC STATUS,C
01A2  0AC4  	INCF gbl_15_gbl_zExp+D'1', F
01A3        label38
01A3  1FAE  	BTFSS gbl_15_gbl_zSig+D'2',7
01A4  29A9  	GOTO	label39
01A5  0AC3  	INCF gbl_15_gbl_zExp, F
01A6  1D03  	BTFSS STATUS,Z
01A7  29A9  	GOTO	label39
01A8  0AC4  	INCF gbl_15_gbl_zExp+D'1', F
01A9        label39
01A9  0843  	MOVF gbl_15_gbl_zExp, W
01AA  00AF  	MOVWF gbl_15_gbl_zSig+D'3'
01AB  1003  	BCF STATUS,C
01AC  0CAF  	RRF gbl_15_gbl_zSig+D'3', F
01AD  13AE  	BCF gbl_15_gbl_zSig+D'2',7
01AE  1843  	BTFSC gbl_15_gbl_zExp,0
01AF  17AE  	BSF gbl_15_gbl_zSig+D'2',7
01B0  08CC  	MOVF gbl_15_gbl_zSign, F
01B1  1D03  	BTFSS STATUS,Z
01B2  17AF  	BSF gbl_15_gbl_zSig+D'3',7
01B3  0008  	RETURN
01B4        ; } packFloat32NA function end

01B4        mul32To32s_0002C
01B4        ; { mul32To32sticky ; function begin
01B4  3040  	MOVLW 0x40
01B5  1283  	BCF STATUS, RP0
01B6  1303  	BCF STATUS, RP1
01B7  00EA  	MOVWF mul32To32s_0002C_1_i
01B8  01F2  	CLRF mul32To32s_0002C_1_zSig0
01B9  01F3  	CLRF mul32To32s_0002C_1_zSig0+D'1'
01BA  01F4  	CLRF mul32To32s_0002C_1_zSig0+D'2'
01BB  01F5  	CLRF mul32To32s_0002C_1_zSig0+D'3'
01BC  01AC  	CLRF gbl_15_gbl_zSig
01BD  01AD  	CLRF gbl_15_gbl_zSig+D'1'
01BE  01AE  	CLRF gbl_15_gbl_zSig+D'2'
01BF  01AF  	CLRF gbl_15_gbl_zSig+D'3'
01C0        label40
01C0  086A  	MOVF mul32To32s_0002C_1_i, W
01C1  00EB  	MOVWF CompTempVar988
01C2  03EA  	DECF mul32To32s_0002C_1_i, F
01C3  08EB  	MOVF CompTempVar988, F
01C4  1903  	BTFSC STATUS,Z
01C5  2A01  	GOTO	label43
01C6  1003  	BCF STATUS,C
01C7  0DAC  	RLF gbl_15_gbl_zSig, F
01C8  0DAD  	RLF gbl_15_gbl_zSig+D'1', F
01C9  0DAE  	RLF gbl_15_gbl_zSig+D'2', F
01CA  0DAF  	RLF gbl_15_gbl_zSig+D'3', F
01CB  1BF5  	BTFSC mul32To32s_0002C_1_zSig0+D'3',7
01CC  142C  	BSF gbl_15_gbl_zSig,0
01CD  1003  	BCF STATUS,C
01CE  0DF2  	RLF mul32To32s_0002C_1_zSig0, F
01CF  0DF3  	RLF mul32To32s_0002C_1_zSig0+D'1', F
01D0  0DF4  	RLF mul32To32s_0002C_1_zSig0+D'2', F
01D1  0DF5  	RLF mul32To32s_0002C_1_zSig0+D'3', F
01D2  1FAB  	BTFSS gbl_15_gbl_bSig+D'3',7
01D3  29F9  	GOTO	label42
01D4  0824  	MOVF gbl_15_gbl_aSig, W
01D5  07F2  	ADDWF mul32To32s_0002C_1_zSig0, F
01D6  0825  	MOVF gbl_15_gbl_aSig+D'1', W
01D7  1803  	BTFSC STATUS,C
01D8  0F25  	INCFSZ gbl_15_gbl_aSig+D'1', W
01D9  07F3  	ADDWF mul32To32s_0002C_1_zSig0+D'1', F
01DA  0826  	MOVF gbl_15_gbl_aSig+D'2', W
01DB  1803  	BTFSC STATUS,C
01DC  0F26  	INCFSZ gbl_15_gbl_aSig+D'2', W
01DD  07F4  	ADDWF mul32To32s_0002C_1_zSig0+D'2', F
01DE  0827  	MOVF gbl_15_gbl_aSig+D'3', W
01DF  1803  	BTFSC STATUS,C
01E0  0F27  	INCFSZ gbl_15_gbl_aSig+D'3', W
01E1  07F5  	ADDWF mul32To32s_0002C_1_zSig0+D'3', F
01E2  0827  	MOVF gbl_15_gbl_aSig+D'3', W
01E3  0275  	SUBWF mul32To32s_0002C_1_zSig0+D'3', W
01E4  1D03  	BTFSS STATUS,Z
01E5  29F0  	GOTO	label41
01E6  0826  	MOVF gbl_15_gbl_aSig+D'2', W
01E7  0274  	SUBWF mul32To32s_0002C_1_zSig0+D'2', W
01E8  1D03  	BTFSS STATUS,Z
01E9  29F0  	GOTO	label41
01EA  0825  	MOVF gbl_15_gbl_aSig+D'1', W
01EB  0273  	SUBWF mul32To32s_0002C_1_zSig0+D'1', W
01EC  1D03  	BTFSS STATUS,Z
01ED  29F0  	GOTO	label41
01EE  0824  	MOVF gbl_15_gbl_aSig, W
01EF  0272  	SUBWF mul32To32s_0002C_1_zSig0, W
01F0        label41
01F0  1803  	BTFSC STATUS,C
01F1  29F9  	GOTO	label42
01F2  0AAC  	INCF gbl_15_gbl_zSig, F
01F3  1903  	BTFSC STATUS,Z
01F4  0AAD  	INCF gbl_15_gbl_zSig+D'1', F
01F5  1903  	BTFSC STATUS,Z
01F6  0AAE  	INCF gbl_15_gbl_zSig+D'2', F
01F7  1903  	BTFSC STATUS,Z
01F8  0AAF  	INCF gbl_15_gbl_zSig+D'3', F
01F9        label42
01F9  1BAF  	BTFSC gbl_15_gbl_zSig+D'3',7
01FA  2A01  	GOTO	label43
01FB  1003  	BCF STATUS,C
01FC  0DA8  	RLF gbl_15_gbl_bSig, F
01FD  0DA9  	RLF gbl_15_gbl_bSig+D'1', F
01FE  0DAA  	RLF gbl_15_gbl_bSig+D'2', F
01FF  0DAB  	RLF gbl_15_gbl_bSig+D'3', F
0200  29C0  	GOTO	label40
0201        label43
0201  01C4  	CLRF gbl_15_gbl_zExp+D'1'
0202  3020  	MOVLW 0x20
0203  026A  	SUBWF mul32To32s_0002C_1_i, W
0204  00C3  	MOVWF gbl_15_gbl_zExp
0205  1C03  	BTFSS STATUS,C
0206  03C4  	DECF gbl_15_gbl_zExp+D'1', F
0207  1BEA  	BTFSC mul32To32s_0002C_1_i,7
0208  03C4  	DECF gbl_15_gbl_zExp+D'1', F
0209  0872  	MOVF mul32To32s_0002C_1_zSig0, W
020A  0473  	IORWF mul32To32s_0002C_1_zSig0+D'1', W
020B  0474  	IORWF mul32To32s_0002C_1_zSig0+D'2', W
020C  0475  	IORWF mul32To32s_0002C_1_zSig0+D'3', W
020D  39FF  	ANDLW 0xFF
020E  1D03  	BTFSS STATUS,Z
020F  142C  	BSF gbl_15_gbl_zSig,0
0210  0008  	RETURN
0211        ; } mul32To32sticky function end

0211        _float32_a_0002A
0211        ; { _float32_addSig ; function begin
0211  1283  	BCF STATUS, RP0
0212  1303  	BCF STATUS, RP1
0213  0824  	MOVF gbl_15_gbl_aSig, W
0214  00AC  	MOVWF gbl_15_gbl_zSig
0215  0825  	MOVF gbl_15_gbl_aSig+D'1', W
0216  00AD  	MOVWF gbl_15_gbl_zSig+D'1'
0217  0826  	MOVF gbl_15_gbl_aSig+D'2', W
0218  00AE  	MOVWF gbl_15_gbl_zSig+D'2'
0219  0827  	MOVF gbl_15_gbl_aSig+D'3', W
021A  00AF  	MOVWF gbl_15_gbl_zSig+D'3'
021B  084B  	MOVF gbl_15_gbl_bSign, W
021C  064A  	XORWF gbl_15_gbl_aSign, W
021D  1903  	BTFSC STATUS,Z
021E  2A3A  	GOTO	label44
021F  0828  	MOVF gbl_15_gbl_bSig, W
0220  3C00  	SUBLW 0x00
0221  00F8  	MOVWF CompTempVar921
0222  3000  	MOVLW 0x00
0223  00F9  	MOVWF CompTempVar922
0224  00FA  	MOVWF CompTempVar923
0225  00FB  	MOVWF CompTempVar924
0226  0829  	MOVF gbl_15_gbl_bSig+D'1', W
0227  1C03  	BTFSS STATUS,C
0228  0F29  	INCFSZ gbl_15_gbl_bSig+D'1', W
0229  02F9  	SUBWF CompTempVar922, F
022A  082A  	MOVF gbl_15_gbl_bSig+D'2', W
022B  1C03  	BTFSS STATUS,C
022C  0F2A  	INCFSZ gbl_15_gbl_bSig+D'2', W
022D  02FA  	SUBWF CompTempVar923, F
022E  082B  	MOVF gbl_15_gbl_bSig+D'3', W
022F  1C03  	BTFSS STATUS,C
0230  0F2B  	INCFSZ gbl_15_gbl_bSig+D'3', W
0231  02FB  	SUBWF CompTempVar924, F
0232  0878  	MOVF CompTempVar921, W
0233  00A8  	MOVWF gbl_15_gbl_bSig
0234  0879  	MOVF CompTempVar922, W
0235  00A9  	MOVWF gbl_15_gbl_bSig+D'1'
0236  087A  	MOVF CompTempVar923, W
0237  00AA  	MOVWF gbl_15_gbl_bSig+D'2'
0238  087B  	MOVF CompTempVar924, W
0239  00AB  	MOVWF gbl_15_gbl_bSig+D'3'
023A        label44
023A  0828  	MOVF gbl_15_gbl_bSig, W
023B  07AC  	ADDWF gbl_15_gbl_zSig, F
023C  0829  	MOVF gbl_15_gbl_bSig+D'1', W
023D  1803  	BTFSC STATUS,C
023E  0F29  	INCFSZ gbl_15_gbl_bSig+D'1', W
023F  07AD  	ADDWF gbl_15_gbl_zSig+D'1', F
0240  082A  	MOVF gbl_15_gbl_bSig+D'2', W
0241  1803  	BTFSC STATUS,C
0242  0F2A  	INCFSZ gbl_15_gbl_bSig+D'2', W
0243  07AE  	ADDWF gbl_15_gbl_zSig+D'2', F
0244  082B  	MOVF gbl_15_gbl_bSig+D'3', W
0245  1803  	BTFSC STATUS,C
0246  0F2B  	INCFSZ gbl_15_gbl_bSig+D'3', W
0247  07AF  	ADDWF gbl_15_gbl_zSig+D'3', F
0248  01CD  	CLRF gbl_15_gbl_zSigZero
0249  082C  	MOVF gbl_15_gbl_zSig, W
024A  042D  	IORWF gbl_15_gbl_zSig+D'1', W
024B  042E  	IORWF gbl_15_gbl_zSig+D'2', W
024C  042F  	IORWF gbl_15_gbl_zSig+D'3', W
024D  39FF  	ANDLW 0xFF
024E  1D03  	BTFSS STATUS,Z
024F  0008  	RETURN
0250  3001  	MOVLW 0x01
0251  00CD  	MOVWF gbl_15_gbl_zSigZero
0252  0008  	RETURN
0253        ; } _float32_addSig function end

0253        __div_16_1_00003
0253        ; { __div_16_16 ; function begin
0253  01E3  	CLRF __div_16_1_00003_1_r
0254  01E4  	CLRF __div_16_1_00003_1_r+D'1'
0255  01E6  	CLRF CompTempVarRet214
0256  01E7  	CLRF CompTempVarRet214+D'1'
0257  01E5  	CLRF __div_16_1_00003_1_i
0258        label45
0258  1A65  	BTFSC __div_16_1_00003_1_i,4
0259  0008  	RETURN
025A  1003  	BCF STATUS,C
025B  0DE6  	RLF CompTempVarRet214, F
025C  0DE7  	RLF CompTempVarRet214+D'1', F
025D  0DDD  	RLF __div_16_1_00003_arg_a, F
025E  0DDE  	RLF __div_16_1_00003_arg_a+D'1', F
025F  0DE3  	RLF __div_16_1_00003_1_r, F
0260  0DE4  	RLF __div_16_1_00003_1_r+D'1', F
0261  0860  	MOVF __div_16_1_00003_arg_b+D'1', W
0262  0264  	SUBWF __div_16_1_00003_1_r+D'1', W
0263  1D03  	BTFSS STATUS,Z
0264  2A67  	GOTO	label46
0265  085F  	MOVF __div_16_1_00003_arg_b, W
0266  0263  	SUBWF __div_16_1_00003_1_r, W
0267        label46
0267  1C03  	BTFSS STATUS,C
0268  2A70  	GOTO	label47
0269  085F  	MOVF __div_16_1_00003_arg_b, W
026A  02E3  	SUBWF __div_16_1_00003_1_r, F
026B  0860  	MOVF __div_16_1_00003_arg_b+D'1', W
026C  1C03  	BTFSS STATUS,C
026D  03E4  	DECF __div_16_1_00003_1_r+D'1', F
026E  02E4  	SUBWF __div_16_1_00003_1_r+D'1', F
026F  1466  	BSF CompTempVarRet214,0
0270        label47
0270  0AE5  	INCF __div_16_1_00003_1_i, F
0271  2A58  	GOTO	label45
0272        ; } __div_16_16 function end


027D        NormaliseF_00019
027D        ; { NormaliseFloat32NA ; function begin
027D  1283  	BCF STATUS, RP0
027E  1303  	BCF STATUS, RP1
027F  082C  	MOVF gbl_15_gbl_zSig, W
0280  042D  	IORWF gbl_15_gbl_zSig+D'1', W
0281  042E  	IORWF gbl_15_gbl_zSig+D'2', W
0282  042F  	IORWF gbl_15_gbl_zSig+D'3', W
0283  39FF  	ANDLW 0xFF
0284  1903  	BTFSC STATUS,Z
0285  2A92  	GOTO	label50
0286        label49
0286  1B2F  	BTFSC gbl_15_gbl_zSig+D'3',6
0287  0008  	RETURN
0288  1003  	BCF STATUS,C
0289  0DAC  	RLF gbl_15_gbl_zSig, F
028A  0DAD  	RLF gbl_15_gbl_zSig+D'1', F
028B  0DAE  	RLF gbl_15_gbl_zSig+D'2', F
028C  0DAF  	RLF gbl_15_gbl_zSig+D'3', F
028D  08C3  	MOVF gbl_15_gbl_zExp, F
028E  1903  	BTFSC STATUS,Z
028F  03C4  	DECF gbl_15_gbl_zExp+D'1', F
0290  03C3  	DECF gbl_15_gbl_zExp, F
0291  2A86  	GOTO	label49
0292        label50
0292  01C3  	CLRF gbl_15_gbl_zExp
0293  01C4  	CLRF gbl_15_gbl_zExp+D'1'
0294  0008  	RETURN
0295        ; } NormaliseFloat32NA function end


0316        float32_to_int32
0316        ; { float32_to_int32 ; function begin
0316  0858  	MOVF float32_to_int32_arg_a, W
0317  00A4  	MOVWF gbl_15_gbl_aSig
0318  0859  	MOVF float32_to_int32_arg_a+D'1', W
0319  00A5  	MOVWF gbl_15_gbl_aSig+D'1'
031A  085A  	MOVF float32_to_int32_arg_a+D'2', W
031B  00A6  	MOVWF gbl_15_gbl_aSig+D'2'
031C  13A6  	BCF gbl_15_gbl_aSig+D'2',7
031D  01A7  	CLRF gbl_15_gbl_aSig+D'3'
031E  085B  	MOVF float32_to_int32_arg_a+D'3', W
031F  00C8  	MOVWF gbl_15_gbl_aExp
0320  13C8  	BCF gbl_15_gbl_aExp,7
0321  1003  	BCF STATUS,C
0322  0DC8  	RLF gbl_15_gbl_aExp, F
0323  1BDA  	BTFSC float32_to_int32_arg_a+D'2',7
0324  1448  	BSF gbl_15_gbl_aExp,0
0325  01CA  	CLRF gbl_15_gbl_aSign
0326  1FDB  	BTFSS float32_to_int32_arg_a+D'3',7
0327  2B2A  	GOTO	label60
0328  3001  	MOVLW 0x01
0329  00CA  	MOVWF gbl_15_gbl_aSign
032A        label60
032A  01DD  	CLRF float32_to_int32_1_shiftCount+D'1'
032B  3096  	MOVLW 0x96
032C  0248  	SUBWF gbl_15_gbl_aExp, W
032D  00DC  	MOVWF float32_to_int32_1_shiftCount
032E  1C03  	BTFSS STATUS,C
032F  03DD  	DECF float32_to_int32_1_shiftCount+D'1', F
0330  3080  	MOVLW 0x80
0331  0248  	SUBWF gbl_15_gbl_aExp, W
0332  00DE  	MOVWF float32_to_int32_1_absExp_1
0333  085E  	MOVF float32_to_int32_1_absExp_1, W
0334  3C15  	SUBLW 0x15
0335  1803  	BTFSC STATUS,C
0336  2BA3  	GOTO	label68
0337  1BDE  	BTFSC float32_to_int32_1_absExp_1,7
0338  2BA3  	GOTO	label68
0339  085E  	MOVF float32_to_int32_1_absExp_1, W
033A  3C1D  	SUBLW 0x1D
033B  1803  	BTFSC STATUS,C
033C  2B6D  	GOTO	label64
033D  1BDE  	BTFSC float32_to_int32_1_absExp_1,7
033E  2B6D  	GOTO	label64
033F  0858  	MOVF float32_to_int32_arg_a, W
0340  3C00  	SUBLW 0x00
0341  1D03  	BTFSS STATUS,Z
0342  2B4F  	GOTO	label61
0343  0859  	MOVF float32_to_int32_arg_a+D'1', W
0344  3C00  	SUBLW 0x00
0345  1D03  	BTFSS STATUS,Z
0346  2B4F  	GOTO	label61
0347  085A  	MOVF float32_to_int32_arg_a+D'2', W
0348  3C00  	SUBLW 0x00
0349  1D03  	BTFSS STATUS,Z
034A  2B4F  	GOTO	label61
034B  085B  	MOVF float32_to_int32_arg_a+D'3', W
034C  3CCF  	SUBLW 0xCF
034D  1903  	BTFSC STATUS,Z
034E  2B67  	GOTO	label63
034F        label61
034F  1447  	BSF gbl_float_exception_flags,0
0350  08CA  	MOVF gbl_15_gbl_aSign, F
0351  1903  	BTFSC STATUS,Z
0352  2B60  	GOTO	label62
0353  085E  	MOVF float32_to_int32_1_absExp_1, W
0354  3A7F  	XORLW 0x7F
0355  1BDE  	BTFSC float32_to_int32_1_absExp_1,7
0356  2B67  	GOTO	label63
0357  1D03  	BTFSS STATUS,Z
0358  2B67  	GOTO	label63
0359  0824  	MOVF gbl_15_gbl_aSig, W
035A  0425  	IORWF gbl_15_gbl_aSig+D'1', W
035B  0426  	IORWF gbl_15_gbl_aSig+D'2', W
035C  0427  	IORWF gbl_15_gbl_aSig+D'3', W
035D  39FF  	ANDLW 0xFF
035E  1903  	BTFSC STATUS,Z
035F  2B67  	GOTO	label63
0360        label62
0360  307F  	MOVLW 0x7F
0361  00E6  	MOVWF CompTempVarRet710+D'3'
0362  30FF  	MOVLW 0xFF
0363  00E3  	MOVWF CompTempVarRet710
0364  00E4  	MOVWF CompTempVarRet710+D'1'
0365  00E5  	MOVWF CompTempVarRet710+D'2'
0366  0008  	RETURN
0367        label63
0367  01E3  	CLRF CompTempVarRet710
0368  01E4  	CLRF CompTempVarRet710+D'1'
0369  01E5  	CLRF CompTempVarRet710+D'2'
036A  3080  	MOVLW 0x80
036B  00E6  	MOVWF CompTempVarRet710+D'3'
036C  0008  	RETURN
036D        label64
036D  3016  	MOVLW 0x16
036E  02DE  	SUBWF float32_to_int32_1_absExp_1, F
036F  17A6  	BSF gbl_15_gbl_aSig+D'2',7
0370  085E  	MOVF float32_to_int32_1_absExp_1, W
0371  00E7  	MOVWF float32_to_int32_28_i
0372        label65
0372  08E7  	MOVF float32_to_int32_28_i, F
0373  1903  	BTFSC STATUS,Z
0374  2B7C  	GOTO	label66
0375  1003  	BCF STATUS,C
0376  0DA4  	RLF gbl_15_gbl_aSig, F
0377  0DA5  	RLF gbl_15_gbl_aSig+D'1', F
0378  0DA6  	RLF gbl_15_gbl_aSig+D'2', F
0379  0DA7  	RLF gbl_15_gbl_aSig+D'3', F
037A  03E7  	DECF float32_to_int32_28_i, F
037B  2B72  	GOTO	label65
037C        label66
037C  08CA  	MOVF gbl_15_gbl_aSign, F
037D  1903  	BTFSC STATUS,Z
037E  2B9A  	GOTO	label67
037F  0824  	MOVF gbl_15_gbl_aSig, W
0380  3C00  	SUBLW 0x00
0381  00E7  	MOVWF CompTempVar727
0382  3000  	MOVLW 0x00
0383  00E8  	MOVWF CompTempVar728
0384  00E9  	MOVWF CompTempVar729
0385  00EA  	MOVWF CompTempVar730
0386  0825  	MOVF gbl_15_gbl_aSig+D'1', W
0387  1C03  	BTFSS STATUS,C
0388  0F25  	INCFSZ gbl_15_gbl_aSig+D'1', W
0389  02E8  	SUBWF CompTempVar728, F
038A  0826  	MOVF gbl_15_gbl_aSig+D'2', W
038B  1C03  	BTFSS STATUS,C
038C  0F26  	INCFSZ gbl_15_gbl_aSig+D'2', W
038D  02E9  	SUBWF CompTempVar729, F
038E  0827  	MOVF gbl_15_gbl_aSig+D'3', W
038F  1C03  	BTFSS STATUS,C
0390  0F27  	INCFSZ gbl_15_gbl_aSig+D'3', W
0391  02EA  	SUBWF CompTempVar730, F
0392  0867  	MOVF CompTempVar727, W
0393  00A4  	MOVWF gbl_15_gbl_aSig
0394  0868  	MOVF CompTempVar728, W
0395  00A5  	MOVWF gbl_15_gbl_aSig+D'1'
0396  0869  	MOVF CompTempVar729, W
0397  00A6  	MOVWF gbl_15_gbl_aSig+D'2'
0398  086A  	MOVF CompTempVar730, W
0399  00A7  	MOVWF gbl_15_gbl_aSig+D'3'
039A        label67
039A  0824  	MOVF gbl_15_gbl_aSig, W
039B  00E3  	MOVWF CompTempVarRet710
039C  0825  	MOVF gbl_15_gbl_aSig+D'1', W
039D  00E4  	MOVWF CompTempVarRet710+D'1'
039E  0826  	MOVF gbl_15_gbl_aSig+D'2', W
039F  00E5  	MOVWF CompTempVarRet710+D'2'
03A0  0827  	MOVF gbl_15_gbl_aSig+D'3', W
03A1  00E6  	MOVWF CompTempVarRet710+D'3'
03A2  0008  	RETURN
03A3        label68
03A3  307E  	MOVLW 0x7E
03A4  0248  	SUBWF gbl_15_gbl_aExp, W
03A5  1803  	BTFSC STATUS,C
03A6  2BC1  	GOTO	label73
03A7  08C8  	MOVF gbl_15_gbl_aExp, F
03A8  1903  	BTFSC STATUS,Z
03A9  2BAB  	GOTO	label69
03AA  2BB2  	GOTO	label70
03AB        label69
03AB  0824  	MOVF gbl_15_gbl_aSig, W
03AC  0425  	IORWF gbl_15_gbl_aSig+D'1', W
03AD  0426  	IORWF gbl_15_gbl_aSig+D'2', W
03AE  0427  	IORWF gbl_15_gbl_aSig+D'3', W
03AF  39FF  	ANDLW 0xFF
03B0  1903  	BTFSC STATUS,Z
03B1  2BB8  	GOTO	label71
03B2        label70
03B2  3001  	MOVLW 0x01
03B3  00E7  	MOVWF float32_to_int32_32_aSigExtra
03B4  01E8  	CLRF float32_to_int32_32_aSigExtra+D'1'
03B5  01E9  	CLRF float32_to_int32_32_aSigExtra+D'2'
03B6  01EA  	CLRF float32_to_int32_32_aSigExtra+D'3'
03B7  2BBC  	GOTO	label72
03B8        label71
03B8  01E7  	CLRF float32_to_int32_32_aSigExtra
03B9  01E8  	CLRF float32_to_int32_32_aSigExtra+D'1'
03BA  01E9  	CLRF float32_to_int32_32_aSigExtra+D'2'
03BB  01EA  	CLRF float32_to_int32_32_aSigExtra+D'3'
03BC        label72
03BC  01DF  	CLRF float32_to_int32_1_z
03BD  01E0  	CLRF float32_to_int32_1_z+D'1'
03BE  01E1  	CLRF float32_to_int32_1_z+D'2'
03BF  01E2  	CLRF float32_to_int32_1_z+D'3'
03C0  2BF0  	GOTO	label77
03C1        label73
03C1  17A6  	BSF gbl_15_gbl_aSig+D'2',7
03C2  0824  	MOVF gbl_15_gbl_aSig, W
03C3  00E7  	MOVWF float32_to_int32_32_aSigExtra
03C4  0825  	MOVF gbl_15_gbl_aSig+D'1', W
03C5  00E8  	MOVWF float32_to_int32_32_aSigExtra+D'1'
03C6  0826  	MOVF gbl_15_gbl_aSig+D'2', W
03C7  00E9  	MOVWF float32_to_int32_32_aSigExtra+D'2'
03C8  0827  	MOVF gbl_15_gbl_aSig+D'3', W
03C9  00EA  	MOVWF float32_to_int32_32_aSigExtra+D'3'
03CA  301F  	MOVLW 0x1F
03CB  055C  	ANDWF float32_to_int32_1_shiftCount, W
03CC  00EB  	MOVWF float32_to_int32_40_i
03CD        label74
03CD  08EB  	MOVF float32_to_int32_40_i, F
03CE  1903  	BTFSC STATUS,Z
03CF  2BD7  	GOTO	label75
03D0  1003  	BCF STATUS,C
03D1  0DE7  	RLF float32_to_int32_32_aSigExtra, F
03D2  0DE8  	RLF float32_to_int32_32_aSigExtra+D'1', F
03D3  0DE9  	RLF float32_to_int32_32_aSigExtra+D'2', F
03D4  0DEA  	RLF float32_to_int32_32_aSigExtra+D'3', F
03D5  03EB  	DECF float32_to_int32_40_i, F
03D6  2BCD  	GOTO	label74
03D7        label75
03D7  0824  	MOVF gbl_15_gbl_aSig, W
03D8  00DF  	MOVWF float32_to_int32_1_z
03D9  0825  	MOVF gbl_15_gbl_aSig+D'1', W
03DA  00E0  	MOVWF float32_to_int32_1_z+D'1'
03DB  0826  	MOVF gbl_15_gbl_aSig+D'2', W
03DC  00E1  	MOVWF float32_to_int32_1_z+D'2'
03DD  0827  	MOVF gbl_15_gbl_aSig+D'3', W
03DE  00E2  	MOVWF float32_to_int32_1_z+D'3'
03DF  09DC  	COMF float32_to_int32_1_shiftCount, F
03E0  09DD  	COMF float32_to_int32_1_shiftCount+D'1', F
03E1  0ADC  	INCF float32_to_int32_1_shiftCount, F
03E2  1903  	BTFSC STATUS,Z
03E3  0ADD  	INCF float32_to_int32_1_shiftCount+D'1', F
03E4  085C  	MOVF float32_to_int32_1_shiftCount, W
03E5  00EB  	MOVWF float32_to_int32_44_i
03E6        label76
03E6  08EB  	MOVF float32_to_int32_44_i, F
03E7  1903  	BTFSC STATUS,Z
03E8  2BF0  	GOTO	label77
03E9  0D62  	RLF float32_to_int32_1_z+D'3', W
03EA  0CE2  	RRF float32_to_int32_1_z+D'3', F
03EB  0CE1  	RRF float32_to_int32_1_z+D'2', F
03EC  0CE0  	RRF float32_to_int32_1_z+D'1', F
03ED  0CDF  	RRF float32_to_int32_1_z, F
03EE  03EB  	DECF float32_to_int32_44_i, F
03EF  2BE6  	GOTO	label76
03F0        label77
03F0  0867  	MOVF float32_to_int32_32_aSigExtra, W
03F1  0468  	IORWF float32_to_int32_32_aSigExtra+D'1', W
03F2  0469  	IORWF float32_to_int32_32_aSigExtra+D'2', W
03F3  046A  	IORWF float32_to_int32_32_aSigExtra+D'3', W
03F4  39FF  	ANDLW 0xFF
03F5  1D03  	BTFSS STATUS,Z
03F6  16C7  	BSF gbl_float_exception_flags,5
03F7  08C6  	MOVF gbl_float_rounding_mode, F
03F8  1D03  	BTFSS STATUS,Z
03F9  2C38  	GOTO	label79
03FA  1FEA  	BTFSS float32_to_int32_32_aSigExtra+D'3',7
03FB  2C19  	GOTO	label78
03FC  0ADF  	INCF float32_to_int32_1_z, F
03FD  1903  	BTFSC STATUS,Z
03FE  0AE0  	INCF float32_to_int32_1_z+D'1', F
03FF  1903  	BTFSC STATUS,Z
0400  0AE1  	INCF float32_to_int32_1_z+D'2', F
0401  1903  	BTFSC STATUS,Z
0402  0AE2  	INCF float32_to_int32_1_z+D'3', F
0403  0867  	MOVF float32_to_int32_32_aSigExtra, W
0404  00EB  	MOVWF CompTempVar735
0405  0868  	MOVF float32_to_int32_32_aSigExtra+D'1', W
0406  00EC  	MOVWF CompTempVar736
0407  0869  	MOVF float32_to_int32_32_aSigExtra+D'2', W
0408  00ED  	MOVWF CompTempVar737
0409  086A  	MOVF float32_to_int32_32_aSigExtra+D'3', W
040A  00EE  	MOVWF CompTempVar738
040B  1003  	BCF STATUS,C
040C  0DEB  	RLF CompTempVar735, F
040D  0DEC  	RLF CompTempVar736, F
040E  0DED  	RLF CompTempVar737, F
040F  0DEE  	RLF CompTempVar738, F
0410  086B  	MOVF CompTempVar735, W
0411  046C  	IORWF CompTempVar736, W
0412  046D  	IORWF CompTempVar737, W
0413  046E  	IORWF CompTempVar738, W
0414  39FF  	ANDLW 0xFF
0415  1D03  	BTFSS STATUS,Z
0416  2C19  	GOTO	label78
0417  30FE  	MOVLW 0xFE
0418  05DF  	ANDWF float32_to_int32_1_z, F
0419        label78
0419  08CA  	MOVF gbl_15_gbl_aSign, F
041A  1903  	BTFSC STATUS,Z
041B  2C7A  	GOTO	label82
041C  085F  	MOVF float32_to_int32_1_z, W
041D  3C00  	SUBLW 0x00
041E  00EB  	MOVWF CompTempVar739
041F  3000  	MOVLW 0x00
0420  00EC  	MOVWF CompTempVar740
0421  00ED  	MOVWF CompTempVar741
0422  00EE  	MOVWF CompTempVar742
0423  0860  	MOVF float32_to_int32_1_z+D'1', W
0424  1C03  	BTFSS STATUS,C
0425  0F60  	INCFSZ float32_to_int32_1_z+D'1', W
0426  02EC  	SUBWF CompTempVar740, F
0427  0861  	MOVF float32_to_int32_1_z+D'2', W
0428  1C03  	BTFSS STATUS,C
0429  0F61  	INCFSZ float32_to_int32_1_z+D'2', W
042A  02ED  	SUBWF CompTempVar741, F
042B  0862  	MOVF float32_to_int32_1_z+D'3', W
042C  1C03  	BTFSS STATUS,C
042D  0F62  	INCFSZ float32_to_int32_1_z+D'3', W
042E  02EE  	SUBWF CompTempVar742, F
042F  086B  	MOVF CompTempVar739, W
0430  00DF  	MOVWF float32_to_int32_1_z
0431  086C  	MOVF CompTempVar740, W
0432  00E0  	MOVWF float32_to_int32_1_z+D'1'
0433  086D  	MOVF CompTempVar741, W
0434  00E1  	MOVWF float32_to_int32_1_z+D'2'
0435  086E  	MOVF CompTempVar742, W
0436  00E2  	MOVWF float32_to_int32_1_z+D'3'
0437  2C7A  	GOTO	label82
0438        label79
0438  01EB  	CLRF float32_to_int32_53_extraNonZero
0439  0867  	MOVF float32_to_int32_32_aSigExtra, W
043A  0468  	IORWF float32_to_int32_32_aSigExtra+D'1', W
043B  0469  	IORWF float32_to_int32_32_aSigExtra+D'2', W
043C  046A  	IORWF float32_to_int32_32_aSigExtra+D'3', W
043D  39FF  	ANDLW 0xFF
043E  1D03  	BTFSS STATUS,Z
043F  146B  	BSF float32_to_int32_53_extraNonZero,0
0440  08CA  	MOVF gbl_15_gbl_aSign, F
0441  1903  	BTFSC STATUS,Z
0442  2C6C  	GOTO	label81
0443  0346  	DECF gbl_float_rounding_mode, W
0444  1D03  	BTFSS STATUS,Z
0445  2C50  	GOTO	label80
0446  08EB  	MOVF float32_to_int32_53_extraNonZero, F
0447  1903  	BTFSC STATUS,Z
0448  2C50  	GOTO	label80
0449  0ADF  	INCF float32_to_int32_1_z, F
044A  1903  	BTFSC STATUS,Z
044B  0AE0  	INCF float32_to_int32_1_z+D'1', F
044C  1903  	BTFSC STATUS,Z
044D  0AE1  	INCF float32_to_int32_1_z+D'2', F
044E  1903  	BTFSC STATUS,Z
044F  0AE2  	INCF float32_to_int32_1_z+D'3', F
0450        label80
0450  085F  	MOVF float32_to_int32_1_z, W
0451  3C00  	SUBLW 0x00
0452  00EC  	MOVWF CompTempVar744
0453  3000  	MOVLW 0x00
0454  00ED  	MOVWF CompTempVar745
0455  00EE  	MOVWF CompTempVar746
0456  00EF  	MOVWF CompTempVar747
0457  0860  	MOVF float32_to_int32_1_z+D'1', W
0458  1C03  	BTFSS STATUS,C
0459  0F60  	INCFSZ float32_to_int32_1_z+D'1', W
045A  02ED  	SUBWF CompTempVar745, F
045B  0861  	MOVF float32_to_int32_1_z+D'2', W
045C  1C03  	BTFSS STATUS,C
045D  0F61  	INCFSZ float32_to_int32_1_z+D'2', W
045E  02EE  	SUBWF CompTempVar746, F
045F  0862  	MOVF float32_to_int32_1_z+D'3', W
0460  1C03  	BTFSS STATUS,C
0461  0F62  	INCFSZ float32_to_int32_1_z+D'3', W
0462  02EF  	SUBWF CompTempVar747, F
0463  086C  	MOVF CompTempVar744, W
0464  00DF  	MOVWF float32_to_int32_1_z
0465  086D  	MOVF CompTempVar745, W
0466  00E0  	MOVWF float32_to_int32_1_z+D'1'
0467  086E  	MOVF CompTempVar746, W
0468  00E1  	MOVWF float32_to_int32_1_z+D'2'
0469  086F  	MOVF CompTempVar747, W
046A  00E2  	MOVWF float32_to_int32_1_z+D'3'
046B  2C7A  	GOTO	label82
046C        label81
046C  0846  	MOVF gbl_float_rounding_mode, W
046D  3A02  	XORLW 0x02
046E  1D03  	BTFSS STATUS,Z
046F  2C7A  	GOTO	label82
0470  08EB  	MOVF float32_to_int32_53_extraNonZero, F
0471  1903  	BTFSC STATUS,Z
0472  2C7A  	GOTO	label82
0473  0ADF  	INCF float32_to_int32_1_z, F
0474  1903  	BTFSC STATUS,Z
0475  0AE0  	INCF float32_to_int32_1_z+D'1', F
0476  1903  	BTFSC STATUS,Z
0477  0AE1  	INCF float32_to_int32_1_z+D'2', F
0478  1903  	BTFSC STATUS,Z
0479  0AE2  	INCF float32_to_int32_1_z+D'3', F
047A        label82
047A  085F  	MOVF float32_to_int32_1_z, W
047B  00E3  	MOVWF CompTempVarRet710
047C  0860  	MOVF float32_to_int32_1_z+D'1', W
047D  00E4  	MOVWF CompTempVarRet710+D'1'
047E  0861  	MOVF float32_to_int32_1_z+D'2', W
047F  00E5  	MOVWF CompTempVarRet710+D'2'
0480  0862  	MOVF float32_to_int32_1_z+D'3', W
0481  00E6  	MOVWF CompTempVarRet710+D'3'
0482  0008  	RETURN
0483        ; } float32_to_int32 function end

0483        float32_mul
0483        ; { float32_mul ; function begin
0483  085C  	MOVF float32_mul_arg_a, W
0484  00A4  	MOVWF gbl_15_gbl_aSig
0485  085D  	MOVF float32_mul_arg_a+D'1', W
0486  00A5  	MOVWF gbl_15_gbl_aSig+D'1'
0487  085E  	MOVF float32_mul_arg_a+D'2', W
0488  00A6  	MOVWF gbl_15_gbl_aSig+D'2'
0489  13A6  	BCF gbl_15_gbl_aSig+D'2',7
048A  01A7  	CLRF gbl_15_gbl_aSig+D'3'
048B  085F  	MOVF float32_mul_arg_a+D'3', W
048C  00C8  	MOVWF gbl_15_gbl_aExp
048D  13C8  	BCF gbl_15_gbl_aExp,7
048E  1003  	BCF STATUS,C
048F  0DC8  	RLF gbl_15_gbl_aExp, F
0490  1BDE  	BTFSC float32_mul_arg_a+D'2',7
0491  1448  	BSF gbl_15_gbl_aExp,0
0492  0860  	MOVF float32_mul_arg_b, W
0493  00A8  	MOVWF gbl_15_gbl_bSig
0494  0861  	MOVF float32_mul_arg_b+D'1', W
0495  00A9  	MOVWF gbl_15_gbl_bSig+D'1'
0496  0862  	MOVF float32_mul_arg_b+D'2', W
0497  00AA  	MOVWF gbl_15_gbl_bSig+D'2'
0498  13AA  	BCF gbl_15_gbl_bSig+D'2',7
0499  01AB  	CLRF gbl_15_gbl_bSig+D'3'
049A  0863  	MOVF float32_mul_arg_b+D'3', W
049B  00C9  	MOVWF gbl_15_gbl_bExp
049C  13C9  	BCF gbl_15_gbl_bExp,7
049D  1003  	BCF STATUS,C
049E  0DC9  	RLF gbl_15_gbl_bExp, F
049F  1BE2  	BTFSC float32_mul_arg_b+D'2',7
04A0  1449  	BSF gbl_15_gbl_bExp,0
04A1  01CA  	CLRF gbl_15_gbl_aSign
04A2  1FDF  	BTFSS float32_mul_arg_a+D'3',7
04A3  2CA6  	GOTO	label83
04A4  3001  	MOVLW 0x01
04A5  00CA  	MOVWF gbl_15_gbl_aSign
04A6        label83
04A6  01CB  	CLRF gbl_15_gbl_bSign
04A7  1FE3  	BTFSS float32_mul_arg_b+D'3',7
04A8  2CAB  	GOTO	label84
04A9  3001  	MOVLW 0x01
04AA  00CB  	MOVWF gbl_15_gbl_bSign
04AB        label84
04AB  084B  	MOVF gbl_15_gbl_bSign, W
04AC  064A  	XORWF gbl_15_gbl_aSign, W
04AD  00CC  	MOVWF gbl_15_gbl_zSign
04AE  1064  	BCF float32_mul_1_aNanInf,0
04AF  0A48  	INCF gbl_15_gbl_aExp, W
04B0  1903  	BTFSC STATUS,Z
04B1  1464  	BSF float32_mul_1_aNanInf,0
04B2  10E4  	BCF float32_mul_1_bNanInf,1
04B3  0A49  	INCF gbl_15_gbl_bExp, W
04B4  1903  	BTFSC STATUS,Z
04B5  14E4  	BSF float32_mul_1_bNanInf,1
04B6  1164  	BCF float32_mul_1_gbl_aSigIsZero,2
04B7  0824  	MOVF gbl_15_gbl_aSig, W
04B8  0425  	IORWF gbl_15_gbl_aSig+D'1', W
04B9  0426  	IORWF gbl_15_gbl_aSig+D'2', W
04BA  0427  	IORWF gbl_15_gbl_aSig+D'3', W
04BB  39FF  	ANDLW 0xFF
04BC  1903  	BTFSC STATUS,Z
04BD  1564  	BSF float32_mul_1_gbl_aSigIsZero,2
04BE  11E4  	BCF float32_mul_1_gbl_bSigIsZero,3
04BF  0828  	MOVF gbl_15_gbl_bSig, W
04C0  0429  	IORWF gbl_15_gbl_bSig+D'1', W
04C1  042A  	IORWF gbl_15_gbl_bSig+D'2', W
04C2  042B  	IORWF gbl_15_gbl_bSig+D'3', W
04C3  39FF  	ANDLW 0xFF
04C4  1903  	BTFSC STATUS,Z
04C5  15E4  	BSF float32_mul_1_gbl_bSigIsZero,3
04C6  1864  	BTFSC float32_mul_1_aNanInf,0
04C7  2CCA  	GOTO	label85
04C8  1CE4  	BTFSS float32_mul_1_bNanInf,1
04C9  2D11  	GOTO	label93
04CA        label85
04CA  1C64  	BTFSS float32_mul_1_aNanInf,0
04CB  2CD2  	GOTO	label86
04CC  1964  	BTFSC float32_mul_1_gbl_aSigIsZero,2
04CD  2CD2  	GOTO	label86
04CE  1B5E  	BTFSC float32_mul_arg_a+D'2',6
04CF  2CD2  	GOTO	label86
04D0  1447  	BSF gbl_float_exception_flags,0
04D1  2D02  	GOTO	label92
04D2        label86
04D2  1CE4  	BTFSS float32_mul_1_bNanInf,1
04D3  2CDA  	GOTO	label87
04D4  19E4  	BTFSC float32_mul_1_gbl_bSigIsZero,3
04D5  2CDA  	GOTO	label87
04D6  1B62  	BTFSC float32_mul_arg_b+D'2',6
04D7  2CDA  	GOTO	label87
04D8  1447  	BSF gbl_float_exception_flags,0
04D9  2D02  	GOTO	label92
04DA        label87
04DA  1C64  	BTFSS float32_mul_1_aNanInf,0
04DB  2CDE  	GOTO	label88
04DC  1D64  	BTFSS float32_mul_1_gbl_aSigIsZero,2
04DD  2D02  	GOTO	label92
04DE        label88
04DE  1CE4  	BTFSS float32_mul_1_bNanInf,1
04DF  2CE2  	GOTO	label89
04E0  1DE4  	BTFSS float32_mul_1_gbl_bSigIsZero,3
04E1  2D02  	GOTO	label92
04E2        label89
04E2  1DE4  	BTFSS float32_mul_1_gbl_bSigIsZero,3
04E3  2CE9  	GOTO	label90
04E4  08C9  	MOVF gbl_15_gbl_bExp, F
04E5  1D03  	BTFSS STATUS,Z
04E6  2CE9  	GOTO	label90
04E7  1447  	BSF gbl_float_exception_flags,0
04E8  2D02  	GOTO	label92
04E9        label90
04E9  1D64  	BTFSS float32_mul_1_gbl_aSigIsZero,2
04EA  2CF0  	GOTO	label91
04EB  08C8  	MOVF gbl_15_gbl_aExp, F
04EC  1D03  	BTFSS STATUS,Z
04ED  2CF0  	GOTO	label91
04EE  1447  	BSF gbl_float_exception_flags,0
04EF  2D02  	GOTO	label92
04F0        label91
04F0  01EA  	CLRF float32_mul_50_ret
04F1  01EB  	CLRF float32_mul_50_ret+D'1'
04F2  307F  	MOVLW 0x7F
04F3  00ED  	MOVWF float32_mul_50_ret+D'3'
04F4  3080  	MOVLW 0x80
04F5  00EC  	MOVWF float32_mul_50_ret+D'2'
04F6  08CC  	MOVF gbl_15_gbl_zSign, F
04F7  1D03  	BTFSS STATUS,Z
04F8  17ED  	BSF float32_mul_50_ret+D'3',7
04F9  086D  	MOVF float32_mul_50_ret+D'3', W
04FA  00F1  	MOVWF CompTempVarRet927+D'3'
04FB  086C  	MOVF float32_mul_50_ret+D'2', W
04FC  00F0  	MOVWF CompTempVarRet927+D'2'
04FD  086B  	MOVF float32_mul_50_ret+D'1', W
04FE  00EF  	MOVWF CompTempVarRet927+D'1'
04FF  086A  	MOVF float32_mul_50_ret, W
0500  00EE  	MOVWF CompTempVarRet927
0501  0008  	RETURN
0502        label92
0502  01EA  	CLRF float32_mul_57__a
0503  01EB  	CLRF float32_mul_57__a+D'1'
0504  30C0  	MOVLW 0xC0
0505  00EC  	MOVWF float32_mul_57__a+D'2'
0506  30FF  	MOVLW 0xFF
0507  00ED  	MOVWF float32_mul_57__a+D'3'
0508  086D  	MOVF float32_mul_57__a+D'3', W
0509  00F1  	MOVWF CompTempVarRet927+D'3'
050A  086C  	MOVF float32_mul_57__a+D'2', W
050B  00F0  	MOVWF CompTempVarRet927+D'2'
050C  086B  	MOVF float32_mul_57__a+D'1', W
050D  00EF  	MOVWF CompTempVarRet927+D'1'
050E  086A  	MOVF float32_mul_57__a, W
050F  00EE  	MOVWF CompTempVarRet927
0510  0008  	RETURN
0511        label93
0511  307F  	MOVLW 0x7F
0512  00E5  	MOVWF float32_mul_1_expBias
0513  08C8  	MOVF gbl_15_gbl_aExp, F
0514  1D03  	BTFSS STATUS,Z
0515  2D32  	GOTO	label96
0516  1D64  	BTFSS float32_mul_1_gbl_aSigIsZero,2
0517  2D28  	GOTO	label94
0518  01EA  	CLRF float32_mul_61_ret
0519  01EB  	CLRF float32_mul_61_ret+D'1'
051A  01ED  	CLRF float32_mul_61_ret+D'3'
051B  01EC  	CLRF float32_mul_61_ret+D'2'
051C  08CC  	MOVF gbl_15_gbl_zSign, F
051D  1D03  	BTFSS STATUS,Z
051E  17ED  	BSF float32_mul_61_ret+D'3',7
051F  086D  	MOVF float32_mul_61_ret+D'3', W
0520  00F1  	MOVWF CompTempVarRet927+D'3'
0521  086C  	MOVF float32_mul_61_ret+D'2', W
0522  00F0  	MOVWF CompTempVarRet927+D'2'
0523  086B  	MOVF float32_mul_61_ret+D'1', W
0524  00EF  	MOVWF CompTempVarRet927+D'1'
0525  086A  	MOVF float32_mul_61_ret, W
0526  00EE  	MOVWF CompTempVarRet927
0527  0008  	RETURN
0528        label94
0528  03E5  	DECF float32_mul_1_expBias, F
0529        label95
0529  1BA6  	BTFSC gbl_15_gbl_aSig+D'2',7
052A  2D33  	GOTO	label97
052B  1003  	BCF STATUS,C
052C  0DA4  	RLF gbl_15_gbl_aSig, F
052D  0DA5  	RLF gbl_15_gbl_aSig+D'1', F
052E  0DA6  	RLF gbl_15_gbl_aSig+D'2', F
052F  0DA7  	RLF gbl_15_gbl_aSig+D'3', F
0530  0AE5  	INCF float32_mul_1_expBias, F
0531  2D29  	GOTO	label95
0532        label96
0532  17A6  	BSF gbl_15_gbl_aSig+D'2',7
0533        label97
0533  08C9  	MOVF gbl_15_gbl_bExp, F
0534  1D03  	BTFSS STATUS,Z
0535  2D52  	GOTO	label100
0536  1DE4  	BTFSS float32_mul_1_gbl_bSigIsZero,3
0537  2D48  	GOTO	label98
0538  01EA  	CLRF float32_mul_75_ret
0539  01EB  	CLRF float32_mul_75_ret+D'1'
053A  01ED  	CLRF float32_mul_75_ret+D'3'
053B  01EC  	CLRF float32_mul_75_ret+D'2'
053C  08CC  	MOVF gbl_15_gbl_zSign, F
053D  1D03  	BTFSS STATUS,Z
053E  17ED  	BSF float32_mul_75_ret+D'3',7
053F  086D  	MOVF float32_mul_75_ret+D'3', W
0540  00F1  	MOVWF CompTempVarRet927+D'3'
0541  086C  	MOVF float32_mul_75_ret+D'2', W
0542  00F0  	MOVWF CompTempVarRet927+D'2'
0543  086B  	MOVF float32_mul_75_ret+D'1', W
0544  00EF  	MOVWF CompTempVarRet927+D'1'
0545  086A  	MOVF float32_mul_75_ret, W
0546  00EE  	MOVWF CompTempVarRet927
0547  0008  	RETURN
0548        label98
0548  03E5  	DECF float32_mul_1_expBias, F
0549        label99
0549  1BAA  	BTFSC gbl_15_gbl_bSig+D'2',7
054A  2D53  	GOTO	label101
054B  1003  	BCF STATUS,C
054C  0DA8  	RLF gbl_15_gbl_bSig, F
054D  0DA9  	RLF gbl_15_gbl_bSig+D'1', F
054E  0DAA  	RLF gbl_15_gbl_bSig+D'2', F
054F  0DAB  	RLF gbl_15_gbl_bSig+D'3', F
0550  0AE5  	INCF float32_mul_1_expBias, F
0551  2D49  	GOTO	label99
0552        label100
0552  17AA  	BSF gbl_15_gbl_bSig+D'2',7
0553        label101
0553  3007  	MOVLW 0x07
0554  00EA  	MOVWF float32_mul_88_i
0555        label102
0555  08EA  	MOVF float32_mul_88_i, F
0556  1903  	BTFSC STATUS,Z
0557  2D5F  	GOTO	label103
0558  1003  	BCF STATUS,C
0559  0DA4  	RLF gbl_15_gbl_aSig, F
055A  0DA5  	RLF gbl_15_gbl_aSig+D'1', F
055B  0DA6  	RLF gbl_15_gbl_aSig+D'2', F
055C  0DA7  	RLF gbl_15_gbl_aSig+D'3', F
055D  03EA  	DECF float32_mul_88_i, F
055E  2D55  	GOTO	label102
055F        label103
055F  3008  	MOVLW 0x08
0560  00EA  	MOVWF float32_mul_90_i
0561        label104
0561  08EA  	MOVF float32_mul_90_i, F
0562  1903  	BTFSC STATUS,Z
0563  2D6B  	GOTO	label105
0564  1003  	BCF STATUS,C
0565  0DA8  	RLF gbl_15_gbl_bSig, F
0566  0DA9  	RLF gbl_15_gbl_bSig+D'1', F
0567  0DAA  	RLF gbl_15_gbl_bSig+D'2', F
0568  0DAB  	RLF gbl_15_gbl_bSig+D'3', F
0569  03EA  	DECF float32_mul_90_i, F
056A  2D61  	GOTO	label104
056B        label105
056B  21B4  	CALL mul32To32s_0002C
056C  08C3  	MOVF gbl_15_gbl_zExp, F
056D  1903  	BTFSC STATUS,Z
056E  08C4  	MOVF gbl_15_gbl_zExp+D'1', F
056F  1903  	BTFSC STATUS,Z
0570  2D9E  	GOTO	label110
0571  0943  	COMF gbl_15_gbl_zExp, W
0572  00EA  	MOVWF CompTempVar984
0573  0944  	COMF gbl_15_gbl_zExp+D'1', W
0574  00EB  	MOVWF CompTempVar985
0575  0AEA  	INCF CompTempVar984, F
0576  1903  	BTFSC STATUS,Z
0577  0AEB  	INCF CompTempVar985, F
0578  3020  	MOVLW 0x20
0579  026A  	SUBWF CompTempVar984, W
057A  086B  	MOVF CompTempVar985, W
057B  1803  	BTFSC STATUS,C
057C  2D7F  	GOTO	label106
057D  1903  	BTFSC STATUS,Z
057E  2D81  	GOTO	label107
057F        label106
057F  1FEB  	BTFSS CompTempVar985,7
0580  2D92  	GOTO	label109
0581        label107
0581  1264  	BCF float32_mul_96_stickyBit,4
0582  0943  	COMF gbl_15_gbl_zExp, W
0583  00EC  	MOVWF float32_mul_96_count
0584  0AEC  	INCF float32_mul_96_count, F
0585        label108
0585  182C  	BTFSC gbl_15_gbl_zSig,0
0586  1664  	BSF float32_mul_96_stickyBit,4
0587  1003  	BCF STATUS,C
0588  0CAF  	RRF gbl_15_gbl_zSig+D'3', F
0589  0CAE  	RRF gbl_15_gbl_zSig+D'2', F
058A  0CAD  	RRF gbl_15_gbl_zSig+D'1', F
058B  0CAC  	RRF gbl_15_gbl_zSig, F
058C  03EC  	DECF float32_mul_96_count, F
058D  1D03  	BTFSS STATUS,Z
058E  2D85  	GOTO	label108
058F  1A64  	BTFSC float32_mul_96_stickyBit,4
0590  142C  	BSF gbl_15_gbl_zSig,0
0591  2D9E  	GOTO	label110
0592        label109
0592  082C  	MOVF gbl_15_gbl_zSig, W
0593  042D  	IORWF gbl_15_gbl_zSig+D'1', W
0594  042E  	IORWF gbl_15_gbl_zSig+D'2', W
0595  042F  	IORWF gbl_15_gbl_zSig+D'3', W
0596  39FF  	ANDLW 0xFF
0597  1903  	BTFSC STATUS,Z
0598  2D9E  	GOTO	label110
0599  3001  	MOVLW 0x01
059A  00AC  	MOVWF gbl_15_gbl_zSig
059B  01AD  	CLRF gbl_15_gbl_zSig+D'1'
059C  01AE  	CLRF gbl_15_gbl_zSig+D'2'
059D  01AF  	CLRF gbl_15_gbl_zSig+D'3'
059E        label110
059E  0848  	MOVF gbl_15_gbl_aExp, W
059F  00C3  	MOVWF gbl_15_gbl_zExp
05A0  01C4  	CLRF gbl_15_gbl_zExp+D'1'
05A1  0849  	MOVF gbl_15_gbl_bExp, W
05A2  07C3  	ADDWF gbl_15_gbl_zExp, F
05A3  1803  	BTFSC STATUS,C
05A4  0AC4  	INCF gbl_15_gbl_zExp+D'1', F
05A5  0865  	MOVF float32_mul_1_expBias, W
05A6  02C3  	SUBWF gbl_15_gbl_zExp, F
05A7  1C03  	BTFSS STATUS,C
05A8  03C4  	DECF gbl_15_gbl_zExp+D'1', F
05A9  1B2F  	BTFSC gbl_15_gbl_zSig+D'3',6
05AA  2DB4  	GOTO	label111
05AB  1003  	BCF STATUS,C
05AC  0DAC  	RLF gbl_15_gbl_zSig, F
05AD  0DAD  	RLF gbl_15_gbl_zSig+D'1', F
05AE  0DAE  	RLF gbl_15_gbl_zSig+D'2', F
05AF  0DAF  	RLF gbl_15_gbl_zSig+D'3', F
05B0  08C3  	MOVF gbl_15_gbl_zExp, F
05B1  1903  	BTFSC STATUS,Z
05B2  03C4  	DECF gbl_15_gbl_zExp+D'1', F
05B3  03C3  	DECF gbl_15_gbl_zExp, F
05B4        label111
05B4  204F  	CALL roundFloat_0001A
05B5  219B  	CALL packFloat3_0001D
05B6  082C  	MOVF gbl_15_gbl_zSig, W
05B7  00E6  	MOVWF float32_mul_1_retxxx
05B8  082D  	MOVF gbl_15_gbl_zSig+D'1', W
05B9  00E7  	MOVWF float32_mul_1_retxxx+D'1'
05BA  082E  	MOVF gbl_15_gbl_zSig+D'2', W
05BB  00E8  	MOVWF float32_mul_1_retxxx+D'2'
05BC  082F  	MOVF gbl_15_gbl_zSig+D'3', W
05BD  00E9  	MOVWF float32_mul_1_retxxx+D'3'
05BE  0869  	MOVF float32_mul_1_retxxx+D'3', W
05BF  00F1  	MOVWF CompTempVarRet927+D'3'
05C0  0868  	MOVF float32_mul_1_retxxx+D'2', W
05C1  00F0  	MOVWF CompTempVarRet927+D'2'
05C2  0867  	MOVF float32_mul_1_retxxx+D'1', W
05C3  00EF  	MOVWF CompTempVarRet927+D'1'
05C4  0866  	MOVF float32_mul_1_retxxx, W
05C5  00EE  	MOVWF CompTempVarRet927
05C6  0008  	RETURN
05C7        ; } float32_mul function end

05C7        float32_from_int32
05C7        ; { float32_from_int32 ; function begin
05C7  086D  	MOVF float32_from_int32_arg_a, W
05C8  00AC  	MOVWF gbl_15_gbl_zSig
05C9  086E  	MOVF float32_from_int32_arg_a+D'1', W
05CA  00AD  	MOVWF gbl_15_gbl_zSig+D'1'
05CB  086F  	MOVF float32_from_int32_arg_a+D'2', W
05CC  00AE  	MOVWF gbl_15_gbl_zSig+D'2'
05CD  0870  	MOVF float32_from_int32_arg_a+D'3', W
05CE  00AF  	MOVWF gbl_15_gbl_zSig+D'3'
05CF  082C  	MOVF gbl_15_gbl_zSig, W
05D0  3C00  	SUBLW 0x00
05D1  1D03  	BTFSS STATUS,Z
05D2  2DE5  	GOTO	label112
05D3  082D  	MOVF gbl_15_gbl_zSig+D'1', W
05D4  3C00  	SUBLW 0x00
05D5  1D03  	BTFSS STATUS,Z
05D6  2DE5  	GOTO	label112
05D7  082E  	MOVF gbl_15_gbl_zSig+D'2', W
05D8  3C00  	SUBLW 0x00
05D9  1D03  	BTFSS STATUS,Z
05DA  2DE5  	GOTO	label112
05DB  082F  	MOVF gbl_15_gbl_zSig+D'3', W
05DC  3C80  	SUBLW 0x80
05DD  1D03  	BTFSS STATUS,Z
05DE  2DE5  	GOTO	label112
05DF  3001  	MOVLW 0x01
05E0  00CC  	MOVWF gbl_15_gbl_zSign
05E1  309E  	MOVLW 0x9E
05E2  00C3  	MOVWF gbl_15_gbl_zExp
05E3  01C4  	CLRF gbl_15_gbl_zExp+D'1'
05E4  2E0A  	GOTO	label114
05E5        label112
05E5  01CC  	CLRF gbl_15_gbl_zSign
05E6  1FAF  	BTFSS gbl_15_gbl_zSig+D'3',7
05E7  2E05  	GOTO	label113
05E8  3001  	MOVLW 0x01
05E9  00CC  	MOVWF gbl_15_gbl_zSign
05EA  082C  	MOVF gbl_15_gbl_zSig, W
05EB  3C00  	SUBLW 0x00
05EC  00F5  	MOVWF CompTempVar675
05ED  3000  	MOVLW 0x00
05EE  00F6  	MOVWF CompTempVar676
05EF  00F7  	MOVWF CompTempVar677
05F0  00F8  	MOVWF CompTempVar678
05F1  082D  	MOVF gbl_15_gbl_zSig+D'1', W
05F2  1C03  	BTFSS STATUS,C
05F3  0F2D  	INCFSZ gbl_15_gbl_zSig+D'1', W
05F4  02F6  	SUBWF CompTempVar676, F
05F5  082E  	MOVF gbl_15_gbl_zSig+D'2', W
05F6  1C03  	BTFSS STATUS,C
05F7  0F2E  	INCFSZ gbl_15_gbl_zSig+D'2', W
05F8  02F7  	SUBWF CompTempVar677, F
05F9  082F  	MOVF gbl_15_gbl_zSig+D'3', W
05FA  1C03  	BTFSS STATUS,C
05FB  0F2F  	INCFSZ gbl_15_gbl_zSig+D'3', W
05FC  02F8  	SUBWF CompTempVar678, F
05FD  0875  	MOVF CompTempVar675, W
05FE  00AC  	MOVWF gbl_15_gbl_zSig
05FF  0876  	MOVF CompTempVar676, W
0600  00AD  	MOVWF gbl_15_gbl_zSig+D'1'
0601  0877  	MOVF CompTempVar677, W
0602  00AE  	MOVWF gbl_15_gbl_zSig+D'2'
0603  0878  	MOVF CompTempVar678, W
0604  00AF  	MOVWF gbl_15_gbl_zSig+D'3'
0605        label113
0605  309C  	MOVLW 0x9C
0606  00C3  	MOVWF gbl_15_gbl_zExp
0607  01C4  	CLRF gbl_15_gbl_zExp+D'1'
0608  227D  	CALL NormaliseF_00019
0609  204F  	CALL roundFloat_0001A
060A        label114
060A  219B  	CALL packFloat3_0001D
060B  082C  	MOVF gbl_15_gbl_zSig, W
060C  00F1  	MOVWF float32_from_int32_1_retxxx
060D  082D  	MOVF gbl_15_gbl_zSig+D'1', W
060E  00F2  	MOVWF float32_from_int32_1_retxxx+D'1'
060F  082E  	MOVF gbl_15_gbl_zSig+D'2', W
0610  00F3  	MOVWF float32_from_int32_1_retxxx+D'2'
0611  082F  	MOVF gbl_15_gbl_zSig+D'3', W
0612  00F4  	MOVWF float32_from_int32_1_retxxx+D'3'
0613  0874  	MOVF float32_from_int32_1_retxxx+D'3', W
0614  00F8  	MOVWF CompTempVarRet673+D'3'
0615  0873  	MOVF float32_from_int32_1_retxxx+D'2', W
0616  00F7  	MOVWF CompTempVarRet673+D'2'
0617  0872  	MOVF float32_from_int32_1_retxxx+D'1', W
0618  00F6  	MOVWF CompTempVarRet673+D'1'
0619  0871  	MOVF float32_from_int32_1_retxxx, W
061A  00F5  	MOVWF CompTempVarRet673
061B  0008  	RETURN
061C        ; } float32_from_int32 function end

061C        float32_addsub
061C        ; { float32_addsub ; function begin
061C  08EC  	MOVF float32_addsub_arg_subtract, F
061D  1903  	BTFSC STATUS,Z
061E  2E21  	GOTO	label115
061F  3080  	MOVLW 0x80
0620  06EB  	XORWF float32_addsub_arg_b+D'3', F
0621        label115
0621  0867  	MOVF float32_addsub_arg_a+D'3', W
0622  00C8  	MOVWF gbl_15_gbl_aExp
0623  13C8  	BCF gbl_15_gbl_aExp,7
0624  1003  	BCF STATUS,C
0625  0DC8  	RLF gbl_15_gbl_aExp, F
0626  1BE6  	BTFSC float32_addsub_arg_a+D'2',7
0627  1448  	BSF gbl_15_gbl_aExp,0
0628  01CA  	CLRF gbl_15_gbl_aSign
0629  1FE7  	BTFSS float32_addsub_arg_a+D'3',7
062A  2E2D  	GOTO	label116
062B  3001  	MOVLW 0x01
062C  00CA  	MOVWF gbl_15_gbl_aSign
062D        label116
062D  0864  	MOVF float32_addsub_arg_a, W
062E  00A4  	MOVWF gbl_15_gbl_aSig
062F  0865  	MOVF float32_addsub_arg_a+D'1', W
0630  00A5  	MOVWF gbl_15_gbl_aSig+D'1'
0631  0866  	MOVF float32_addsub_arg_a+D'2', W
0632  00A6  	MOVWF gbl_15_gbl_aSig+D'2'
0633  13A6  	BCF gbl_15_gbl_aSig+D'2',7
0634  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0635  086B  	MOVF float32_addsub_arg_b+D'3', W
0636  00C9  	MOVWF gbl_15_gbl_bExp
0637  13C9  	BCF gbl_15_gbl_bExp,7
0638  1003  	BCF STATUS,C
0639  0DC9  	RLF gbl_15_gbl_bExp, F
063A  1BEA  	BTFSC float32_addsub_arg_b+D'2',7
063B  1449  	BSF gbl_15_gbl_bExp,0
063C  01CB  	CLRF gbl_15_gbl_bSign
063D  1FEB  	BTFSS float32_addsub_arg_b+D'3',7
063E  2E41  	GOTO	label117
063F  3001  	MOVLW 0x01
0640  00CB  	MOVWF gbl_15_gbl_bSign
0641        label117
0641  0868  	MOVF float32_addsub_arg_b, W
0642  00A8  	MOVWF gbl_15_gbl_bSig
0643  0869  	MOVF float32_addsub_arg_b+D'1', W
0644  00A9  	MOVWF gbl_15_gbl_bSig+D'1'
0645  086A  	MOVF float32_addsub_arg_b+D'2', W
0646  00AA  	MOVWF gbl_15_gbl_bSig+D'2'
0647  13AA  	BCF gbl_15_gbl_bSig+D'2',7
0648  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0649  3006  	MOVLW 0x06
064A  00F4  	MOVWF float32_addsub_31_i
064B        label118
064B  08F4  	MOVF float32_addsub_31_i, F
064C  1903  	BTFSC STATUS,Z
064D  2E55  	GOTO	label119
064E  1003  	BCF STATUS,C
064F  0DA4  	RLF gbl_15_gbl_aSig, F
0650  0DA5  	RLF gbl_15_gbl_aSig+D'1', F
0651  0DA6  	RLF gbl_15_gbl_aSig+D'2', F
0652  0DA7  	RLF gbl_15_gbl_aSig+D'3', F
0653  03F4  	DECF float32_addsub_31_i, F
0654  2E4B  	GOTO	label118
0655        label119
0655  3006  	MOVLW 0x06
0656  00F4  	MOVWF float32_addsub_33_i
0657        label120
0657  08F4  	MOVF float32_addsub_33_i, F
0658  1903  	BTFSC STATUS,Z
0659  2E61  	GOTO	label121
065A  1003  	BCF STATUS,C
065B  0DA8  	RLF gbl_15_gbl_bSig, F
065C  0DA9  	RLF gbl_15_gbl_bSig+D'1', F
065D  0DAA  	RLF gbl_15_gbl_bSig+D'2', F
065E  0DAB  	RLF gbl_15_gbl_bSig+D'3', F
065F  03F4  	DECF float32_addsub_33_i, F
0660  2E57  	GOTO	label120
0661        label121
0661  106D  	BCF float32_addsub_1_aNanInf,0
0662  0A48  	INCF gbl_15_gbl_aExp, W
0663  1903  	BTFSC STATUS,Z
0664  146D  	BSF float32_addsub_1_aNanInf,0
0665  10ED  	BCF float32_addsub_1_bNanInf,1
0666  0A49  	INCF gbl_15_gbl_bExp, W
0667  1903  	BTFSC STATUS,Z
0668  14ED  	BSF float32_addsub_1_bNanInf,1
0669  116D  	BCF float32_addsub_1_aSigIsZero,2
066A  0824  	MOVF gbl_15_gbl_aSig, W
066B  0425  	IORWF gbl_15_gbl_aSig+D'1', W
066C  0426  	IORWF gbl_15_gbl_aSig+D'2', W
066D  0427  	IORWF gbl_15_gbl_aSig+D'3', W
066E  39FF  	ANDLW 0xFF
066F  1903  	BTFSC STATUS,Z
0670  156D  	BSF float32_addsub_1_aSigIsZero,2
0671  11ED  	BCF float32_addsub_1_bSigIsZero,3
0672  0828  	MOVF gbl_15_gbl_bSig, W
0673  0429  	IORWF gbl_15_gbl_bSig+D'1', W
0674  042A  	IORWF gbl_15_gbl_bSig+D'2', W
0675  042B  	IORWF gbl_15_gbl_bSig+D'3', W
0676  39FF  	ANDLW 0xFF
0677  1903  	BTFSC STATUS,Z
0678  15ED  	BSF float32_addsub_1_bSigIsZero,3
0679  186D  	BTFSC float32_addsub_1_aNanInf,0
067A  2E7D  	GOTO	label122
067B  1CED  	BTFSS float32_addsub_1_bNanInf,1
067C  2ED8  	GOTO	label134
067D        label122
067D  166D  	BSF float32_addsub_39_bSignalingNaN,4
067E  1F6A  	BTFSS float32_addsub_arg_b+D'2',6
067F  2E81  	GOTO	label123
0680  126D  	BCF float32_addsub_39_bSignalingNaN,4
0681        label123
0681  16ED  	BSF float32_addsub_39_aSignalingNaN,5
0682  1B66  	BTFSC float32_addsub_arg_a+D'2',6
0683  12ED  	BCF float32_addsub_39_aSignalingNaN,5
0684  1C6D  	BTFSS float32_addsub_1_aNanInf,0
0685  2EA4  	GOTO	label126
0686  1CED  	BTFSS float32_addsub_1_bNanInf,1
0687  2EA4  	GOTO	label126
0688  1D6D  	BTFSS float32_addsub_1_aSigIsZero,2
0689  2E95  	GOTO	label124
068A  1DED  	BTFSS float32_addsub_1_bSigIsZero,3
068B  2E95  	GOTO	label124
068C  084B  	MOVF gbl_15_gbl_bSign, W
068D  064A  	XORWF gbl_15_gbl_aSign, W
068E  1903  	BTFSC STATUS,Z
068F  2EC5  	GOTO	label131
0690  1447  	BSF gbl_float_exception_flags,0
0691  08CA  	MOVF gbl_15_gbl_aSign, F
0692  1D03  	BTFSS STATUS,Z
0693  2EC4  	GOTO	label130
0694  2ECE  	GOTO	label132
0695        label124
0695  1D6D  	BTFSS float32_addsub_1_aSigIsZero,2
0696  2E9C  	GOTO	label125
0697  19ED  	BTFSC float32_addsub_1_bSigIsZero,3
0698  2E9C  	GOTO	label125
0699  1A6D  	BTFSC float32_addsub_39_bSignalingNaN,4
069A  1447  	BSF gbl_float_exception_flags,0
069B  2ECE  	GOTO	label132
069C        label125
069C  196D  	BTFSC float32_addsub_1_aSigIsZero,2
069D  2EA4  	GOTO	label126
069E  1DED  	BTFSS float32_addsub_1_bSigIsZero,3
069F  2EA4  	GOTO	label126
06A0  1EED  	BTFSS float32_addsub_39_aSignalingNaN,5
06A1  2EC4  	GOTO	label130
06A2  1447  	BSF gbl_float_exception_flags,0
06A3  2EC4  	GOTO	label130
06A4        label126
06A4  1C6D  	BTFSS float32_addsub_1_aNanInf,0
06A5  2EAA  	GOTO	label127
06A6  1D6D  	BTFSS float32_addsub_1_aSigIsZero,2
06A7  2EAA  	GOTO	label127
06A8  1CED  	BTFSS float32_addsub_1_bNanInf,1
06A9  2EC5  	GOTO	label131
06AA        label127
06AA  1CED  	BTFSS float32_addsub_1_bNanInf,1
06AB  2EB0  	GOTO	label128
06AC  1DED  	BTFSS float32_addsub_1_bSigIsZero,3
06AD  2EB0  	GOTO	label128
06AE  1C6D  	BTFSS float32_addsub_1_aNanInf,0
06AF  2ECF  	GOTO	label133
06B0        label128
06B0  1C6D  	BTFSS float32_addsub_1_aNanInf,0
06B1  2EBD  	GOTO	label129
06B2  196D  	BTFSC float32_addsub_1_aSigIsZero,2
06B3  2EBD  	GOTO	label129
06B4  1AED  	BTFSC float32_addsub_39_aSignalingNaN,5
06B5  1447  	BSF gbl_float_exception_flags,0
06B6  1CED  	BTFSS float32_addsub_1_bNanInf,1
06B7  2EC4  	GOTO	label130
06B8  19ED  	BTFSC float32_addsub_1_bSigIsZero,3
06B9  2EC4  	GOTO	label130
06BA  1A6D  	BTFSC float32_addsub_39_bSignalingNaN,4
06BB  1447  	BSF gbl_float_exception_flags,0
06BC  2EC4  	GOTO	label130
06BD        label129
06BD  1CED  	BTFSS float32_addsub_1_bNanInf,1
06BE  2EC4  	GOTO	label130
06BF  19ED  	BTFSC float32_addsub_1_bSigIsZero,3
06C0  2EC4  	GOTO	label130
06C1  1A6D  	BTFSC float32_addsub_39_bSignalingNaN,4
06C2  1447  	BSF gbl_float_exception_flags,0
06C3  2ECE  	GOTO	label132
06C4        label130
06C4  1766  	BSF float32_addsub_arg_a+D'2',6
06C5        label131
06C5  0867  	MOVF float32_addsub_arg_a+D'3', W
06C6  00F7  	MOVWF CompTempVarRet879+D'3'
06C7  0866  	MOVF float32_addsub_arg_a+D'2', W
06C8  00F6  	MOVWF CompTempVarRet879+D'2'
06C9  0865  	MOVF float32_addsub_arg_a+D'1', W
06CA  00F5  	MOVWF CompTempVarRet879+D'1'
06CB  0864  	MOVF float32_addsub_arg_a, W
06CC  00F4  	MOVWF CompTempVarRet879
06CD  0008  	RETURN
06CE        label132
06CE  176A  	BSF float32_addsub_arg_b+D'2',6
06CF        label133
06CF  086B  	MOVF float32_addsub_arg_b+D'3', W
06D0  00F7  	MOVWF CompTempVarRet879+D'3'
06D1  086A  	MOVF float32_addsub_arg_b+D'2', W
06D2  00F6  	MOVWF CompTempVarRet879+D'2'
06D3  0869  	MOVF float32_addsub_arg_b+D'1', W
06D4  00F5  	MOVWF CompTempVarRet879+D'1'
06D5  0868  	MOVF float32_addsub_arg_b, W
06D6  00F4  	MOVWF CompTempVarRet879
06D7  0008  	RETURN
06D8        label134
06D8  0848  	MOVF gbl_15_gbl_aExp, W
06D9  00EE  	MOVWF float32_addsub_1_expDiff
06DA  01EF  	CLRF float32_addsub_1_expDiff+D'1'
06DB  0849  	MOVF gbl_15_gbl_bExp, W
06DC  00F8  	MOVWF CompTempVar911
06DD  01F9  	CLRF CompTempVar911+D'1'
06DE  0878  	MOVF CompTempVar911, W
06DF  02EE  	SUBWF float32_addsub_1_expDiff, F
06E0  0A79  	INCF CompTempVar911+D'1', W
06E1  1803  	BTFSC STATUS,C
06E2  0879  	MOVF CompTempVar911+D'1', W
06E3  02EF  	SUBWF float32_addsub_1_expDiff+D'1', F
06E4  0849  	MOVF gbl_15_gbl_bExp, W
06E5  0248  	SUBWF gbl_15_gbl_aExp, W
06E6  1C03  	BTFSS STATUS,C
06E7  2EFC  	GOTO	label136
06E8  0848  	MOVF gbl_15_gbl_aExp, W
06E9  0649  	XORWF gbl_15_gbl_bExp, W
06EA  1D03  	BTFSS STATUS,Z
06EB  2F26  	GOTO	label137
06EC  082B  	MOVF gbl_15_gbl_bSig+D'3', W
06ED  0227  	SUBWF gbl_15_gbl_aSig+D'3', W
06EE  1D03  	BTFSS STATUS,Z
06EF  2EFA  	GOTO	label135
06F0  082A  	MOVF gbl_15_gbl_bSig+D'2', W
06F1  0226  	SUBWF gbl_15_gbl_aSig+D'2', W
06F2  1D03  	BTFSS STATUS,Z
06F3  2EFA  	GOTO	label135
06F4  0829  	MOVF gbl_15_gbl_bSig+D'1', W
06F5  0225  	SUBWF gbl_15_gbl_aSig+D'1', W
06F6  1D03  	BTFSS STATUS,Z
06F7  2EFA  	GOTO	label135
06F8  0828  	MOVF gbl_15_gbl_bSig, W
06F9  0224  	SUBWF gbl_15_gbl_aSig, W
06FA        label135
06FA  1803  	BTFSC STATUS,C
06FB  2F26  	GOTO	label137
06FC        label136
06FC  0827  	MOVF gbl_15_gbl_aSig+D'3', W
06FD  00AF  	MOVWF gbl_15_gbl_zSig+D'3'
06FE  0826  	MOVF gbl_15_gbl_aSig+D'2', W
06FF  00AE  	MOVWF gbl_15_gbl_zSig+D'2'
0700  0825  	MOVF gbl_15_gbl_aSig+D'1', W
0701  00AD  	MOVWF gbl_15_gbl_zSig+D'1'
0702  0824  	MOVF gbl_15_gbl_aSig, W
0703  00AC  	MOVWF gbl_15_gbl_zSig
0704  0848  	MOVF gbl_15_gbl_aExp, W
0705  00C3  	MOVWF gbl_15_gbl_zExp
0706  01C4  	CLRF gbl_15_gbl_zExp+D'1'
0707  084A  	MOVF gbl_15_gbl_aSign, W
0708  00CC  	MOVWF gbl_15_gbl_zSign
0709  082B  	MOVF gbl_15_gbl_bSig+D'3', W
070A  00A7  	MOVWF gbl_15_gbl_aSig+D'3'
070B  082A  	MOVF gbl_15_gbl_bSig+D'2', W
070C  00A6  	MOVWF gbl_15_gbl_aSig+D'2'
070D  0829  	MOVF gbl_15_gbl_bSig+D'1', W
070E  00A5  	MOVWF gbl_15_gbl_aSig+D'1'
070F  0828  	MOVF gbl_15_gbl_bSig, W
0710  00A4  	MOVWF gbl_15_gbl_aSig
0711  082F  	MOVF gbl_15_gbl_zSig+D'3', W
0712  00AB  	MOVWF gbl_15_gbl_bSig+D'3'
0713  082E  	MOVF gbl_15_gbl_zSig+D'2', W
0714  00AA  	MOVWF gbl_15_gbl_bSig+D'2'
0715  082D  	MOVF gbl_15_gbl_zSig+D'1', W
0716  00A9  	MOVWF gbl_15_gbl_bSig+D'1'
0717  082C  	MOVF gbl_15_gbl_zSig, W
0718  00A8  	MOVWF gbl_15_gbl_bSig
0719  0849  	MOVF gbl_15_gbl_bExp, W
071A  00C8  	MOVWF gbl_15_gbl_aExp
071B  0843  	MOVF gbl_15_gbl_zExp, W
071C  00C9  	MOVWF gbl_15_gbl_bExp
071D  084B  	MOVF gbl_15_gbl_bSign, W
071E  00CA  	MOVWF gbl_15_gbl_aSign
071F  084C  	MOVF gbl_15_gbl_zSign, W
0720  00CB  	MOVWF gbl_15_gbl_bSign
0721  09EE  	COMF float32_addsub_1_expDiff, F
0722  09EF  	COMF float32_addsub_1_expDiff+D'1', F
0723  0AEE  	INCF float32_addsub_1_expDiff, F
0724  1903  	BTFSC STATUS,Z
0725  0AEF  	INCF float32_addsub_1_expDiff+D'1', F
0726        label137
0726  08C8  	MOVF gbl_15_gbl_aExp, F
0727  1D03  	BTFSS STATUS,Z
0728  2F4D  	GOTO	label143
0729  08C9  	MOVF gbl_15_gbl_bExp, F
072A  1D03  	BTFSS STATUS,Z
072B  2F4D  	GOTO	label143
072C  2211  	CALL _float32_a_0002A
072D  08CD  	MOVF gbl_15_gbl_zSigZero, F
072E  1903  	BTFSC STATUS,Z
072F  2F3C  	GOTO	label139
0730  084B  	MOVF gbl_15_gbl_bSign, W
0731  064A  	XORWF gbl_15_gbl_aSign, W
0732  1903  	BTFSC STATUS,Z
0733  2F3C  	GOTO	label139
0734  0346  	DECF gbl_float_rounding_mode, W
0735  1D03  	BTFSS STATUS,Z
0736  2F3A  	GOTO	label138
0737  3001  	MOVLW 0x01
0738  00CC  	MOVWF gbl_15_gbl_zSign
0739  2F3E  	GOTO	label140
073A        label138
073A  01CC  	CLRF gbl_15_gbl_zSign
073B  2F3E  	GOTO	label140
073C        label139
073C  084A  	MOVF gbl_15_gbl_aSign, W
073D  00CC  	MOVWF gbl_15_gbl_zSign
073E        label140
073E  3006  	MOVLW 0x06
073F  00F8  	MOVWF float32_addsub_86_i
0740        label141
0740  08F8  	MOVF float32_addsub_86_i, F
0741  1903  	BTFSC STATUS,Z
0742  2F4A  	GOTO	label142
0743  1003  	BCF STATUS,C
0744  0CAF  	RRF gbl_15_gbl_zSig+D'3', F
0745  0CAE  	RRF gbl_15_gbl_zSig+D'2', F
0746  0CAD  	RRF gbl_15_gbl_zSig+D'1', F
0747  0CAC  	RRF gbl_15_gbl_zSig, F
0748  03F8  	DECF float32_addsub_86_i, F
0749  2F40  	GOTO	label141
074A        label142
074A  01C3  	CLRF gbl_15_gbl_zExp
074B  01C4  	CLRF gbl_15_gbl_zExp+D'1'
074C  2F83  	GOTO	label153
074D        label143
074D  08C9  	MOVF gbl_15_gbl_bExp, F
074E  1D03  	BTFSS STATUS,Z
074F  2F56  	GOTO	label145
0750  08EE  	MOVF float32_addsub_1_expDiff, F
0751  1D03  	BTFSS STATUS,Z
0752  2F54  	GOTO	label144
0753  03EF  	DECF float32_addsub_1_expDiff+D'1', F
0754        label144
0754  03EE  	DECF float32_addsub_1_expDiff, F
0755  2F57  	GOTO	label146
0756        label145
0756  16AB  	BSF gbl_15_gbl_bSig+D'3',5
0757        label146
0757  08C8  	MOVF gbl_15_gbl_aExp, F
0758  1D03  	BTFSS STATUS,Z
0759  2F5F  	GOTO	label147
075A  0AEE  	INCF float32_addsub_1_expDiff, F
075B  1D03  	BTFSS STATUS,Z
075C  2F60  	GOTO	label148
075D  0AEF  	INCF float32_addsub_1_expDiff+D'1', F
075E  2F60  	GOTO	label148
075F        label147
075F  16A7  	BSF gbl_15_gbl_aSig+D'3',5
0760        label148
0760  086E  	MOVF float32_addsub_1_expDiff, W
0761  00F8  	MOVWF shift32Rig_0002B_arg_shiftCount
0762  086F  	MOVF float32_addsub_1_expDiff+D'1', W
0763  00F9  	MOVWF shift32Rig_0002B_arg_shiftCount+D'1'
0764  2025  	CALL shift32Rig_0002B
0765  2211  	CALL _float32_a_0002A
0766  08CD  	MOVF gbl_15_gbl_zSigZero, F
0767  1903  	BTFSC STATUS,Z
0768  2F71  	GOTO	label150
0769  0346  	DECF gbl_float_rounding_mode, W
076A  1D03  	BTFSS STATUS,Z
076B  2F6F  	GOTO	label149
076C  3001  	MOVLW 0x01
076D  00CC  	MOVWF gbl_15_gbl_zSign
076E  2F73  	GOTO	label151
076F        label149
076F  01CC  	CLRF gbl_15_gbl_zSign
0770  2F73  	GOTO	label151
0771        label150
0771  084A  	MOVF gbl_15_gbl_aSign, W
0772  00CC  	MOVWF gbl_15_gbl_zSign
0773        label151
0773  0848  	MOVF gbl_15_gbl_aExp, W
0774  00C3  	MOVWF gbl_15_gbl_zExp
0775  01C4  	CLRF gbl_15_gbl_zExp+D'1'
0776  1B2F  	BTFSC gbl_15_gbl_zSig+D'3',6
0777  2F81  	GOTO	label152
0778  1003  	BCF STATUS,C
0779  0DAC  	RLF gbl_15_gbl_zSig, F
077A  0DAD  	RLF gbl_15_gbl_zSig+D'1', F
077B  0DAE  	RLF gbl_15_gbl_zSig+D'2', F
077C  0DAF  	RLF gbl_15_gbl_zSig+D'3', F
077D  08C3  	MOVF gbl_15_gbl_zExp, F
077E  1903  	BTFSC STATUS,Z
077F  03C4  	DECF gbl_15_gbl_zExp+D'1', F
0780  03C3  	DECF gbl_15_gbl_zExp, F
0781        label152
0781  227D  	CALL NormaliseF_00019
0782  204F  	CALL roundFloat_0001A
0783        label153
0783  219B  	CALL packFloat3_0001D
0784  082C  	MOVF gbl_15_gbl_zSig, W
0785  00F0  	MOVWF float32_addsub_1_retxxx
0786  082D  	MOVF gbl_15_gbl_zSig+D'1', W
0787  00F1  	MOVWF float32_addsub_1_retxxx+D'1'
0788  082E  	MOVF gbl_15_gbl_zSig+D'2', W
0789  00F2  	MOVWF float32_addsub_1_retxxx+D'2'
078A  082F  	MOVF gbl_15_gbl_zSig+D'3', W
078B  00F3  	MOVWF float32_addsub_1_retxxx+D'3'
078C  0873  	MOVF float32_addsub_1_retxxx+D'3', W
078D  00F7  	MOVWF CompTempVarRet879+D'3'
078E  0872  	MOVF float32_addsub_1_retxxx+D'2', W
078F  00F6  	MOVWF CompTempVarRet879+D'2'
0790  0871  	MOVF float32_addsub_1_retxxx+D'1', W
0791  00F5  	MOVWF CompTempVarRet879+D'1'
0792  0870  	MOVF float32_addsub_1_retxxx, W
0793  00F4  	MOVWF CompTempVarRet879
0794  0008  	RETURN
0795        ; } float32_addsub function end

0795        __div_32_3_00001
0795        ; { __div_32_32 ; function begin
0795  01E4  	CLRF __div_32_3_00001_1_r
0796  01E5  	CLRF __div_32_3_00001_1_r+D'1'
0797  01E6  	CLRF __div_32_3_00001_1_r+D'2'
0798  01E7  	CLRF __div_32_3_00001_1_r+D'3'
0799  01E8  	CLRF CompTempVarRet210
079A  01E9  	CLRF CompTempVarRet210+D'1'
079B  01EA  	CLRF CompTempVarRet210+D'2'
079C  01EB  	CLRF CompTempVarRet210+D'3'
079D  01E1  	CLRF __div_32_3_00001_1_i
079E        label154
079E  1AE1  	BTFSC __div_32_3_00001_1_i,5
079F  0008  	RETURN
07A0  1003  	BCF STATUS,C
07A1  0DE8  	RLF CompTempVarRet210, F
07A2  0DE9  	RLF CompTempVarRet210+D'1', F
07A3  0DEA  	RLF CompTempVarRet210+D'2', F
07A4  0DEB  	RLF CompTempVarRet210+D'3', F
07A5  0DD8  	RLF __div_32_3_00001_arg_a, F
07A6  0DD9  	RLF __div_32_3_00001_arg_a+D'1', F
07A7  0DDA  	RLF __div_32_3_00001_arg_a+D'2', F
07A8  0DDB  	RLF __div_32_3_00001_arg_a+D'3', F
07A9  0DE4  	RLF __div_32_3_00001_1_r, F
07AA  0DE5  	RLF __div_32_3_00001_1_r+D'1', F
07AB  0DE6  	RLF __div_32_3_00001_1_r+D'2', F
07AC  0DE7  	RLF __div_32_3_00001_1_r+D'3', F
07AD  085F  	MOVF __div_32_3_00001_arg_b+D'3', W
07AE  0267  	SUBWF __div_32_3_00001_1_r+D'3', W
07AF  1D03  	BTFSS STATUS,Z
07B0  2FBB  	GOTO	label155
07B1  085E  	MOVF __div_32_3_00001_arg_b+D'2', W
07B2  0266  	SUBWF __div_32_3_00001_1_r+D'2', W
07B3  1D03  	BTFSS STATUS,Z
07B4  2FBB  	GOTO	label155
07B5  085D  	MOVF __div_32_3_00001_arg_b+D'1', W
07B6  0265  	SUBWF __div_32_3_00001_1_r+D'1', W
07B7  1D03  	BTFSS STATUS,Z
07B8  2FBB  	GOTO	label155
07B9  085C  	MOVF __div_32_3_00001_arg_b, W
07BA  0264  	SUBWF __div_32_3_00001_1_r, W
07BB        label155
07BB  1C03  	BTFSS STATUS,C
07BC  2FCC  	GOTO	label156
07BD  085C  	MOVF __div_32_3_00001_arg_b, W
07BE  02E4  	SUBWF __div_32_3_00001_1_r, F
07BF  085D  	MOVF __div_32_3_00001_arg_b+D'1', W
07C0  1C03  	BTFSS STATUS,C
07C1  0F5D  	INCFSZ __div_32_3_00001_arg_b+D'1', W
07C2  02E5  	SUBWF __div_32_3_00001_1_r+D'1', F
07C3  085E  	MOVF __div_32_3_00001_arg_b+D'2', W
07C4  1C03  	BTFSS STATUS,C
07C5  0F5E  	INCFSZ __div_32_3_00001_arg_b+D'2', W
07C6  02E6  	SUBWF __div_32_3_00001_1_r+D'2', F
07C7  085F  	MOVF __div_32_3_00001_arg_b+D'3', W
07C8  1C03  	BTFSS STATUS,C
07C9  0F5F  	INCFSZ __div_32_3_00001_arg_b+D'3', W
07CA  02E7  	SUBWF __div_32_3_00001_1_r+D'3', F
07CB  1468  	BSF CompTempVarRet210,0
07CC        label156
07CC  0AE1  	INCF __div_32_3_00001_1_i, F
07CD  2F9E  	GOTO	label154
07CE        ; } __div_32_32 function end


0BD3        _startup
0BD3  30D5  	MOVLW 0xD5
0BD4  1283  	BCF STATUS, RP0
0BD5  1303  	BCF STATUS, RP1
0BD6  00A0  	MOVWF gbl_14_LSR
0BD7  30C4  	MOVLW 0xC4
0BD8  00A1  	MOVWF gbl_14_LSR+D'1'
0BD9  30BB  	MOVLW 0xBB
0BDA  00A2  	MOVWF gbl_14_LSR+D'2'
0BDB  30DC  	MOVLW 0xDC
0BDC  00A3  	MOVWF gbl_14_LSR+D'3'
0BDD  01A4  	CLRF gbl_15_gbl_aSig
0BDE  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0BDF  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0BE0  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0BE1  01A8  	CLRF gbl_15_gbl_bSig
0BE2  01A9  	CLRF gbl_15_gbl_bSig+D'1'
0BE3  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0BE4  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0BE5  01AC  	CLRF gbl_15_gbl_zSig
0BE6  01AD  	CLRF gbl_15_gbl_zSig+D'1'
0BE7  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0BE8  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0BE9  01C8  	CLRF gbl_15_gbl_aExp
0BEA  01C9  	CLRF gbl_15_gbl_bExp
0BEB  01C3  	CLRF gbl_15_gbl_zExp
0BEC  01C4  	CLRF gbl_15_gbl_zExp+D'1'
0BED  01CA  	CLRF gbl_15_gbl_aSign
0BEE  01CB  	CLRF gbl_15_gbl_bSign
0BEF  01CC  	CLRF gbl_15_gbl_zSign
0BF0  01CD  	CLRF gbl_15_gbl_zSigZero
0BF1  01B0  	CLRF gbl_15_gbl_ret
0BF2  01B1  	CLRF gbl_15_gbl_ret+D'1'
0BF3  01B2  	CLRF gbl_15_gbl_ret+D'2'
0BF4  01B3  	CLRF gbl_15_gbl_ret+D'3'
0BF5  01C6  	CLRF gbl_float_rounding_mode
0BF6  01C7  	CLRF gbl_float_exception_flags
0BF7  01C5  	CLRF gbl_float_detect_tininess

0C0D  158A  	BSF PCLATH,3
0C0E  120A  	BCF PCLATH,4
0C0F  2BAF  	GOTO	main

2007  3F32  	DW 0x3F32
