;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
0025  01C5  	CLRF Wdt_Delay__0003E_1_i
0026        label4
0026  0844  	MOVF Wdt_Delay__0003E_arg_delay, W
0027  0245  	SUBWF Wdt_Delay__0003E_1_i, W
0028  1803  	BTFSC STATUS,C
002E  0AC5  	INCF Wdt_Delay__0003E_1_i, F
002F  2826  	GOTO	label4

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
002A  0064  	CLRWDT

        delay_ms(1);
002B  3001  	MOVLW 0x01
002C  00C6  	MOVWF delay_ms_00000_arg_del
002D  2010  	CALL delay_ms_00000

    }
}
0029  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\NEW CONTROLLER\FC\CONTROLLER2020_TEST.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Friday, January 24, 2020 10:29:49
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 3276800
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3fba
#endif
#ifdef HI_TECH_C
__CONFIG(0x3fba);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)




//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    portc
	#define LCD_1__PORT1    portc
	#define LCD_1__PORT2    portc
	#define LCD_1__PORT3    portc
	#define LCD_1__PORT4    portc
	#define LCD_1__PORT5    portc
	#define LCD_1__TRIS0    trisc
	#define LCD_1__TRIS1    trisc
	#define LCD_1__TRIS2    trisc
	#define LCD_1__TRIS3    trisc
	#define LCD_1__TRIS4    trisc
	#define LCD_1__TRIS5    trisc
	#define LCD_1__BIT0    	0
	#define LCD_1__BIT1    	1
	#define LCD_1__BIT2    	2
	#define LCD_1__BIT3    	3
	#define LCD_1__RS      	4
	#define LCD_1__E       	5
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
0030  1007  	BCF gbl_portc,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
0031  1087  	BCF gbl_portc,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0032  1107  	BCF gbl_portc,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0033  1187  	BCF gbl_portc,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0034  1207  	BCF gbl_portc,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0035  1287  	BCF gbl_portc,5

		pt = ((in >> 4) & 0x0f);
0036  0E52  	SWAPF FCD_LCDDis_00051_arg_in, W
0037  390F  	ANDLW 0x0F
0038  00D4  	MOVWF FCD_LCDDis_00051_1_pt
0039  300F  	MOVLW 0x0F
003A  05D4  	ANDWF FCD_LCDDis_00051_1_pt, F

		if (pt & 0x01)
003B  1854  	BTFSC FCD_LCDDis_00051_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
003C  1407  	BSF gbl_portc,0

		if (pt & 0x02)
003D  18D4  	BTFSC FCD_LCDDis_00051_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
003E  1487  	BSF gbl_portc,1

		if (pt & 0x04)
003F  1954  	BTFSC FCD_LCDDis_00051_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
0040  1507  	BSF gbl_portc,2

		if (pt & 0x08)
0041  19D4  	BTFSC FCD_LCDDis_00051_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
0042  1587  	BSF gbl_portc,3

		if (mask)
0043  08D3  	MOVF FCD_LCDDis_00051_arg_mask, F
0044  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
0045  1607  	BSF gbl_portc,4

		LCD_1__DELAY;
0046  300A  	MOVLW 0x0A
0047  00D5  	MOVWF delay_10us_00000_arg_del
0048  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0049  1687  	BSF gbl_portc,5

		LCD_1__DELAY;
004A  300A  	MOVLW 0x0A
004B  00D5  	MOVWF delay_10us_00000_arg_del
004C  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
004D  1287  	BCF gbl_portc,5

		pt = (in & 0x0f);
004E  300F  	MOVLW 0x0F
004F  0552  	ANDWF FCD_LCDDis_00051_arg_in, W
0050  00D4  	MOVWF FCD_LCDDis_00051_1_pt

		LCD_1__DELAY;
0051  300A  	MOVLW 0x0A
0052  00D5  	MOVWF delay_10us_00000_arg_del
0053  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
0054  1007  	BCF gbl_portc,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
0055  1087  	BCF gbl_portc,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0056  1107  	BCF gbl_portc,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0057  1187  	BCF gbl_portc,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0058  1207  	BCF gbl_portc,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0059  1287  	BCF gbl_portc,5

		if (pt & 0x01)
005A  1854  	BTFSC FCD_LCDDis_00051_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
005B  1407  	BSF gbl_portc,0

		if (pt & 0x02)
005C  18D4  	BTFSC FCD_LCDDis_00051_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
005D  1487  	BSF gbl_portc,1

		if (pt & 0x04)
005E  1954  	BTFSC FCD_LCDDis_00051_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
005F  1507  	BSF gbl_portc,2

		if (pt & 0x08)
0060  19D4  	BTFSC FCD_LCDDis_00051_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
0061  1587  	BSF gbl_portc,3

		if (mask)
0062  08D3  	MOVF FCD_LCDDis_00051_arg_mask, F
0063  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
0064  1607  	BSF gbl_portc,4

		LCD_1__DELAY;
0065  300A  	MOVLW 0x0A
0066  00D5  	MOVWF delay_10us_00000_arg_del
0067  201C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0068  1687  	BSF gbl_portc,5

		LCD_1__DELAY;
0069  300A  	MOVLW 0x0A
006A  00D5  	MOVWF delay_10us_00000_arg_del
006B  201C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
006C  1287  	BCF gbl_portc,5

		LCD_1__DELAY;
006D  300A  	MOVLW 0x0A
006E  00D5  	MOVWF delay_10us_00000_arg_del
006F  201C  	CALL delay_10us_00000


}
0070  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
00BC  1683  	BSF STATUS, RP0
00BD  1303  	BCF STATUS, RP1
00BE  1007  	BCF gbl_trisc,0
00BF  1283  	BCF STATUS, RP0
00C0  1007  	BCF gbl_portc,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
00C1  1683  	BSF STATUS, RP0
00C2  1087  	BCF gbl_trisc,1
00C3  1283  	BCF STATUS, RP0
00C4  1087  	BCF gbl_portc,1

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
00C5  1683  	BSF STATUS, RP0
00C6  1107  	BCF gbl_trisc,2
00C7  1283  	BCF STATUS, RP0
00C8  1107  	BCF gbl_portc,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
00C9  1683  	BSF STATUS, RP0
00CA  1187  	BCF gbl_trisc,3
00CB  1283  	BCF STATUS, RP0
00CC  1187  	BCF gbl_portc,3

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
00CD  1683  	BSF STATUS, RP0
00CE  1207  	BCF gbl_trisc,4
00CF  1283  	BCF STATUS, RP0
00D0  1207  	BCF gbl_portc,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
00D1  1683  	BSF STATUS, RP0
00D2  1287  	BCF gbl_trisc,5
00D3  1283  	BCF STATUS, RP0
00D4  1287  	BCF gbl_portc,5


		Wdt_Delay_Ms(12);
00D5  300C  	MOVLW 0x0C
00D6  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00D7  2025  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
00D8  3033  	MOVLW 0x33
00D9  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00DA  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00DB  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00DC  3002  	MOVLW 0x02
00DD  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00DE  2025  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
00DF  3033  	MOVLW 0x33
00E0  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00E1  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00E2  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00E3  3002  	MOVLW 0x02
00E4  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00E5  2025  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
00E6  3032  	MOVLW 0x32
00E7  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00E8  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00E9  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00EA  3002  	MOVLW 0x02
00EB  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00EC  2025  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
00ED  302C  	MOVLW 0x2C
00EE  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00EF  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00F0  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00F1  3002  	MOVLW 0x02
00F2  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00F3  2025  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
00F4  3006  	MOVLW 0x06
00F5  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00F6  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00F7  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00F8  3002  	MOVLW 0x02
00F9  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00FA  2025  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
00FB  300C  	MOVLW 0x0C
00FC  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00FD  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00FE  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00FF  3002  	MOVLW 0x02
0100  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
0101  2025  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
0102  3001  	MOVLW 0x01
0103  00D2  	MOVWF FCD_LCDDis_00051_arg_in
0104  01D3  	CLRF FCD_LCDDis_00051_arg_mask
0105  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
0106  3002  	MOVLW 0x02
0107  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
0108  2025  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0109  3002  	MOVLW 0x02
010A  00D2  	MOVWF FCD_LCDDis_00051_arg_in
010B  01D3  	CLRF FCD_LCDDis_00051_arg_mask
010C  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
010D  3002  	MOVLW 0x02
010E  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
010F  2025  	CALL Wdt_Delay__0003E


}
0110  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
00AB  3001  	MOVLW 0x01
00AC  1283  	BCF STATUS, RP0
00AD  1303  	BCF STATUS, RP1
00AE  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00AF  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00B0  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00B1  3002  	MOVLW 0x02
00B2  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00B3  2025  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
00B4  3002  	MOVLW 0x02
00B5  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00B6  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00B7  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00B8  3002  	MOVLW 0x02
00B9  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00BA  2025  	CALL Wdt_Delay__0003E


}
00BB  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
008D  08C3  	MOVF FCD_LCDDis_00056_arg_y, F
008E  1D03  	BTFSS STATUS,Z
008F  2893  	GOTO	label6
0093        label6

			y=0x80;
0090  3080  	MOVLW 0x80
0091  00C3  	MOVWF FCD_LCDDis_00056_arg_y

		else if (y==1)
0092  28A2  	GOTO	label9
0093  0343  	DECF FCD_LCDDis_00056_arg_y, W
0094  1D03  	BTFSS STATUS,Z
0095  2899  	GOTO	label7
0099        label7

			y=0xc0;
0096  30C0  	MOVLW 0xC0
0097  00C3  	MOVWF FCD_LCDDis_00056_arg_y


		#if (LCD_1__COLCNT == 16)
			else if (y==2)
0098  28A2  	GOTO	label9
0099  0843  	MOVF FCD_LCDDis_00056_arg_y, W
009A  3A02  	XORLW 0x02
009B  1D03  	BTFSS STATUS,Z
009C  28A0  	GOTO	label8
00A0        label8

				y=0x90;
009D  3090  	MOVLW 0x90
009E  00C3  	MOVWF FCD_LCDDis_00056_arg_y

			else
009F  28A2  	GOTO	label9
00A2        label9

				y=0xd0;
00A0  30D0  	MOVLW 0xD0
00A1  00C3  	MOVWF FCD_LCDDis_00056_arg_y

		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
00A2  0842  	MOVF FCD_LCDDis_00056_arg_x, W
00A3  0743  	ADDWF FCD_LCDDis_00056_arg_y, W
00A4  00D2  	MOVWF FCD_LCDDis_00051_arg_in
00A5  01D3  	CLRF FCD_LCDDis_00051_arg_mask
00A6  2030  	CALL FCD_LCDDis_00051

		Wdt_Delay_Ms(2);
00A7  3002  	MOVLW 0x02
00A8  00C4  	MOVWF Wdt_Delay__0003E_arg_delay
00A9  2025  	CALL Wdt_Delay__0003E


}
00AA  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)
{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
			Number = 0 - Number;
		}

		tmp_int = Number;
		if (Number >= 10000)
		{
			tmp_byte = tmp_int / 10000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10000;
				tmp_byte--;
			}
		}
		if (Number >= 1000)
		{
			tmp_byte = tmp_int / 1000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 1000;
				tmp_byte--;
			}
		}
		if (Number >= 100)
		{
			tmp_byte = tmp_int / 100;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 100;
				tmp_byte--;
			}
		}
		if (Number >= 10)
		{
			tmp_byte = tmp_int / 10;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10;
				tmp_byte--;
			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);

}

void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
0071  01D1  	CLRF FCD_LCDDis_00058_1_idx


		for (idx=0; idx<MSZ_String; idx++)
0072  01D1  	CLRF FCD_LCDDis_00058_1_idx
0073        label5
0073  0850  	MOVF FCD_LCDDis_00058_arg_MSZ_String, W
0074  0251  	SUBWF FCD_LCDDis_00058_1_idx, W
0075  1803  	BTFSC STATUS,C
008B  0AD1  	INCF FCD_LCDDis_00058_1_idx, F
008C  2873  	GOTO	label5

		{
			if (String[idx] == 0)
0077  1383  	BCF STATUS,IRP
0078  1843  	BTFSC FCD_LCDDis_00058_arg_String+D'1',0
0079  1783  	BSF STATUS,IRP
007A  0842  	MOVF FCD_LCDDis_00058_arg_String, W
007B  0751  	ADDWF FCD_LCDDis_00058_1_idx, W
007C  0084  	MOVWF FSR
007D  0880  	MOVF INDF, F
007E  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
0080  1383  	BCF STATUS,IRP
0081  1843  	BTFSC FCD_LCDDis_00058_arg_String+D'1',0
0082  1783  	BSF STATUS,IRP
0083  0842  	MOVF FCD_LCDDis_00058_arg_String, W
0084  0751  	ADDWF FCD_LCDDis_00058_1_idx, W
0085  0084  	MOVWF FSR
0086  0800  	MOVF INDF, W
0087  00D2  	MOVWF FCD_LCDDis_00051_arg_in
0088  3010  	MOVLW 0x10
0089  00D3  	MOVWF FCD_LCDDis_00051_arg_mask
008A  2030  	CALL FCD_LCDDis_00051

		}

}
0076  0008  	RETURN
007F  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations



void main()

{
	//Initialization
	adcon1 = 0x07;
0111  3007  	MOVLW 0x07
0112  1683  	BSF STATUS, RP0
0113  1303  	BCF STATUS, RP1
0114  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0115  30C0  	MOVLW 0xC0
0116  0081  	MOVWF gbl_option_reg



	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
0117  20BC  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0118  20AB  	CALL FCD_LCDDis_00053


	//Loop
	//Loop: While 1
	while (1)
0119        label10
014E  2919  	GOTO	label10

	{

		//Call Component Macro
		//Call Component Macro: Cursor(4, 0)
		FCD_LCDDisplay0_Cursor(4, 0);
0119  3004  	MOVLW 0x04
011A  00C2  	MOVWF FCD_LCDDis_00056_arg_x
011B  01C3  	CLRF FCD_LCDDis_00056_arg_y
011C  208D  	CALL FCD_LCDDis_00056


		//Call Component Macro
		//Call Component Macro: PrintString("GER-PER")
		FCD_LCDDisplay0_PrintString("GER-PER", 7);
011D  302D  	MOVLW 0x2D
011E  00C7  	MOVWF CompTempVar2217+D'3'
011F  3045  	MOVLW 0x45
0120  00C5  	MOVWF CompTempVar2217+D'1'
0121  00C9  	MOVWF CompTempVar2217+D'5'
0122  3047  	MOVLW 0x47
0123  00C4  	MOVWF CompTempVar2217
0124  3050  	MOVLW 0x50
0125  00C8  	MOVWF CompTempVar2217+D'4'
0126  3052  	MOVLW 0x52
0127  00C6  	MOVWF CompTempVar2217+D'2'
0128  00CA  	MOVWF CompTempVar2217+D'6'
0129  01CB  	CLRF CompTempVar2217+D'7'
012A  3000  	MOVLW HIGH(CompTempVar2217+D'0')
012B  00C3  	MOVWF FCD_LCDDis_00058_arg_String+D'1'
012C  3044  	MOVLW LOW(CompTempVar2217+D'0')
012D  00C2  	MOVWF FCD_LCDDis_00058_arg_String
012E  3007  	MOVLW 0x07
012F  00D0  	MOVWF FCD_LCDDis_00058_arg_MSZ_String
0130  2071  	CALL FCD_LCDDis_00058


		//Call Component Macro
		//Call Component Macro: Cursor(2, 1)
		FCD_LCDDisplay0_Cursor(2, 1);
0131  3002  	MOVLW 0x02
0132  00C2  	MOVWF FCD_LCDDis_00056_arg_x
0133  3001  	MOVLW 0x01
0134  00C3  	MOVWF FCD_LCDDis_00056_arg_y
0135  208D  	CALL FCD_LCDDis_00056


		//Call Component Macro
		//Call Component Macro: PrintString("ENGINEERING")
		FCD_LCDDisplay0_PrintString("ENGINEERING", 11);
0136  3045  	MOVLW 0x45
0137  00C4  	MOVWF CompTempVar2219
0138  00C9  	MOVWF CompTempVar2219+D'5'
0139  00CA  	MOVWF CompTempVar2219+D'6'
013A  3047  	MOVLW 0x47
013B  00C6  	MOVWF CompTempVar2219+D'2'
013C  00CE  	MOVWF CompTempVar2219+D'10'
013D  3049  	MOVLW 0x49
013E  00C7  	MOVWF CompTempVar2219+D'3'
013F  00CC  	MOVWF CompTempVar2219+D'8'
0140  304E  	MOVLW 0x4E
0141  00C5  	MOVWF CompTempVar2219+D'1'
0142  00C8  	MOVWF CompTempVar2219+D'4'
0143  00CD  	MOVWF CompTempVar2219+D'9'
0144  3052  	MOVLW 0x52
0145  00CB  	MOVWF CompTempVar2219+D'7'
0146  01CF  	CLRF CompTempVar2219+D'11'
0147  3000  	MOVLW HIGH(CompTempVar2219+D'0')
0148  00C3  	MOVWF FCD_LCDDis_00058_arg_String+D'1'
0149  3044  	MOVLW LOW(CompTempVar2219+D'0')
014A  00C2  	MOVWF FCD_LCDDis_00058_arg_String
014B  300B  	MOVLW 0x0B
014C  00D0  	MOVWF FCD_LCDDis_00058_arg_MSZ_String
014D  2071  	CALL FCD_LCDDis_00058



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0177  1283  	BCF STATUS, RP0
0178  1303  	BCF STATUS, RP1
0179  0E36  	SWAPF Int1BContext+D'2', W
017A  0084  	MOVWF FSR
017B  0E35  	SWAPF Int1BContext+D'1', W
017C  008A  	MOVWF PCLATH
017D  0E34  	SWAPF Int1BContext, W
017E  0083  	MOVWF STATUS
017F  0EFF  	SWAPF Int1Context, F
0180  0E7F  	SWAPF Int1Context, W
0181  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  294F  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2977  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C6  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30CC  	MOVLW 0xCC
0015        label2
0015  3EFF  	ADDLW 0xFF
0016  1D03  	BTFSS STATUS,Z
0017  2815  	GOTO	label2
0018  0000  	NOP
0019  0BC6  	DECFSZ delay_ms_00000_arg_del, F
001A  2814  	GOTO	label1
001B  0008  	RETURN
001C        ; } delay_ms function end

001C        delay_10us_00000
001C        ; { delay_10us ; function begin
001C        label3
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0BD5  	DECFSZ delay_10us_00000_arg_del, F
0023  281C  	GOTO	label3
0024  0008  	RETURN
0025        ; } delay_10us function end


014F        _startup
014F  30D5  	MOVLW 0xD5
0150  1283  	BCF STATUS, RP0
0151  1303  	BCF STATUS, RP1
0152  00A0  	MOVWF gbl_14_LSR
0153  30C4  	MOVLW 0xC4
0154  00A1  	MOVWF gbl_14_LSR+D'1'
0155  30BB  	MOVLW 0xBB
0156  00A2  	MOVWF gbl_14_LSR+D'2'
0157  30DC  	MOVLW 0xDC
0158  00A3  	MOVWF gbl_14_LSR+D'3'
0159  01A4  	CLRF gbl_15_gbl_aSig
015A  01A5  	CLRF gbl_15_gbl_aSig+D'1'
015B  01A6  	CLRF gbl_15_gbl_aSig+D'2'
015C  01A7  	CLRF gbl_15_gbl_aSig+D'3'
015D  01A8  	CLRF gbl_15_gbl_bSig
015E  01A9  	CLRF gbl_15_gbl_bSig+D'1'
015F  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0160  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0161  01AC  	CLRF gbl_15_gbl_zSig
0162  01AD  	CLRF gbl_15_gbl_zSig+D'1'
0163  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0164  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0165  01BC  	CLRF gbl_15_gbl_aExp
0166  01BD  	CLRF gbl_15_gbl_bExp
0167  01B7  	CLRF gbl_15_gbl_zExp
0168  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0169  01BE  	CLRF gbl_15_gbl_aSign
016A  01BF  	CLRF gbl_15_gbl_bSign
016B  01C0  	CLRF gbl_15_gbl_zSign
016C  01C1  	CLRF gbl_15_gbl_zSigZero
016D  01B0  	CLRF gbl_15_gbl_ret
016E  01B1  	CLRF gbl_15_gbl_ret+D'1'
016F  01B2  	CLRF gbl_15_gbl_ret+D'2'
0170  01B3  	CLRF gbl_15_gbl_ret+D'3'
0171  01BA  	CLRF gbl_float_rounding_mode
0172  01BB  	CLRF gbl_float_exception_flags
0173  01B9  	CLRF gbl_float_detect_tininess
0174  118A  	BCF PCLATH,3
0175  120A  	BCF PCLATH,4
0176  2911  	GOTO	main

2007  3FBA  	DW 0x3FBA
