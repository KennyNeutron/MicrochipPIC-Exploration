;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC18 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
0036  6A27      	CLRF Wdt_Delay__00034_1_i
0038            label4
0038  5026      	MOVF Wdt_Delay__00034_arg_delay, W
003A  6027      	CPFSLT Wdt_Delay__00034_1_i
0048  2A27      	INCF Wdt_Delay__00034_1_i, F
004A  D7F6      	BRA	label4

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
003E  0004      	CLRWDT

        delay_ms(1);
0040  0E01      	MOVLW 0x01
0042  6E28      	MOVWF delay_ms_00000_arg_del
0044  EC06F000  	CALL delay_ms_00000

    }
}
003C  0012      	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\EDICE\cont2020test2.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Monday, April 13, 2020 17:35:59
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P18F4550
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_13
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE3
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portb
#define MX_SPI_1_MISO_TRIS trisb
#define MX_SPI_1_MISO_PIN 0
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 7
#define MX_SPI_1_CLK_PORT portb
#define MX_SPI_1_CLK_TRIS trisb
#define MX_SPI_1_CLK_PIN 1
#define MX_SPI_1_SS_PORT porta
#define MX_SPI_1_SS_TRIS trisa
#define MX_SPI_1_SS_PIN 5
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portb
#define MX_I2C_1_SDA_TRIS trisb
#define MX_I2C_1_SDA_PIN 0
#define MX_I2C_1_SCL_PORT portb
#define MX_I2C_1_SCL_TRIS trisb
#define MX_I2C_1_SCL_PIN 1
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1
#define MX_PWM_2_PORT_A portb
#define MX_PWM_2_TRIS_A trisb
#define MX_PWM_2_PIN_A 3
#define MX_USB_TYPE1

//Functions
#define MX_CLK_SPEED 3276800
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic18.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x300000, 0x3b
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300001, 0x2
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300002, 0x18
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300003, 0x1e
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300004, 0xff
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300005, 0x86
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300006, 0x85
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300007, 0xff
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300008, 0x7
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300009, 0xc0
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x30000a, 0xf
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x30000b, 0xe0
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x30000c, 0xf
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x30000d, 0x40
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)




//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    portd
	#define LCD_1__PORT1    portd
	#define LCD_1__PORT2    portd
	#define LCD_1__PORT3    portd
	#define LCD_1__PORT4    portb
	#define LCD_1__PORT5    portb
	#define LCD_1__TRIS0    trisd
	#define LCD_1__TRIS1    trisd
	#define LCD_1__TRIS2    trisd
	#define LCD_1__TRIS3    trisd
	#define LCD_1__TRIS4    trisb
	#define LCD_1__TRIS5    trisb
	#define LCD_1__BIT0    	4
	#define LCD_1__BIT1    	5
	#define LCD_1__BIT2    	6
	#define LCD_1__BIT3    	7
	#define LCD_1__RS      	0
	#define LCD_1__E       	1
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
004C  9883      	BCF gbl_portd,4

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
004E  9A83      	BCF gbl_portd,5

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0050  9C83      	BCF gbl_portd,6

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0052  9E83      	BCF gbl_portd,7

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0054  9081      	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0056  9281      	BCF gbl_portb,1

		pt = ((in >> 4) & 0x0f);
0058  3835      	SWAPF FCD_LCDDis_00047_arg_in, W
005A  0B0F      	ANDLW 0x0F
005C  6E37      	MOVWF FCD_LCDDis_00047_1_pt
005E  0E0F      	MOVLW 0x0F
0060  1637      	ANDWF FCD_LCDDis_00047_1_pt, F

		if (pt & 0x01)
0062  B037      	BTFSC FCD_LCDDis_00047_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0064  8883      	BSF gbl_portd,4

		if (pt & 0x02)
0066  B237      	BTFSC FCD_LCDDis_00047_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0068  8A83      	BSF gbl_portd,5

		if (pt & 0x04)
006A  B437      	BTFSC FCD_LCDDis_00047_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
006C  8C83      	BSF gbl_portd,6

		if (pt & 0x08)
006E  B637      	BTFSC FCD_LCDDis_00047_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
0070  8E83      	BSF gbl_portd,7

		if (mask)
0072  5236      	MOVF FCD_LCDDis_00047_arg_mask, F
0074  A4D8      	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
0076  8081      	BSF gbl_portb,0

		LCD_1__DELAY;
0078  0E0A      	MOVLW 0x0A
007A  6E38      	MOVWF delay_10us_00000_arg_del
007C  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0080  8281      	BSF gbl_portb,1

		LCD_1__DELAY;
0082  0E0A      	MOVLW 0x0A
0084  6E38      	MOVWF delay_10us_00000_arg_del
0086  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
008A  9281      	BCF gbl_portb,1

		pt = (in & 0x0f);
008C  0E0F      	MOVLW 0x0F
008E  1435      	ANDWF FCD_LCDDis_00047_arg_in, W
0090  6E37      	MOVWF FCD_LCDDis_00047_1_pt

		LCD_1__DELAY;
0092  0E0A      	MOVLW 0x0A
0094  6E38      	MOVWF delay_10us_00000_arg_del
0096  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
009A  9883      	BCF gbl_portd,4

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
009C  9A83      	BCF gbl_portd,5

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
009E  9C83      	BCF gbl_portd,6

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
00A0  9E83      	BCF gbl_portd,7

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
00A2  9081      	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
00A4  9281      	BCF gbl_portb,1

		if (pt & 0x01)
00A6  B037      	BTFSC FCD_LCDDis_00047_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
00A8  8883      	BSF gbl_portd,4

		if (pt & 0x02)
00AA  B237      	BTFSC FCD_LCDDis_00047_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
00AC  8A83      	BSF gbl_portd,5

		if (pt & 0x04)
00AE  B437      	BTFSC FCD_LCDDis_00047_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
00B0  8C83      	BSF gbl_portd,6

		if (pt & 0x08)
00B2  B637      	BTFSC FCD_LCDDis_00047_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
00B4  8E83      	BSF gbl_portd,7

		if (mask)
00B6  5236      	MOVF FCD_LCDDis_00047_arg_mask, F
00B8  A4D8      	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
00BA  8081      	BSF gbl_portb,0

		LCD_1__DELAY;
00BC  0E0A      	MOVLW 0x0A
00BE  6E38      	MOVWF delay_10us_00000_arg_del
00C0  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
00C4  8281      	BSF gbl_portb,1

		LCD_1__DELAY;
00C6  0E0A      	MOVLW 0x0A
00C8  6E38      	MOVWF delay_10us_00000_arg_del
00CA  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
00CE  9281      	BCF gbl_portb,1

		LCD_1__DELAY;
00D0  0E0A      	MOVLW 0x0A
00D2  6E38      	MOVWF delay_10us_00000_arg_del
00D4  EC12F000  	CALL delay_10us_00000


}
00D8  0012      	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
016E  9895      	BCF gbl_trisd,4
0170  9883      	BCF gbl_portd,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
0172  9A95      	BCF gbl_trisd,5
0174  9A83      	BCF gbl_portd,5

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
0176  9C95      	BCF gbl_trisd,6
0178  9C83      	BCF gbl_portd,6

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
017A  9E95      	BCF gbl_trisd,7
017C  9E83      	BCF gbl_portd,7

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
017E  9093      	BCF gbl_trisb,0
0180  9081      	BCF gbl_portb,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
0182  9293      	BCF gbl_trisb,1
0184  9281      	BCF gbl_portb,1


		Wdt_Delay_Ms(12);
0186  0E0C      	MOVLW 0x0C
0188  6E26      	MOVWF Wdt_Delay__00034_arg_delay
018A  EC1BF000  	CALL Wdt_Delay__00034


		FCD_LCDDisplay0_RawSend(0x33, 0);
018E  0E33      	MOVLW 0x33
0190  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0192  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0194  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0198  0E02      	MOVLW 0x02
019A  6E26      	MOVWF Wdt_Delay__00034_arg_delay
019C  EC1BF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x33, 0);
01A0  0E33      	MOVLW 0x33
01A2  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01A4  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01A6  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01AA  0E02      	MOVLW 0x02
01AC  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01AE  EC1BF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x32, 0);
01B2  0E32      	MOVLW 0x32
01B4  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01B6  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01B8  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01BC  0E02      	MOVLW 0x02
01BE  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01C0  EC1BF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x2c, 0);
01C4  0E2C      	MOVLW 0x2C
01C6  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01C8  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01CA  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01CE  0E02      	MOVLW 0x02
01D0  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01D2  EC1BF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x06, 0);
01D6  0E06      	MOVLW 0x06
01D8  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01DA  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01DC  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01E0  0E02      	MOVLW 0x02
01E2  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01E4  EC1BF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x0c, 0);
01E8  0E0C      	MOVLW 0x0C
01EA  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01EC  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01EE  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01F2  0E02      	MOVLW 0x02
01F4  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01F6  EC1BF000  	CALL Wdt_Delay__00034


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
01FA  0E01      	MOVLW 0x01
01FC  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01FE  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0200  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0204  0E02      	MOVLW 0x02
0206  6E26      	MOVWF Wdt_Delay__00034_arg_delay
0208  EC1BF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x02, 0);
020C  0E02      	MOVLW 0x02
020E  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0210  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0212  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0216  0E02      	MOVLW 0x02
0218  6E26      	MOVWF Wdt_Delay__00034_arg_delay
021A  EC1BF000  	CALL Wdt_Delay__00034


}
021E  0012      	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
0148  0E01      	MOVLW 0x01
014A  6E35      	MOVWF FCD_LCDDis_00047_arg_in
014C  6A36      	CLRF FCD_LCDDis_00047_arg_mask
014E  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0152  0E02      	MOVLW 0x02
0154  6E26      	MOVWF Wdt_Delay__00034_arg_delay
0156  EC1BF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x02, 0);
015A  0E02      	MOVLW 0x02
015C  6E35      	MOVWF FCD_LCDDis_00047_arg_in
015E  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0160  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0164  0E02      	MOVLW 0x02
0166  6E26      	MOVWF Wdt_Delay__00034_arg_delay
0168  EC1BF000  	CALL Wdt_Delay__00034


}
016C  0012      	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
010E  5225      	MOVF FCD_LCDDis_0004C_arg_y, F
0110  E103      	BNZ	label6
0118            label6

			y=0x80;
0112  0E80      	MOVLW 0x80
0114  6E25      	MOVWF FCD_LCDDis_0004C_arg_y

		else if (y==1)
0116  D00D      	BRA	label9
0118  0425      	DECF FCD_LCDDis_0004C_arg_y, W
011A  E103      	BNZ	label7
0122            label7

			y=0xc0;
011C  0EC0      	MOVLW 0xC0
011E  6E25      	MOVWF FCD_LCDDis_0004C_arg_y


		#if (LCD_1__COLCNT == 16)
			else if (y==2)
0120  D008      	BRA	label9
0122  0E02      	MOVLW 0x02
0124  6225      	CPFSEQ FCD_LCDDis_0004C_arg_y
0126  D003      	BRA	label8
012E            label8

				y=0x90;
0128  0E90      	MOVLW 0x90
012A  6E25      	MOVWF FCD_LCDDis_0004C_arg_y

			else
012C  D002      	BRA	label9
0132            label9

				y=0xd0;
012E  0ED0      	MOVLW 0xD0
0130  6E25      	MOVWF FCD_LCDDis_0004C_arg_y

		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
0132  5024      	MOVF FCD_LCDDis_0004C_arg_x, W
0134  2425      	ADDWF FCD_LCDDis_0004C_arg_y, W
0136  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0138  6A36      	CLRF FCD_LCDDis_00047_arg_mask
013A  EC26F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
013E  0E02      	MOVLW 0x02
0140  6E26      	MOVWF Wdt_Delay__00034_arg_delay
0142  EC1BF000  	CALL Wdt_Delay__00034


}
0146  0012      	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)
{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
			Number = 0 - Number;
		}

		tmp_int = Number;
		if (Number >= 10000)
		{
			tmp_byte = tmp_int / 10000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10000;
				tmp_byte--;
			}
		}
		if (Number >= 1000)
		{
			tmp_byte = tmp_int / 1000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 1000;
				tmp_byte--;
			}
		}
		if (Number >= 100)
		{
			tmp_byte = tmp_int / 100;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 100;
				tmp_byte--;
			}
		}
		if (Number >= 10)
		{
			tmp_byte = tmp_int / 10;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10;
				tmp_byte--;
			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);

}

void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
00DA  6A34      	CLRF FCD_LCDDis_0004E_1_idx


		for (idx=0; idx<MSZ_String; idx++)
00DC  6A34      	CLRF FCD_LCDDis_0004E_1_idx
00DE            label5
00DE  5033      	MOVF FCD_LCDDis_0004E_arg_MSZ_String, W
00E0  6034      	CPFSLT FCD_LCDDis_0004E_1_idx
010A  2A34      	INCF FCD_LCDDis_0004E_1_idx, F
010C  D7E8      	BRA	label5

		{
			if (String[idx] == 0)
00E4  5025      	MOVF FCD_LCDDis_0004E_arg_String+D'1', W
00E6  6EEA      	MOVWF FSR0H
00E8  5024      	MOVF FCD_LCDDis_0004E_arg_String, W
00EA  2434      	ADDWF FCD_LCDDis_0004E_1_idx, W
00EC  6EE9      	MOVWF FSR0L
00EE  52EF      	MOVF INDF0, F
00F0  B4D8      	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
00F4  5025      	MOVF FCD_LCDDis_0004E_arg_String+D'1', W
00F6  6EEA      	MOVWF FSR0H
00F8  5024      	MOVF FCD_LCDDis_0004E_arg_String, W
00FA  2434      	ADDWF FCD_LCDDis_0004E_1_idx, W
00FC  6EE9      	MOVWF FSR0L
00FE  50EF      	MOVF INDF0, W
0100  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0102  0E10      	MOVLW 0x10
0104  6E36      	MOVWF FCD_LCDDis_00047_arg_mask
0106  EC26F000  	CALL FCD_LCDDis_00047

		}

}
00E2  0012      	RETURN
00F2  0012      	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void main()

{
	//Initialization
	adcon1 = 0x0F;
0220  0E0F      	MOVLW 0x0F
0222  6EC1      	MOVWF gbl_adcon1

	ucfg = 0x08;
0224  0E08      	MOVLW 0x08
0226  6E6F      	MOVWF gbl_ucfg

cr_bit(pie2, USBIE);
0228  9AA0      	BCF gbl_pie2,5



	//Interrupt initialization code
	


	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
022A  ECB7F000  	CALL FCD_LCDDis_00048


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
022E  ECA4F000  	CALL FCD_LCDDis_00049


	//Loop
	//Loop: While 1
	while (1)
0232            label10
0276  D7DD      	BRA	label10

	{

		//Call Component Macro
		//Call Component Macro: Cursor(0, 0)
		FCD_LCDDisplay0_Cursor(0, 0);
0232  6A24      	CLRF FCD_LCDDis_0004C_arg_x
0234  6A25      	CLRF FCD_LCDDis_0004C_arg_y
0236  EC87F000  	CALL FCD_LCDDis_0004C


		//Call Component Macro
		//Call Component Macro: PrintString("HELLO WORLD!")
		FCD_LCDDisplay0_PrintString("HELLO WORLD!", 12);
023A  0E20      	MOVLW 0x20
023C  6E2B      	MOVWF CompTempVar2204+D'5'
023E  0E21      	MOVLW 0x21
0240  6E31      	MOVWF CompTempVar2204+D'11'
0242  0E44      	MOVLW 0x44
0244  6E30      	MOVWF CompTempVar2204+D'10'
0246  0E45      	MOVLW 0x45
0248  6E27      	MOVWF CompTempVar2204+D'1'
024A  0E48      	MOVLW 0x48
024C  6E26      	MOVWF CompTempVar2204
024E  0E4C      	MOVLW 0x4C
0250  6E28      	MOVWF CompTempVar2204+D'2'
0252  6E29      	MOVWF CompTempVar2204+D'3'
0254  6E2F      	MOVWF CompTempVar2204+D'9'
0256  0E4F      	MOVLW 0x4F
0258  6E2A      	MOVWF CompTempVar2204+D'4'
025A  6E2D      	MOVWF CompTempVar2204+D'7'
025C  0E52      	MOVLW 0x52
025E  6E2E      	MOVWF CompTempVar2204+D'8'
0260  0E57      	MOVLW 0x57
0262  6E2C      	MOVWF CompTempVar2204+D'6'
0264  6A32      	CLRF CompTempVar2204+D'12'
0266  0E00      	MOVLW HIGH(CompTempVar2204+D'0')
0268  6E25      	MOVWF FCD_LCDDis_0004E_arg_String+D'1'
026A  0E26      	MOVLW LOW(CompTempVar2204+D'0')
026C  6E24      	MOVWF FCD_LCDDis_0004E_arg_String
026E  0E0C      	MOVLW 0x0C
0270  6E33      	MOVWF FCD_LCDDis_0004E_arg_MSZ_String
0272  EC6DF000  	CALL FCD_LCDDis_0004E



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
02C2  CFEAF001  	MOVFF FSR0H,  Int1Context
02C6  CFE9F002  	MOVFF FSR0L,  Int1Context+D'1'
02CA  CFF4F003  	MOVFF PRODH,  Int1Context+D'2'
02CE  CFF3F004  	MOVFF PRODL,  Int1Context+D'3'
02D2  C004FFF3  	MOVFF Int1Context+D'3',  PRODL
02D6  C003FFF4  	MOVFF Int1Context+D'2',  PRODH
02DA  C002FFE9  	MOVFF Int1Context+D'1',  FSR0L
02DE  C001FFEA  	MOVFF Int1Context,  FSR0H
02E2  0011      	RETFIE 1





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  EF3CF001  	GOTO	_startup

0008  EF61F001  	GOTO	interrupt
000C            delay_ms_00000
000C            ; { delay_ms ; function begin
000C  5228      	MOVF delay_ms_00000_arg_del, F
000E  0000      	NOP
0010  E101      	BNZ	label1
0012  0012      	RETURN
0014            label1
0014  0ECC      	MOVLW 0xCC
0016            label2
0016  0FFF      	ADDLW 0xFF
0018  A4D8      	BTFSS STATUS,Z
001A  D7FD      	BRA	label2
001C  0000      	NOP
001E  2E28      	DECFSZ delay_ms_00000_arg_del, F
0020  D7F9      	BRA	label1
0022  0012      	RETURN
0024            ; } delay_ms function end

0024            delay_10us_00000
0024            ; { delay_10us ; function begin
0024            label3
0024  0000      	NOP
0026  0000      	NOP
0028  0000      	NOP
002A  0000      	NOP
002C  0000      	NOP
002E  0000      	NOP
0030  2E38      	DECFSZ delay_10us_00000_arg_del, F
0032  D7F8      	BRA	label3
0034  0012      	RETURN
0036            ; } delay_10us function end


0278            _startup
0278  0ED5      	MOVLW 0xD5
027A  6E05      	MOVWF gbl_14_LSR
027C  0EC4      	MOVLW 0xC4
027E  6E06      	MOVWF gbl_14_LSR+D'1'
0280  0EBB      	MOVLW 0xBB
0282  6E07      	MOVWF gbl_14_LSR+D'2'
0284  0EDC      	MOVLW 0xDC
0286  6E08      	MOVWF gbl_14_LSR+D'3'
0288  6A09      	CLRF gbl_15_gbl_aSig
028A  6A0A      	CLRF gbl_15_gbl_aSig+D'1'
028C  6A0B      	CLRF gbl_15_gbl_aSig+D'2'
028E  6A0C      	CLRF gbl_15_gbl_aSig+D'3'
0290  6A0D      	CLRF gbl_15_gbl_bSig
0292  6A0E      	CLRF gbl_15_gbl_bSig+D'1'
0294  6A0F      	CLRF gbl_15_gbl_bSig+D'2'
0296  6A10      	CLRF gbl_15_gbl_bSig+D'3'
0298  6A11      	CLRF gbl_15_gbl_zSig
029A  6A12      	CLRF gbl_15_gbl_zSig+D'1'
029C  6A13      	CLRF gbl_15_gbl_zSig+D'2'
029E  6A14      	CLRF gbl_15_gbl_zSig+D'3'
02A0  6A1E      	CLRF gbl_15_gbl_aExp
02A2  6A1F      	CLRF gbl_15_gbl_bExp
02A4  6A19      	CLRF gbl_15_gbl_zExp
02A6  6A1A      	CLRF gbl_15_gbl_zExp+D'1'
02A8  6A20      	CLRF gbl_15_gbl_aSign
02AA  6A21      	CLRF gbl_15_gbl_bSign
02AC  6A22      	CLRF gbl_15_gbl_zSign
02AE  6A23      	CLRF gbl_15_gbl_zSigZero
02B0  6A15      	CLRF gbl_15_gbl_ret
02B2  6A16      	CLRF gbl_15_gbl_ret+D'1'
02B4  6A17      	CLRF gbl_15_gbl_ret+D'2'
02B6  6A18      	CLRF gbl_15_gbl_ret+D'3'
02B8  6A1C      	CLRF gbl_float_rounding_mode
02BA  6A1D      	CLRF gbl_float_exception_flags
02BC  6A1B      	CLRF gbl_float_detect_tininess
02BE  EF10F001  	GOTO	main

300000  023B      	DW 0x023B
300002  1E18      	DW 0x1E18
300004  86FF      	DW 0x86FF
300006  FF85      	DW 0xFF85
300008  C007      	DW 0xC007
30000A  E00F      	DW 0xE00F
30000C  400F      	DW 0x400F
