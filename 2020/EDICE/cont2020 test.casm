;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC18 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
0038  6A27      	CLRF Wdt_Delay__00034_1_i
003A            label4
003A  5026      	MOVF Wdt_Delay__00034_arg_delay, W
003C  6027      	CPFSLT Wdt_Delay__00034_1_i
004A  2A27      	INCF Wdt_Delay__00034_1_i, F
004C  D7F6      	BRA	label4

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0040  0004      	CLRWDT

        delay_ms(1);
0042  0E01      	MOVLW 0x01
0044  6E28      	MOVWF delay_ms_00000_arg_del
0046  EC06F000  	CALL delay_ms_00000

    }
}
003E  0012      	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\EDICE\cont2020 test.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Wednesday, April 08, 2020 18:04:02
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P18F4550
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_13
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE3
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portb
#define MX_SPI_1_MISO_TRIS trisb
#define MX_SPI_1_MISO_PIN 0
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 7
#define MX_SPI_1_CLK_PORT portb
#define MX_SPI_1_CLK_TRIS trisb
#define MX_SPI_1_CLK_PIN 1
#define MX_SPI_1_SS_PORT porta
#define MX_SPI_1_SS_TRIS trisa
#define MX_SPI_1_SS_PIN 5
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portb
#define MX_I2C_1_SDA_TRIS trisb
#define MX_I2C_1_SDA_PIN 0
#define MX_I2C_1_SCL_PORT portb
#define MX_I2C_1_SCL_TRIS trisb
#define MX_I2C_1_SCL_PIN 1
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1
#define MX_PWM_2_PORT_A portb
#define MX_PWM_2_TRIS_A trisb
#define MX_PWM_2_PIN_A 3
#define MX_USB_TYPE1

//Functions
#define MX_CLK_SPEED 4000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic18.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x300000, 0x3b
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300001, 0x2
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300002, 0x18
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300003, 0x1e
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300004, 0xff
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300005, 0x0
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300006, 0x4
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300007, 0xff
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300008, 0xd
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x300009, 0xc0
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x30000a, 0xf
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x30000b, 0xe0
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x30000c, 0xf
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif
#ifdef _BOOSTC
#pragma DATA 0x30000d, 0x40
#endif
#ifdef _HI_TECH_C
%C__CONFIG(%A, %V);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_TRUE (1)
#define FCV_FALSE (0)




//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    portd
	#define LCD_1__PORT1    portd
	#define LCD_1__PORT2    portd
	#define LCD_1__PORT3    portd
	#define LCD_1__PORT4    portd
	#define LCD_1__PORT5    portd
	#define LCD_1__TRIS0    trisd
	#define LCD_1__TRIS1    trisd
	#define LCD_1__TRIS2    trisd
	#define LCD_1__TRIS3    trisd
	#define LCD_1__TRIS4    trisd
	#define LCD_1__TRIS5    trisd
	#define LCD_1__BIT0    	0
	#define LCD_1__BIT1    	1
	#define LCD_1__BIT2    	2
	#define LCD_1__BIT3    	3
	#define LCD_1__RS      	4
	#define LCD_1__E       	5
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
004E  9083      	BCF gbl_portd,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
0050  9283      	BCF gbl_portd,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0052  9483      	BCF gbl_portd,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0054  9683      	BCF gbl_portd,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0056  9883      	BCF gbl_portd,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0058  9A83      	BCF gbl_portd,5

		pt = ((in >> 4) & 0x0f);
005A  3835      	SWAPF FCD_LCDDis_00047_arg_in, W
005C  0B0F      	ANDLW 0x0F
005E  6E37      	MOVWF FCD_LCDDis_00047_1_pt
0060  0E0F      	MOVLW 0x0F
0062  1637      	ANDWF FCD_LCDDis_00047_1_pt, F

		if (pt & 0x01)
0064  B037      	BTFSC FCD_LCDDis_00047_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0066  8083      	BSF gbl_portd,0

		if (pt & 0x02)
0068  B237      	BTFSC FCD_LCDDis_00047_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
006A  8283      	BSF gbl_portd,1

		if (pt & 0x04)
006C  B437      	BTFSC FCD_LCDDis_00047_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
006E  8483      	BSF gbl_portd,2

		if (pt & 0x08)
0070  B637      	BTFSC FCD_LCDDis_00047_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
0072  8683      	BSF gbl_portd,3

		if (mask)
0074  5236      	MOVF FCD_LCDDis_00047_arg_mask, F
0076  A4D8      	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
0078  8883      	BSF gbl_portd,4

		LCD_1__DELAY;
007A  0E0A      	MOVLW 0x0A
007C  6E38      	MOVWF delay_10us_00000_arg_del
007E  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0082  8A83      	BSF gbl_portd,5

		LCD_1__DELAY;
0084  0E0A      	MOVLW 0x0A
0086  6E38      	MOVWF delay_10us_00000_arg_del
0088  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
008C  9A83      	BCF gbl_portd,5

		pt = (in & 0x0f);
008E  0E0F      	MOVLW 0x0F
0090  1435      	ANDWF FCD_LCDDis_00047_arg_in, W
0092  6E37      	MOVWF FCD_LCDDis_00047_1_pt

		LCD_1__DELAY;
0094  0E0A      	MOVLW 0x0A
0096  6E38      	MOVWF delay_10us_00000_arg_del
0098  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
009C  9083      	BCF gbl_portd,0

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
009E  9283      	BCF gbl_portd,1

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
00A0  9483      	BCF gbl_portd,2

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
00A2  9683      	BCF gbl_portd,3

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
00A4  9883      	BCF gbl_portd,4

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
00A6  9A83      	BCF gbl_portd,5

		if (pt & 0x01)
00A8  B037      	BTFSC FCD_LCDDis_00047_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
00AA  8083      	BSF gbl_portd,0

		if (pt & 0x02)
00AC  B237      	BTFSC FCD_LCDDis_00047_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
00AE  8283      	BSF gbl_portd,1

		if (pt & 0x04)
00B0  B437      	BTFSC FCD_LCDDis_00047_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
00B2  8483      	BSF gbl_portd,2

		if (pt & 0x08)
00B4  B637      	BTFSC FCD_LCDDis_00047_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
00B6  8683      	BSF gbl_portd,3

		if (mask)
00B8  5236      	MOVF FCD_LCDDis_00047_arg_mask, F
00BA  A4D8      	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
00BC  8883      	BSF gbl_portd,4

		LCD_1__DELAY;
00BE  0E0A      	MOVLW 0x0A
00C0  6E38      	MOVWF delay_10us_00000_arg_del
00C2  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
00C6  8A83      	BSF gbl_portd,5

		LCD_1__DELAY;
00C8  0E0A      	MOVLW 0x0A
00CA  6E38      	MOVWF delay_10us_00000_arg_del
00CC  EC12F000  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
00D0  9A83      	BCF gbl_portd,5

		LCD_1__DELAY;
00D2  0E0A      	MOVLW 0x0A
00D4  6E38      	MOVWF delay_10us_00000_arg_del
00D6  EC12F000  	CALL delay_10us_00000


}
00DA  0012      	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
0170  9095      	BCF gbl_trisd,0
0172  9083      	BCF gbl_portd,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
0174  9295      	BCF gbl_trisd,1
0176  9283      	BCF gbl_portd,1

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
0178  9495      	BCF gbl_trisd,2
017A  9483      	BCF gbl_portd,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
017C  9695      	BCF gbl_trisd,3
017E  9683      	BCF gbl_portd,3

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
0180  9895      	BCF gbl_trisd,4
0182  9883      	BCF gbl_portd,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
0184  9A95      	BCF gbl_trisd,5
0186  9A83      	BCF gbl_portd,5


		Wdt_Delay_Ms(12);
0188  0E0C      	MOVLW 0x0C
018A  6E26      	MOVWF Wdt_Delay__00034_arg_delay
018C  EC1CF000  	CALL Wdt_Delay__00034


		FCD_LCDDisplay0_RawSend(0x33, 0);
0190  0E33      	MOVLW 0x33
0192  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0194  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0196  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
019A  0E02      	MOVLW 0x02
019C  6E26      	MOVWF Wdt_Delay__00034_arg_delay
019E  EC1CF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x33, 0);
01A2  0E33      	MOVLW 0x33
01A4  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01A6  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01A8  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01AC  0E02      	MOVLW 0x02
01AE  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01B0  EC1CF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x32, 0);
01B4  0E32      	MOVLW 0x32
01B6  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01B8  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01BA  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01BE  0E02      	MOVLW 0x02
01C0  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01C2  EC1CF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x2c, 0);
01C6  0E2C      	MOVLW 0x2C
01C8  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01CA  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01CC  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01D0  0E02      	MOVLW 0x02
01D2  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01D4  EC1CF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x06, 0);
01D8  0E06      	MOVLW 0x06
01DA  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01DC  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01DE  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01E2  0E02      	MOVLW 0x02
01E4  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01E6  EC1CF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x0c, 0);
01EA  0E0C      	MOVLW 0x0C
01EC  6E35      	MOVWF FCD_LCDDis_00047_arg_in
01EE  6A36      	CLRF FCD_LCDDis_00047_arg_mask
01F0  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
01F4  0E02      	MOVLW 0x02
01F6  6E26      	MOVWF Wdt_Delay__00034_arg_delay
01F8  EC1CF000  	CALL Wdt_Delay__00034


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
01FC  0E01      	MOVLW 0x01
01FE  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0200  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0202  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0206  0E02      	MOVLW 0x02
0208  6E26      	MOVWF Wdt_Delay__00034_arg_delay
020A  EC1CF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x02, 0);
020E  0E02      	MOVLW 0x02
0210  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0212  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0214  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0218  0E02      	MOVLW 0x02
021A  6E26      	MOVWF Wdt_Delay__00034_arg_delay
021C  EC1CF000  	CALL Wdt_Delay__00034


}
0220  0012      	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
014A  0E01      	MOVLW 0x01
014C  6E35      	MOVWF FCD_LCDDis_00047_arg_in
014E  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0150  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0154  0E02      	MOVLW 0x02
0156  6E26      	MOVWF Wdt_Delay__00034_arg_delay
0158  EC1CF000  	CALL Wdt_Delay__00034

		FCD_LCDDisplay0_RawSend(0x02, 0);
015C  0E02      	MOVLW 0x02
015E  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0160  6A36      	CLRF FCD_LCDDis_00047_arg_mask
0162  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0166  0E02      	MOVLW 0x02
0168  6E26      	MOVWF Wdt_Delay__00034_arg_delay
016A  EC1CF000  	CALL Wdt_Delay__00034


}
016E  0012      	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
0110  5225      	MOVF FCD_LCDDis_0004C_arg_y, F
0112  E103      	BNZ	label6
011A            label6

			y=0x80;
0114  0E80      	MOVLW 0x80
0116  6E25      	MOVWF FCD_LCDDis_0004C_arg_y

		else if (y==1)
0118  D00D      	BRA	label9
011A  0425      	DECF FCD_LCDDis_0004C_arg_y, W
011C  E103      	BNZ	label7
0124            label7

			y=0xc0;
011E  0EC0      	MOVLW 0xC0
0120  6E25      	MOVWF FCD_LCDDis_0004C_arg_y


		#if (LCD_1__COLCNT == 16)
			else if (y==2)
0122  D008      	BRA	label9
0124  0E02      	MOVLW 0x02
0126  6225      	CPFSEQ FCD_LCDDis_0004C_arg_y
0128  D003      	BRA	label8
0130            label8

				y=0x90;
012A  0E90      	MOVLW 0x90
012C  6E25      	MOVWF FCD_LCDDis_0004C_arg_y

			else
012E  D002      	BRA	label9
0134            label9

				y=0xd0;
0130  0ED0      	MOVLW 0xD0
0132  6E25      	MOVWF FCD_LCDDis_0004C_arg_y

		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
0134  5024      	MOVF FCD_LCDDis_0004C_arg_x, W
0136  2425      	ADDWF FCD_LCDDis_0004C_arg_y, W
0138  6E35      	MOVWF FCD_LCDDis_00047_arg_in
013A  6A36      	CLRF FCD_LCDDis_00047_arg_mask
013C  EC27F000  	CALL FCD_LCDDis_00047

		Wdt_Delay_Ms(2);
0140  0E02      	MOVLW 0x02
0142  6E26      	MOVWF Wdt_Delay__00034_arg_delay
0144  EC1CF000  	CALL Wdt_Delay__00034


}
0148  0012      	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)
{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
			Number = 0 - Number;
		}

		tmp_int = Number;
		if (Number >= 10000)
		{
			tmp_byte = tmp_int / 10000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10000;
				tmp_byte--;
			}
		}
		if (Number >= 1000)
		{
			tmp_byte = tmp_int / 1000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 1000;
				tmp_byte--;
			}
		}
		if (Number >= 100)
		{
			tmp_byte = tmp_int / 100;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 100;
				tmp_byte--;
			}
		}
		if (Number >= 10)
		{
			tmp_byte = tmp_int / 10;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10;
				tmp_byte--;
			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);

}

void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
00DC  6A34      	CLRF FCD_LCDDis_0004E_1_idx


		for (idx=0; idx<MSZ_String; idx++)
00DE  6A34      	CLRF FCD_LCDDis_0004E_1_idx
00E0            label5
00E0  5033      	MOVF FCD_LCDDis_0004E_arg_MSZ_String, W
00E2  6034      	CPFSLT FCD_LCDDis_0004E_1_idx
010C  2A34      	INCF FCD_LCDDis_0004E_1_idx, F
010E  D7E8      	BRA	label5

		{
			if (String[idx] == 0)
00E6  5025      	MOVF FCD_LCDDis_0004E_arg_String+D'1', W
00E8  6EEA      	MOVWF FSR0H
00EA  5024      	MOVF FCD_LCDDis_0004E_arg_String, W
00EC  2434      	ADDWF FCD_LCDDis_0004E_1_idx, W
00EE  6EE9      	MOVWF FSR0L
00F0  52EF      	MOVF INDF0, F
00F2  B4D8      	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
00F6  5025      	MOVF FCD_LCDDis_0004E_arg_String+D'1', W
00F8  6EEA      	MOVWF FSR0H
00FA  5024      	MOVF FCD_LCDDis_0004E_arg_String, W
00FC  2434      	ADDWF FCD_LCDDis_0004E_1_idx, W
00FE  6EE9      	MOVWF FSR0L
0100  50EF      	MOVF INDF0, W
0102  6E35      	MOVWF FCD_LCDDis_00047_arg_in
0104  0E10      	MOVLW 0x10
0106  6E36      	MOVWF FCD_LCDDis_00047_arg_mask
0108  EC27F000  	CALL FCD_LCDDis_00047

		}

}
00E4  0012      	RETURN
00F4  0012      	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void main()

{
	//Initialization
	adcon1 = 0x0F;
0222  0E0F      	MOVLW 0x0F
0224  6EC1      	MOVWF gbl_adcon1

	ucfg = 0x08;
0226  0E08      	MOVLW 0x08
0228  6E6F      	MOVWF gbl_ucfg

cr_bit(pie2, USBIE);
022A  9AA0      	BCF gbl_pie2,5



	//Interrupt initialization code
	


	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
022C  ECB8F000  	CALL FCD_LCDDis_00048


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0230  ECA5F000  	CALL FCD_LCDDis_00049


	//Loop
	//Loop: While 1
	while (1)
0234            label10
0278  D7DD      	BRA	label10

	{

		//Call Component Macro
		//Call Component Macro: Cursor(0, 0)
		FCD_LCDDisplay0_Cursor(0, 0);
0234  6A24      	CLRF FCD_LCDDis_0004C_arg_x
0236  6A25      	CLRF FCD_LCDDis_0004C_arg_y
0238  EC88F000  	CALL FCD_LCDDis_0004C


		//Call Component Macro
		//Call Component Macro: PrintString("hello world!")
		FCD_LCDDisplay0_PrintString("hello world!", 12);
023C  0E20      	MOVLW 0x20
023E  6E2B      	MOVWF CompTempVar2204+D'5'
0240  0E21      	MOVLW 0x21
0242  6E31      	MOVWF CompTempVar2204+D'11'
0244  0E64      	MOVLW 0x64
0246  6E30      	MOVWF CompTempVar2204+D'10'
0248  0E65      	MOVLW 0x65
024A  6E27      	MOVWF CompTempVar2204+D'1'
024C  0E68      	MOVLW 0x68
024E  6E26      	MOVWF CompTempVar2204
0250  0E6C      	MOVLW 0x6C
0252  6E28      	MOVWF CompTempVar2204+D'2'
0254  6E29      	MOVWF CompTempVar2204+D'3'
0256  6E2F      	MOVWF CompTempVar2204+D'9'
0258  0E6F      	MOVLW 0x6F
025A  6E2A      	MOVWF CompTempVar2204+D'4'
025C  6E2D      	MOVWF CompTempVar2204+D'7'
025E  0E72      	MOVLW 0x72
0260  6E2E      	MOVWF CompTempVar2204+D'8'
0262  0E77      	MOVLW 0x77
0264  6E2C      	MOVWF CompTempVar2204+D'6'
0266  6A32      	CLRF CompTempVar2204+D'12'
0268  0E00      	MOVLW HIGH(CompTempVar2204+D'0')
026A  6E25      	MOVWF FCD_LCDDis_0004E_arg_String+D'1'
026C  0E26      	MOVLW LOW(CompTempVar2204+D'0')
026E  6E24      	MOVWF FCD_LCDDis_0004E_arg_String
0270  0E0C      	MOVLW 0x0C
0272  6E33      	MOVWF FCD_LCDDis_0004E_arg_MSZ_String
0274  EC6EF000  	CALL FCD_LCDDis_0004E



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
02C4  CFEAF001  	MOVFF FSR0H,  Int1Context
02C8  CFE9F002  	MOVFF FSR0L,  Int1Context+D'1'
02CC  CFF4F003  	MOVFF PRODH,  Int1Context+D'2'
02D0  CFF3F004  	MOVFF PRODL,  Int1Context+D'3'
02D4  C004FFF3  	MOVFF Int1Context+D'3',  PRODL
02D8  C003FFF4  	MOVFF Int1Context+D'2',  PRODH
02DC  C002FFE9  	MOVFF Int1Context+D'1',  FSR0L
02E0  C001FFEA  	MOVFF Int1Context,  FSR0H
02E4  0011      	RETFIE 1





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  EF3DF001  	GOTO	_startup

0008  EF62F001  	GOTO	interrupt
000C            delay_ms_00000
000C            ; { delay_ms ; function begin
000C  5228      	MOVF delay_ms_00000_arg_del, F
000E  0000      	NOP
0010  E101      	BNZ	label1
0012  0012      	RETURN
0014            label1
0014  0EF9      	MOVLW 0xF9
0016            label2
0016  0FFF      	ADDLW 0xFF
0018  A4D8      	BTFSS STATUS,Z
001A  D7FD      	BRA	label2
001C  0000      	NOP
001E  2E28      	DECFSZ delay_ms_00000_arg_del, F
0020  D7F9      	BRA	label1
0022  0012      	RETURN
0024            ; } delay_ms function end

0024            delay_10us_00000
0024            ; { delay_10us ; function begin
0024            label3
0024  0000      	NOP
0026  0000      	NOP
0028  0000      	NOP
002A  0000      	NOP
002C  0000      	NOP
002E  0000      	NOP
0030  0000      	NOP
0032  2E38      	DECFSZ delay_10us_00000_arg_del, F
0034  D7F7      	BRA	label3
0036  0012      	RETURN
0038            ; } delay_10us function end


027A            _startup
027A  0ED5      	MOVLW 0xD5
027C  6E05      	MOVWF gbl_14_LSR
027E  0EC4      	MOVLW 0xC4
0280  6E06      	MOVWF gbl_14_LSR+D'1'
0282  0EBB      	MOVLW 0xBB
0284  6E07      	MOVWF gbl_14_LSR+D'2'
0286  0EDC      	MOVLW 0xDC
0288  6E08      	MOVWF gbl_14_LSR+D'3'
028A  6A09      	CLRF gbl_15_gbl_aSig
028C  6A0A      	CLRF gbl_15_gbl_aSig+D'1'
028E  6A0B      	CLRF gbl_15_gbl_aSig+D'2'
0290  6A0C      	CLRF gbl_15_gbl_aSig+D'3'
0292  6A0D      	CLRF gbl_15_gbl_bSig
0294  6A0E      	CLRF gbl_15_gbl_bSig+D'1'
0296  6A0F      	CLRF gbl_15_gbl_bSig+D'2'
0298  6A10      	CLRF gbl_15_gbl_bSig+D'3'
029A  6A11      	CLRF gbl_15_gbl_zSig
029C  6A12      	CLRF gbl_15_gbl_zSig+D'1'
029E  6A13      	CLRF gbl_15_gbl_zSig+D'2'
02A0  6A14      	CLRF gbl_15_gbl_zSig+D'3'
02A2  6A1E      	CLRF gbl_15_gbl_aExp
02A4  6A1F      	CLRF gbl_15_gbl_bExp
02A6  6A19      	CLRF gbl_15_gbl_zExp
02A8  6A1A      	CLRF gbl_15_gbl_zExp+D'1'
02AA  6A20      	CLRF gbl_15_gbl_aSign
02AC  6A21      	CLRF gbl_15_gbl_bSign
02AE  6A22      	CLRF gbl_15_gbl_zSign
02B0  6A23      	CLRF gbl_15_gbl_zSigZero
02B2  6A15      	CLRF gbl_15_gbl_ret
02B4  6A16      	CLRF gbl_15_gbl_ret+D'1'
02B6  6A17      	CLRF gbl_15_gbl_ret+D'2'
02B8  6A18      	CLRF gbl_15_gbl_ret+D'3'
02BA  6A1C      	CLRF gbl_float_rounding_mode
02BC  6A1D      	CLRF gbl_float_exception_flags
02BE  6A1B      	CLRF gbl_float_detect_tininess
02C0  EF11F001  	GOTO	main

300000  023B      	DW 0x023B
300002  1E18      	DW 0x1E18
300004  00FF      	DW 0x00FF
300006  FF04      	DW 0xFF04
300008  C00D      	DW 0xC00D
30000A  E00F      	DW 0xE00F
30000C  400F      	DW 0x400F
