;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
004F  01CC  	CLRF Wdt_Delay__0003E_1_i
0050        label6
0050  084B  	MOVF Wdt_Delay__0003E_arg_delay, W
0051  024C  	SUBWF Wdt_Delay__0003E_1_i, W
0052  1803  	BTFSC STATUS,C
0058  0ACC  	INCF Wdt_Delay__0003E_1_i, F
0059  2850  	GOTO	label6

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0054  0064  	CLRWDT

        delay_ms(1);
0055  3001  	MOVLW 0x01
0056  00CD  	MOVWF delay_ms_00000_arg_del
0057  2015  	CALL delay_ms_00000

    }
}
0053  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\RF\RF_flowcode\873_RF_TX.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Wednesday, July 29, 2020 10:43:31
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_own_spi();
void FCM_rf_begin();
void FCM_set_writing_pipe0();
void FCM_rf_setpa();
void FCM_open_writing_pipe_address();
void FCM_radio_writepayload();
void FCM_tx_flush();
void FCM_activate();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_BOOL FCV_SPB4 = (1);
0344  1442  	BSF gbl_FCV_SPB4,0

MX_BOOL FCV_SPB5 = (1);
0345  14C2  	BSF gbl_FCV_SPB5,1

MX_BOOL FCV_OSPI_OUT_BIT = (1);
0346  1542  	BSF gbl_FCV_OSPI_OUT_BIT,2

MX_UINT8 FCV_SPI_IHAP = (0x0);
0347  01C3  	CLRF gbl_FCV_SPI_IHAP

MX_BOOL FCV_SPB6 = (1);
0348  15C2  	BSF gbl_FCV_SPB6,3

MX_BOOL FCV_SPB7 = (1);
0349  1642  	BSF gbl_FCV_SPB7,4

MX_UINT8 FCV_RF_CONFIG;
MX_UINT8 FCV_OSPI_DATAIN = (0xff);
034A  30FF  	MOVLW 0xFF
034B  00C5  	MOVWF gbl_FCV_OSPI_DATAIN

MX_BOOL FCV_OSPI_IN_BIT = (1);
034C  16C2  	BSF gbl_FCV_OSPI_IN_BIT,5

MX_UINT8 FCV_OSPI_DATAOUT = (0xff);
034D  30FF  	MOVLW 0xFF
034E  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT

MX_BOOL FCV_SPB0 = (1);
034F  1742  	BSF gbl_FCV_SPB0,6

MX_BOOL FCV_SPB1;
MX_BOOL FCV_SPB2 = (1);
0350  1447  	BSF gbl_FCV_SPB2,0

MX_BOOL FCV_SPB3 = (1);
0351  14C7  	BSF gbl_FCV_SPB3,1


MX_UINT8 FCLV_LOOP1;
MX_UINT8 FCLV_LOOP2;
MX_UINT8 FCLV_LOOP3;



//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    portb
	#define LCD_1__PORT1    portb
	#define LCD_1__PORT2    portb
	#define LCD_1__PORT3    portb
	#define LCD_1__PORT4    portb
	#define LCD_1__PORT5    portb
	#define LCD_1__TRIS0    trisb
	#define LCD_1__TRIS1    trisb
	#define LCD_1__TRIS2    trisb
	#define LCD_1__TRIS3    trisb
	#define LCD_1__TRIS4    trisb
	#define LCD_1__TRIS5    trisb
	#define LCD_1__BIT0    	2
	#define LCD_1__BIT1    	3
	#define LCD_1__BIT2    	4
	#define LCD_1__BIT3    	5
	#define LCD_1__RS      	0
	#define LCD_1__E       	1
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
01EA  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
01EB  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
01EC  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
01ED  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
01EE  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
01EF  1086  	BCF gbl_portb,1

		pt = ((in >> 4) & 0x0f);
01F0  0E4B  	SWAPF FCD_LCDDis_00059_arg_in, W
01F1  390F  	ANDLW 0x0F
01F2  00CD  	MOVWF FCD_LCDDis_00059_1_pt
01F3  300F  	MOVLW 0x0F
01F4  05CD  	ANDWF FCD_LCDDis_00059_1_pt, F

		if (pt & 0x01)
01F5  184D  	BTFSC FCD_LCDDis_00059_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
01F6  1506  	BSF gbl_portb,2

		if (pt & 0x02)
01F7  18CD  	BTFSC FCD_LCDDis_00059_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
01F8  1586  	BSF gbl_portb,3

		if (pt & 0x04)
01F9  194D  	BTFSC FCD_LCDDis_00059_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
01FA  1606  	BSF gbl_portb,4

		if (pt & 0x08)
01FB  19CD  	BTFSC FCD_LCDDis_00059_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
01FC  1686  	BSF gbl_portb,5

		if (mask)
01FD  08CC  	MOVF FCD_LCDDis_00059_arg_mask, F
01FE  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
01FF  1406  	BSF gbl_portb,0

		LCD_1__DELAY;
0200  300A  	MOVLW 0x0A
0201  00CE  	MOVWF delay_10us_00000_arg_del
0202  2041  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0203  1486  	BSF gbl_portb,1

		LCD_1__DELAY;
0204  300A  	MOVLW 0x0A
0205  00CE  	MOVWF delay_10us_00000_arg_del
0206  2041  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0207  1086  	BCF gbl_portb,1

		pt = (in & 0x0f);
0208  300F  	MOVLW 0x0F
0209  054B  	ANDWF FCD_LCDDis_00059_arg_in, W
020A  00CD  	MOVWF FCD_LCDDis_00059_1_pt

		LCD_1__DELAY;
020B  300A  	MOVLW 0x0A
020C  00CE  	MOVWF delay_10us_00000_arg_del
020D  2041  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
020E  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
020F  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0210  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0211  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0212  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0213  1086  	BCF gbl_portb,1

		if (pt & 0x01)
0214  184D  	BTFSC FCD_LCDDis_00059_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0215  1506  	BSF gbl_portb,2

		if (pt & 0x02)
0216  18CD  	BTFSC FCD_LCDDis_00059_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0217  1586  	BSF gbl_portb,3

		if (pt & 0x04)
0218  194D  	BTFSC FCD_LCDDis_00059_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
0219  1606  	BSF gbl_portb,4

		if (pt & 0x08)
021A  19CD  	BTFSC FCD_LCDDis_00059_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
021B  1686  	BSF gbl_portb,5

		if (mask)
021C  08CC  	MOVF FCD_LCDDis_00059_arg_mask, F
021D  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
021E  1406  	BSF gbl_portb,0

		LCD_1__DELAY;
021F  300A  	MOVLW 0x0A
0220  00CE  	MOVWF delay_10us_00000_arg_del
0221  2041  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
0222  1486  	BSF gbl_portb,1

		LCD_1__DELAY;
0223  300A  	MOVLW 0x0A
0224  00CE  	MOVWF delay_10us_00000_arg_del
0225  2041  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
0226  1086  	BCF gbl_portb,1

		LCD_1__DELAY;
0227  300A  	MOVLW 0x0A
0228  00CE  	MOVWF delay_10us_00000_arg_del
0229  2041  	CALL delay_10us_00000


}
022A  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
028C  1683  	BSF STATUS, RP0
028D  1303  	BCF STATUS, RP1
028E  1106  	BCF gbl_trisb,2
028F  1283  	BCF STATUS, RP0
0290  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
0291  1683  	BSF STATUS, RP0
0292  1186  	BCF gbl_trisb,3
0293  1283  	BCF STATUS, RP0
0294  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
0295  1683  	BSF STATUS, RP0
0296  1206  	BCF gbl_trisb,4
0297  1283  	BCF STATUS, RP0
0298  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
0299  1683  	BSF STATUS, RP0
029A  1286  	BCF gbl_trisb,5
029B  1283  	BCF STATUS, RP0
029C  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
029D  1683  	BSF STATUS, RP0
029E  1006  	BCF gbl_trisb,0
029F  1283  	BCF STATUS, RP0
02A0  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
02A1  1683  	BSF STATUS, RP0
02A2  1086  	BCF gbl_trisb,1
02A3  1283  	BCF STATUS, RP0
02A4  1086  	BCF gbl_portb,1


		Wdt_Delay_Ms(12);
02A5  300C  	MOVLW 0x0C
02A6  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02A7  204F  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
02A8  3033  	MOVLW 0x33
02A9  00CB  	MOVWF FCD_LCDDis_00059_arg_in
02AA  01CC  	CLRF FCD_LCDDis_00059_arg_mask
02AB  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
02AC  3002  	MOVLW 0x02
02AD  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02AE  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
02AF  3033  	MOVLW 0x33
02B0  00CB  	MOVWF FCD_LCDDis_00059_arg_in
02B1  01CC  	CLRF FCD_LCDDis_00059_arg_mask
02B2  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
02B3  3002  	MOVLW 0x02
02B4  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02B5  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
02B6  3032  	MOVLW 0x32
02B7  00CB  	MOVWF FCD_LCDDis_00059_arg_in
02B8  01CC  	CLRF FCD_LCDDis_00059_arg_mask
02B9  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
02BA  3002  	MOVLW 0x02
02BB  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02BC  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
02BD  302C  	MOVLW 0x2C
02BE  00CB  	MOVWF FCD_LCDDis_00059_arg_in
02BF  01CC  	CLRF FCD_LCDDis_00059_arg_mask
02C0  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
02C1  3002  	MOVLW 0x02
02C2  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02C3  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
02C4  3006  	MOVLW 0x06
02C5  00CB  	MOVWF FCD_LCDDis_00059_arg_in
02C6  01CC  	CLRF FCD_LCDDis_00059_arg_mask
02C7  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
02C8  3002  	MOVLW 0x02
02C9  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02CA  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
02CB  300C  	MOVLW 0x0C
02CC  00CB  	MOVWF FCD_LCDDis_00059_arg_in
02CD  01CC  	CLRF FCD_LCDDis_00059_arg_mask
02CE  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
02CF  3002  	MOVLW 0x02
02D0  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02D1  204F  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
02D2  3001  	MOVLW 0x01
02D3  00CB  	MOVWF FCD_LCDDis_00059_arg_in
02D4  01CC  	CLRF FCD_LCDDis_00059_arg_mask
02D5  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
02D6  3002  	MOVLW 0x02
02D7  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02D8  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
02D9  3002  	MOVLW 0x02
02DA  00CB  	MOVWF FCD_LCDDis_00059_arg_in
02DB  01CC  	CLRF FCD_LCDDis_00059_arg_mask
02DC  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
02DD  3002  	MOVLW 0x02
02DE  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
02DF  204F  	CALL Wdt_Delay__0003E


}
02E0  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
027B  3001  	MOVLW 0x01
027C  1283  	BCF STATUS, RP0
027D  1303  	BCF STATUS, RP1
027E  00CB  	MOVWF FCD_LCDDis_00059_arg_in
027F  01CC  	CLRF FCD_LCDDis_00059_arg_mask
0280  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
0281  3002  	MOVLW 0x02
0282  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
0283  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0284  3002  	MOVLW 0x02
0285  00CB  	MOVWF FCD_LCDDis_00059_arg_in
0286  01CC  	CLRF FCD_LCDDis_00059_arg_mask
0287  21EA  	CALL FCD_LCDDis_00059

		Wdt_Delay_Ms(2);
0288  3002  	MOVLW 0x02
0289  00CB  	MOVWF Wdt_Delay__0003E_arg_delay
028A  204F  	CALL Wdt_Delay__0003E


}
028B  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)
{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
			y=0x80;
		else if (y==1)
			y=0xc0;

		#if (LCD_1__COLCNT == 16)
			else if (y==2)
				y=0x90;
			else
				y=0xd0;
		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)
{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
			Number = 0 - Number;
		}

		tmp_int = Number;
		if (Number >= 10000)
		{
			tmp_byte = tmp_int / 10000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10000;
				tmp_byte--;
			}
		}
		if (Number >= 1000)
		{
			tmp_byte = tmp_int / 1000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 1000;
				tmp_byte--;
			}
		}
		if (Number >= 100)
		{
			tmp_byte = tmp_int / 100;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 100;
				tmp_byte--;
			}
		}
		if (Number >= 10)
		{
			tmp_byte = tmp_int / 10;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10;
				tmp_byte--;
			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);

}

void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)
{
	
		MX_UINT8 idx = 0;

		for (idx=0; idx<MSZ_String; idx++)
		{
			if (String[idx] == 0)
			{
				break;
			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
		}

}

void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_own_spi()

{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
005A  30FB  	MOVLW 0xFB
005B  1683  	BSF STATUS, RP0
005C  1303  	BCF STATUS, RP1
005D  0507  	ANDWF gbl_trisc, W
005E  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
005F  30FB  	MOVLW 0xFB
0060  1283  	BCF STATUS, RP0
0061  0507  	ANDWF gbl_portc, W
0062  0087  	MOVWF gbl_portc


	//Output
	//Output: 1 -> C5
	trisc = trisc & 0xDF;
0063  30DF  	MOVLW 0xDF
0064  1683  	BSF STATUS, RP0
0065  0507  	ANDWF gbl_trisc, W
0066  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xDF) | 0x20;
0067  30DF  	MOVLW 0xDF
0068  1283  	BCF STATUS, RP0
0069  0507  	ANDWF gbl_portc, W
006A  00CB  	MOVWF CompTempVar2188
006B  3020  	MOVLW 0x20
006C  044B  	IORWF CompTempVar2188, W
006D  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xDF;

	//clk
	//Output: 0 -> C3
	trisc = trisc & 0xF7;
006E  30F7  	MOVLW 0xF7
006F  1683  	BSF STATUS, RP0
0070  0507  	ANDWF gbl_trisc, W
0071  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xF7) | 0x08;
	else
		portc = portc & 0xF7;
0072  30F7  	MOVLW 0xF7
0073  1283  	BCF STATUS, RP0
0074  0507  	ANDWF gbl_portc, W
0075  0087  	MOVWF gbl_portc


	//Calculation
	//Calculation:
	//  spi_ihap = 0
	FCV_SPI_IHAP = 0;
0076  01C3  	CLRF gbl_FCV_SPI_IHAP


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP2=0; FCLV_LOOP2<8; FCLV_LOOP2++)
0077  01C9  	CLRF gbl_FCLV_LOOP2
0078        label7
0078  3008  	MOVLW 0x08
0079  0249  	SUBWF gbl_FCLV_LOOP2, W
007A  1803  	BTFSC STATUS,C
007B  28FC  	GOTO	label17
00FA  0AC9  	INCF gbl_FCLV_LOOP2, F
00FB  2878  	GOTO	label7
00FC        label17

	{

		//Switch
		//Switch: spi_ihap?
		switch (FCV_SPI_IHAP)
0095  28F5  	GOTO	label16

		{
			case 1:
007C  0843  	MOVF gbl_FCV_SPI_IHAP, W
007D  3A01  	XORLW 0x01
007E  1903  	BTFSC STATUS,Z
007F  2896  	GOTO	label8
0096        label8

			{
				//Calculation
				//Calculation:
				//  spb1 = ospi_dataout AND 1
				FCV_SPB1 = FCV_OSPI_DATAOUT & 1;
0096  3001  	MOVLW 0x01
0097  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
0098  00CB  	MOVWF CompTempVar2189
0099  01CC  	CLRF CompTempVar2190
009A  08CB  	MOVF CompTempVar2189, F
009B  1D03  	BTFSS STATUS,Z
009C  144C  	BSF CompTempVar2190,0
009D  13C2  	BCF gbl_FCV_SPB1,7
009E  084C  	MOVF CompTempVar2190, W
009F  1D03  	BTFSS STATUS,Z
00A0  17C2  	BSF gbl_FCV_SPB1,7


				break;
00A1  28F5  	GOTO	label16

			}
			case 2:
0080  3A03  	XORLW 0x03
0081  1903  	BTFSC STATUS,Z
0082  28A2  	GOTO	label9
00A2        label9

			{
				//Calculation
				//Calculation:
				//  spb2 = ospi_dataout AND 1
				FCV_SPB2 = FCV_OSPI_DATAOUT & 1;
00A2  3001  	MOVLW 0x01
00A3  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
00A4  00CB  	MOVWF CompTempVar2191
00A5  01CC  	CLRF CompTempVar2192
00A6  08CB  	MOVF CompTempVar2191, F
00A7  1D03  	BTFSS STATUS,Z
00A8  144C  	BSF CompTempVar2192,0
00A9  1047  	BCF gbl_FCV_SPB2,0
00AA  084C  	MOVF CompTempVar2192, W
00AB  1D03  	BTFSS STATUS,Z
00AC  1447  	BSF gbl_FCV_SPB2,0


				break;
00AD  28F5  	GOTO	label16

			}
			case 3:
0083  3A01  	XORLW 0x01
0084  1903  	BTFSC STATUS,Z
0085  28AE  	GOTO	label10
00AE        label10

			{
				//Calculation
				//Calculation:
				//  spb3 = ospi_dataout AND 1
				FCV_SPB3 = FCV_OSPI_DATAOUT & 1;
00AE  3001  	MOVLW 0x01
00AF  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
00B0  00CB  	MOVWF CompTempVar2193
00B1  01CC  	CLRF CompTempVar2194
00B2  08CB  	MOVF CompTempVar2193, F
00B3  1D03  	BTFSS STATUS,Z
00B4  144C  	BSF CompTempVar2194,0
00B5  10C7  	BCF gbl_FCV_SPB3,1
00B6  084C  	MOVF CompTempVar2194, W
00B7  1D03  	BTFSS STATUS,Z
00B8  14C7  	BSF gbl_FCV_SPB3,1


				break;
00B9  28F5  	GOTO	label16

			}
			case 4:
0086  3A07  	XORLW 0x07
0087  1903  	BTFSC STATUS,Z
0088  28BA  	GOTO	label11
00BA        label11

			{
				//Calculation
				//Calculation:
				//  spb4 = ospi_dataout AND 1
				FCV_SPB4 = FCV_OSPI_DATAOUT & 1;
00BA  3001  	MOVLW 0x01
00BB  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
00BC  00CB  	MOVWF CompTempVar2195
00BD  01CC  	CLRF CompTempVar2196
00BE  08CB  	MOVF CompTempVar2195, F
00BF  1D03  	BTFSS STATUS,Z
00C0  144C  	BSF CompTempVar2196,0
00C1  1042  	BCF gbl_FCV_SPB4,0
00C2  084C  	MOVF CompTempVar2196, W
00C3  1D03  	BTFSS STATUS,Z
00C4  1442  	BSF gbl_FCV_SPB4,0


				break;
00C5  28F5  	GOTO	label16

			}
			case 5:
0089  3A01  	XORLW 0x01
008A  1903  	BTFSC STATUS,Z
008B  28C6  	GOTO	label12
00C6        label12

			{
				//Calculation
				//Calculation:
				//  spb5 = ospi_dataout AND 1
				FCV_SPB5 = FCV_OSPI_DATAOUT & 1;
00C6  3001  	MOVLW 0x01
00C7  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
00C8  00CB  	MOVWF CompTempVar2197
00C9  01CC  	CLRF CompTempVar2198
00CA  08CB  	MOVF CompTempVar2197, F
00CB  1D03  	BTFSS STATUS,Z
00CC  144C  	BSF CompTempVar2198,0
00CD  10C2  	BCF gbl_FCV_SPB5,1
00CE  084C  	MOVF CompTempVar2198, W
00CF  1D03  	BTFSS STATUS,Z
00D0  14C2  	BSF gbl_FCV_SPB5,1


				break;
00D1  28F5  	GOTO	label16

			}
			case 6:
008C  3A03  	XORLW 0x03
008D  1903  	BTFSC STATUS,Z
008E  28D2  	GOTO	label13
00D2        label13

			{
				//Calculation
				//Calculation:
				//  spb6 = ospi_dataout AND 1
				FCV_SPB6 = FCV_OSPI_DATAOUT & 1;
00D2  3001  	MOVLW 0x01
00D3  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
00D4  00CB  	MOVWF CompTempVar2199
00D5  01CC  	CLRF CompTempVar2200
00D6  08CB  	MOVF CompTempVar2199, F
00D7  1D03  	BTFSS STATUS,Z
00D8  144C  	BSF CompTempVar2200,0
00D9  11C2  	BCF gbl_FCV_SPB6,3
00DA  084C  	MOVF CompTempVar2200, W
00DB  1D03  	BTFSS STATUS,Z
00DC  15C2  	BSF gbl_FCV_SPB6,3


				break;
00DD  28F5  	GOTO	label16

			}
			case 7:
008F  3A01  	XORLW 0x01
0090  1903  	BTFSC STATUS,Z
0091  28DE  	GOTO	label14
00DE        label14

			{
				//Calculation
				//Calculation:
				//  spb7 = ospi_dataout AND 1
				FCV_SPB7 = FCV_OSPI_DATAOUT & 1;
00DE  3001  	MOVLW 0x01
00DF  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
00E0  00CB  	MOVWF CompTempVar2201
00E1  01CC  	CLRF CompTempVar2202
00E2  08CB  	MOVF CompTempVar2201, F
00E3  1D03  	BTFSS STATUS,Z
00E4  144C  	BSF CompTempVar2202,0
00E5  1242  	BCF gbl_FCV_SPB7,4
00E6  084C  	MOVF CompTempVar2202, W
00E7  1D03  	BTFSS STATUS,Z
00E8  1642  	BSF gbl_FCV_SPB7,4


				break;
00E9  28F5  	GOTO	label16

			}
			case 0:
0092  3A07  	XORLW 0x07
0093  1903  	BTFSC STATUS,Z
0094  28EA  	GOTO	label15
00EA        label15

			{
				//Calculation
				//Calculation:
				//  spb0 = ospi_dataout AND 1
				FCV_SPB0 = FCV_OSPI_DATAOUT & 1;
00EA  3001  	MOVLW 0x01
00EB  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
00EC  00CB  	MOVWF CompTempVar2203
00ED  01CC  	CLRF CompTempVar2204
00EE  08CB  	MOVF CompTempVar2203, F
00EF  1D03  	BTFSS STATUS,Z
00F0  144C  	BSF CompTempVar2204,0
00F1  1342  	BCF gbl_FCV_SPB0,6
00F2  084C  	MOVF CompTempVar2204, W
00F3  1D03  	BTFSS STATUS,Z
00F4  1742  	BSF gbl_FCV_SPB0,6
00F5        label16


				break;

			}
			// default:

		}

		//Calculation
		//Calculation:
		//  ospi_dataout = ospi_dataout >> 1
		//  spi_ihap = spi_ihap + 1
		FCV_OSPI_DATAOUT = FCV_OSPI_DATAOUT >> 1;
00F5  08C6  	MOVF gbl_FCV_OSPI_DATAOUT, F
00F6  1003  	BCF STATUS,C
00F7  0CC6  	RRF gbl_FCV_OSPI_DATAOUT, F

		FCV_SPI_IHAP = FCV_SPI_IHAP + 1;
00F8  0A43  	INCF gbl_FCV_SPI_IHAP, W
00F9  00C3  	MOVWF gbl_FCV_SPI_IHAP



	}

	//Calculation
	//Calculation:
	//  spi_ihap = 0
	FCV_SPI_IHAP = 0;
00FC  01C3  	CLRF gbl_FCV_SPI_IHAP


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP3=0; FCLV_LOOP3<8; FCLV_LOOP3++)
00FD  01CA  	CLRF gbl_FCLV_LOOP3
00FE        label18
00FE  3008  	MOVLW 0x08
00FF  024A  	SUBWF gbl_FCLV_LOOP3, W
0100  1803  	BTFSC STATUS,C
0101  29C8  	GOTO	label36
01C6  0ACA  	INCF gbl_FCLV_LOOP3, F
01C7  28FE  	GOTO	label18
01C8        label36

	{

		//Switch
		//Switch: spi_ihap?
		switch (FCV_SPI_IHAP)
011B  29AB  	GOTO	label35

		{
			case 1:
0102  0843  	MOVF gbl_FCV_SPI_IHAP, W
0103  3A01  	XORLW 0x01
0104  1903  	BTFSC STATUS,Z
0105  291C  	GOTO	label19
011C        label19

			{
				//Output
				//Output: spb6 -> C5
				trisc = trisc & 0xDF;
011C  30DF  	MOVLW 0xDF
011D  1683  	BSF STATUS, RP0
011E  0507  	ANDWF gbl_trisc, W
011F  0087  	MOVWF gbl_trisc

				if ((FCV_SPB6))
0120  1283  	BCF STATUS, RP0
0121  1DC2  	BTFSS gbl_FCV_SPB6,3
0122  292A  	GOTO	label20
012A        label20

					portc = (portc & 0xDF) | 0x20;
0123  30DF  	MOVLW 0xDF
0124  0507  	ANDWF gbl_portc, W
0125  00CB  	MOVWF CompTempVar2206
0126  3020  	MOVLW 0x20
0127  044B  	IORWF CompTempVar2206, W
0128  0087  	MOVWF gbl_portc

				else
0129  29AB  	GOTO	label35

					portc = portc & 0xDF;
012A  30DF  	MOVLW 0xDF
012B  0507  	ANDWF gbl_portc, W
012C  0087  	MOVWF gbl_portc


				break;
012D  29AB  	GOTO	label35

			}
			case 2:
0106  3A03  	XORLW 0x03
0107  1903  	BTFSC STATUS,Z
0108  292E  	GOTO	label21
012E        label21

			{
				//Output
				//Output: spb5 -> C5
				trisc = trisc & 0xDF;
012E  30DF  	MOVLW 0xDF
012F  1683  	BSF STATUS, RP0
0130  0507  	ANDWF gbl_trisc, W
0131  0087  	MOVWF gbl_trisc

				if ((FCV_SPB5))
0132  1283  	BCF STATUS, RP0
0133  1CC2  	BTFSS gbl_FCV_SPB5,1
0134  293C  	GOTO	label22
013C        label22

					portc = (portc & 0xDF) | 0x20;
0135  30DF  	MOVLW 0xDF
0136  0507  	ANDWF gbl_portc, W
0137  00CB  	MOVWF CompTempVar2207
0138  3020  	MOVLW 0x20
0139  044B  	IORWF CompTempVar2207, W
013A  0087  	MOVWF gbl_portc

				else
013B  29AB  	GOTO	label35

					portc = portc & 0xDF;
013C  30DF  	MOVLW 0xDF
013D  0507  	ANDWF gbl_portc, W
013E  0087  	MOVWF gbl_portc


				break;
013F  29AB  	GOTO	label35

			}
			case 3:
0109  3A01  	XORLW 0x01
010A  1903  	BTFSC STATUS,Z
010B  2940  	GOTO	label23
0140        label23

			{
				//Output
				//Output: spb4 -> C5
				trisc = trisc & 0xDF;
0140  30DF  	MOVLW 0xDF
0141  1683  	BSF STATUS, RP0
0142  0507  	ANDWF gbl_trisc, W
0143  0087  	MOVWF gbl_trisc

				if ((FCV_SPB4))
0144  1283  	BCF STATUS, RP0
0145  1C42  	BTFSS gbl_FCV_SPB4,0
0146  294E  	GOTO	label24
014E        label24

					portc = (portc & 0xDF) | 0x20;
0147  30DF  	MOVLW 0xDF
0148  0507  	ANDWF gbl_portc, W
0149  00CB  	MOVWF CompTempVar2208
014A  3020  	MOVLW 0x20
014B  044B  	IORWF CompTempVar2208, W
014C  0087  	MOVWF gbl_portc

				else
014D  29AB  	GOTO	label35

					portc = portc & 0xDF;
014E  30DF  	MOVLW 0xDF
014F  0507  	ANDWF gbl_portc, W
0150  0087  	MOVWF gbl_portc


				break;
0151  29AB  	GOTO	label35

			}
			case 4:
010C  3A07  	XORLW 0x07
010D  1903  	BTFSC STATUS,Z
010E  2952  	GOTO	label25
0152        label25

			{
				//Output
				//Output: spb3 -> C5
				trisc = trisc & 0xDF;
0152  30DF  	MOVLW 0xDF
0153  1683  	BSF STATUS, RP0
0154  0507  	ANDWF gbl_trisc, W
0155  0087  	MOVWF gbl_trisc

				if ((FCV_SPB3))
0156  1283  	BCF STATUS, RP0
0157  1CC7  	BTFSS gbl_FCV_SPB3,1
0158  2960  	GOTO	label26
0160        label26

					portc = (portc & 0xDF) | 0x20;
0159  30DF  	MOVLW 0xDF
015A  0507  	ANDWF gbl_portc, W
015B  00CB  	MOVWF CompTempVar2209
015C  3020  	MOVLW 0x20
015D  044B  	IORWF CompTempVar2209, W
015E  0087  	MOVWF gbl_portc

				else
015F  29AB  	GOTO	label35

					portc = portc & 0xDF;
0160  30DF  	MOVLW 0xDF
0161  0507  	ANDWF gbl_portc, W
0162  0087  	MOVWF gbl_portc


				break;
0163  29AB  	GOTO	label35

			}
			case 5:
010F  3A01  	XORLW 0x01
0110  1903  	BTFSC STATUS,Z
0111  2964  	GOTO	label27
0164        label27

			{
				//Output
				//Output: spb2 -> C5
				trisc = trisc & 0xDF;
0164  30DF  	MOVLW 0xDF
0165  1683  	BSF STATUS, RP0
0166  0507  	ANDWF gbl_trisc, W
0167  0087  	MOVWF gbl_trisc

				if ((FCV_SPB2))
0168  1283  	BCF STATUS, RP0
0169  1C47  	BTFSS gbl_FCV_SPB2,0
016A  2972  	GOTO	label28
0172        label28

					portc = (portc & 0xDF) | 0x20;
016B  30DF  	MOVLW 0xDF
016C  0507  	ANDWF gbl_portc, W
016D  00CB  	MOVWF CompTempVar2210
016E  3020  	MOVLW 0x20
016F  044B  	IORWF CompTempVar2210, W
0170  0087  	MOVWF gbl_portc

				else
0171  29AB  	GOTO	label35

					portc = portc & 0xDF;
0172  30DF  	MOVLW 0xDF
0173  0507  	ANDWF gbl_portc, W
0174  0087  	MOVWF gbl_portc


				break;
0175  29AB  	GOTO	label35

			}
			case 6:
0112  3A03  	XORLW 0x03
0113  1903  	BTFSC STATUS,Z
0114  2976  	GOTO	label29
0176        label29

			{
				//Output
				//Output: spb1 -> C5
				trisc = trisc & 0xDF;
0176  30DF  	MOVLW 0xDF
0177  1683  	BSF STATUS, RP0
0178  0507  	ANDWF gbl_trisc, W
0179  0087  	MOVWF gbl_trisc

				if ((FCV_SPB1))
017A  1283  	BCF STATUS, RP0
017B  1FC2  	BTFSS gbl_FCV_SPB1,7
017C  2984  	GOTO	label30
0184        label30

					portc = (portc & 0xDF) | 0x20;
017D  30DF  	MOVLW 0xDF
017E  0507  	ANDWF gbl_portc, W
017F  00CB  	MOVWF CompTempVar2211
0180  3020  	MOVLW 0x20
0181  044B  	IORWF CompTempVar2211, W
0182  0087  	MOVWF gbl_portc

				else
0183  29AB  	GOTO	label35

					portc = portc & 0xDF;
0184  30DF  	MOVLW 0xDF
0185  0507  	ANDWF gbl_portc, W
0186  0087  	MOVWF gbl_portc


				break;
0187  29AB  	GOTO	label35

			}
			case 7:
0115  3A01  	XORLW 0x01
0116  1903  	BTFSC STATUS,Z
0117  2988  	GOTO	label31
0188        label31

			{
				//Output
				//Output: spb0 -> C5
				trisc = trisc & 0xDF;
0188  30DF  	MOVLW 0xDF
0189  1683  	BSF STATUS, RP0
018A  0507  	ANDWF gbl_trisc, W
018B  0087  	MOVWF gbl_trisc

				if ((FCV_SPB0))
018C  1283  	BCF STATUS, RP0
018D  1F42  	BTFSS gbl_FCV_SPB0,6
018E  2996  	GOTO	label32
0196        label32

					portc = (portc & 0xDF) | 0x20;
018F  30DF  	MOVLW 0xDF
0190  0507  	ANDWF gbl_portc, W
0191  00CB  	MOVWF CompTempVar2212
0192  3020  	MOVLW 0x20
0193  044B  	IORWF CompTempVar2212, W
0194  0087  	MOVWF gbl_portc

				else
0195  29AB  	GOTO	label35

					portc = portc & 0xDF;
0196  30DF  	MOVLW 0xDF
0197  0507  	ANDWF gbl_portc, W
0198  0087  	MOVWF gbl_portc


				break;
0199  29AB  	GOTO	label35

			}
			case 0:
0118  3A07  	XORLW 0x07
0119  1903  	BTFSC STATUS,Z
011A  299A  	GOTO	label33
019A        label33

			{
				//Output
				//Output: spb7 -> C5
				trisc = trisc & 0xDF;
019A  30DF  	MOVLW 0xDF
019B  1683  	BSF STATUS, RP0
019C  0507  	ANDWF gbl_trisc, W
019D  0087  	MOVWF gbl_trisc

				if ((FCV_SPB7))
019E  1283  	BCF STATUS, RP0
019F  1E42  	BTFSS gbl_FCV_SPB7,4
01A0  29A8  	GOTO	label34
01A8        label34

					portc = (portc & 0xDF) | 0x20;
01A1  30DF  	MOVLW 0xDF
01A2  0507  	ANDWF gbl_portc, W
01A3  00CB  	MOVWF CompTempVar2213
01A4  3020  	MOVLW 0x20
01A5  044B  	IORWF CompTempVar2213, W
01A6  0087  	MOVWF gbl_portc

				else
01A7  29AB  	GOTO	label35
01AB        label35

					portc = portc & 0xDF;
01A8  30DF  	MOVLW 0xDF
01A9  0507  	ANDWF gbl_portc, W
01AA  0087  	MOVWF gbl_portc


				break;

			}
			// default:

		}

		//clk
		//Output: 1 -> C3
		trisc = trisc & 0xF7;
01AB  30F7  	MOVLW 0xF7
01AC  1683  	BSF STATUS, RP0
01AD  0507  	ANDWF gbl_trisc, W
01AE  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xF7) | 0x08;
01AF  30F7  	MOVLW 0xF7
01B0  1283  	BCF STATUS, RP0
01B1  0507  	ANDWF gbl_portc, W
01B2  00CB  	MOVWF CompTempVar2214
01B3  3008  	MOVLW 0x08
01B4  044B  	IORWF CompTempVar2214, W
01B5  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xF7;

		//Delay
		//Delay: 5 us
		delay_us(5);
01B6  3005  	MOVLW 0x05
01B7  00CB  	MOVWF delay_us_00000_arg_del
01B8  2010  	CALL delay_us_00000


		//clk
		//Output: 0 -> C3
		trisc = trisc & 0xF7;
01B9  30F7  	MOVLW 0xF7
01BA  1683  	BSF STATUS, RP0
01BB  0507  	ANDWF gbl_trisc, W
01BC  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xF7) | 0x08;
		else
			portc = portc & 0xF7;
01BD  30F7  	MOVLW 0xF7
01BE  1283  	BCF STATUS, RP0
01BF  0507  	ANDWF gbl_portc, W
01C0  0087  	MOVWF gbl_portc


		//Delay
		//Delay: 5 us
		delay_us(5);
01C1  3005  	MOVLW 0x05
01C2  00CB  	MOVWF delay_us_00000_arg_del
01C3  2010  	CALL delay_us_00000


		//Calculation
		//Calculation:
		//  spi_ihap = spi_ihap + 1
		FCV_SPI_IHAP = FCV_SPI_IHAP + 1;
01C4  0A43  	INCF gbl_FCV_SPI_IHAP, W
01C5  00C3  	MOVWF gbl_FCV_SPI_IHAP



	}

	//Output
	//Output: 1 -> C5
	trisc = trisc & 0xDF;
01C8  30DF  	MOVLW 0xDF
01C9  1683  	BSF STATUS, RP0
01CA  0507  	ANDWF gbl_trisc, W
01CB  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xDF) | 0x20;
01CC  30DF  	MOVLW 0xDF
01CD  1283  	BCF STATUS, RP0
01CE  0507  	ANDWF gbl_portc, W
01CF  00CB  	MOVWF CompTempVar2215
01D0  3020  	MOVLW 0x20
01D1  044B  	IORWF CompTempVar2215, W
01D2  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xDF;

	//Output
	//Output: 1 -> C3
	trisc = trisc & 0xF7;
01D3  30F7  	MOVLW 0xF7
01D4  1683  	BSF STATUS, RP0
01D5  0507  	ANDWF gbl_trisc, W
01D6  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xF7) | 0x08;
01D7  30F7  	MOVLW 0xF7
01D8  1283  	BCF STATUS, RP0
01D9  0507  	ANDWF gbl_portc, W
01DA  00CB  	MOVWF CompTempVar2216
01DB  3008  	MOVLW 0x08
01DC  044B  	IORWF CompTempVar2216, W
01DD  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xF7;

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
01DE  30FB  	MOVLW 0xFB
01DF  1683  	BSF STATUS, RP0
01E0  0507  	ANDWF gbl_trisc, W
01E1  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
01E2  30FB  	MOVLW 0xFB
01E3  1283  	BCF STATUS, RP0
01E4  0507  	ANDWF gbl_portc, W
01E5  00CB  	MOVWF CompTempVar2217
01E6  3004  	MOVLW 0x04
01E7  044B  	IORWF CompTempVar2217, W
01E8  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

}
01E9  0008  	RETURN



void FCM_rf_begin()

{

	//write on rf_config
	//Calculation:
	//  ospi_dataout = 0b00100000
	FCV_OSPI_DATAOUT = 32;
0249  3020  	MOVLW 0x20
024A  1283  	BCF STATUS, RP0
024B  1303  	BCF STATUS, RP1
024C  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
024D  205A  	CALL FCM_own_sp_00051


	//Calculation
	//Calculation:
	//  rf_config = 0b00001010
	FCV_RF_CONFIG = 10;
024E  300A  	MOVLW 0x0A
024F  00C4  	MOVWF gbl_FCV_RF_CONFIG


	//Calculation
	//Calculation:
	//  ospi_dataout = rf_config
	FCV_OSPI_DATAOUT = FCV_RF_CONFIG;
0250  0844  	MOVF gbl_FCV_RF_CONFIG, W
0251  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0252  205A  	CALL FCM_own_sp_00051


}
0253  0008  	RETURN



void FCM_set_writing_pipe0()

{

	//RF_reg01
	//Calculation:
	//  ospi_dataout = 0b00100001
	FCV_OSPI_DATAOUT = 33;
0231  3021  	MOVLW 0x21
0232  1283  	BCF STATUS, RP0
0233  1303  	BCF STATUS, RP1
0234  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0235  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0b00111110
	FCV_OSPI_DATAOUT = 62;
0236  303E  	MOVLW 0x3E
0237  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0238  205A  	CALL FCM_own_sp_00051


	//RF_reg02
	//Calculation:
	//  ospi_dataout = 0b00100010
	FCV_OSPI_DATAOUT = 34;
0239  3022  	MOVLW 0x22
023A  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
023B  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0b00000010
	FCV_OSPI_DATAOUT = 2;
023C  3002  	MOVLW 0x02
023D  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
023E  205A  	CALL FCM_own_sp_00051


}
023F  0008  	RETURN



void FCM_rf_setpa()

{

	//RF_reg06
	//Calculation:
	//  ospi_dataout = 0b00100110
	FCV_OSPI_DATAOUT = 38;
0240  3026  	MOVLW 0x26
0241  1283  	BCF STATUS, RP0
0242  1303  	BCF STATUS, RP1
0243  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0244  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0b00001101
	FCV_OSPI_DATAOUT = 13;
0245  300D  	MOVLW 0x0D
0246  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0247  205A  	CALL FCM_own_sp_00051


}
0248  0008  	RETURN



void FCM_open_writing_pipe_address()

{

	//RF_reg10
	//Calculation:
	//  ospi_dataout = 0b00110000
	FCV_OSPI_DATAOUT = 48;
025D  3030  	MOVLW 0x30
025E  1283  	BCF STATUS, RP0
025F  1303  	BCF STATUS, RP1
0260  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0261  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
0262  30E7  	MOVLW 0xE7
0263  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0264  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
0265  30E7  	MOVLW 0xE7
0266  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0267  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
0268  30E7  	MOVLW 0xE7
0269  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
026A  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
026B  30E7  	MOVLW 0xE7
026C  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
026D  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
026E  30E7  	MOVLW 0xE7
026F  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0270  205A  	CALL FCM_own_sp_00051


}
0271  0008  	RETURN



void FCM_radio_writepayload()

{

	//RF_command
	//Calculation:
	//  ospi_dataout = 0b10100000
	FCV_OSPI_DATAOUT = 160;
0254  30A0  	MOVLW 0xA0
0255  1283  	BCF STATUS, RP0
0256  1303  	BCF STATUS, RP1
0257  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0258  205A  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0x55
	FCV_OSPI_DATAOUT = 0x55;
0259  3055  	MOVLW 0x55
025A  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
025B  205A  	CALL FCM_own_sp_00051


}
025C  0008  	RETURN



void FCM_tx_flush()

{

	//RF_command
	//Calculation:
	//  ospi_dataout = 0b11100001
	FCV_OSPI_DATAOUT = 225;
022B  30E1  	MOVLW 0xE1
022C  1283  	BCF STATUS, RP0
022D  1303  	BCF STATUS, RP1
022E  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
022F  205A  	CALL FCM_own_sp_00051


}
0230  0008  	RETURN



void FCM_activate()

{

	//RF_reg10
	//Calculation:
	//  ospi_dataout = 0b01010000
	FCV_OSPI_DATAOUT = 80;
0272  3050  	MOVLW 0x50
0273  1283  	BCF STATUS, RP0
0274  1303  	BCF STATUS, RP1
0275  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0276  205A  	CALL FCM_own_sp_00051


	//RF_reg10
	//Calculation:
	//  ospi_dataout = 0x73
	FCV_OSPI_DATAOUT = 0x73;
0277  3073  	MOVLW 0x73
0278  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0279  205A  	CALL FCM_own_sp_00051


}
027A  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
02E1  3007  	MOVLW 0x07
02E2  1683  	BSF STATUS, RP0
02E3  1303  	BCF STATUS, RP1
02E4  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
02E5  30C0  	MOVLW 0xC0
02E6  0081  	MOVWF gbl_option_reg



	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
02E7  228C  	CALL FCD_LCDDis_0005A


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
02E8  227B  	CALL FCD_LCDDis_0005B


	//clk
	//Output: 1 -> C3
	trisc = trisc & 0xF7;
02E9  30F7  	MOVLW 0xF7
02EA  1683  	BSF STATUS, RP0
02EB  0507  	ANDWF gbl_trisc, W
02EC  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xF7) | 0x08;
02ED  30F7  	MOVLW 0xF7
02EE  1283  	BCF STATUS, RP0
02EF  0507  	ANDWF gbl_portc, W
02F0  00CB  	MOVWF CompTempVar2247
02F1  3008  	MOVLW 0x08
02F2  044B  	IORWF CompTempVar2247, W
02F3  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xF7;

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
02F4  30FB  	MOVLW 0xFB
02F5  1683  	BSF STATUS, RP0
02F6  0507  	ANDWF gbl_trisc, W
02F7  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
02F8  30FB  	MOVLW 0xFB
02F9  1283  	BCF STATUS, RP0
02FA  0507  	ANDWF gbl_portc, W
02FB  00CB  	MOVWF CompTempVar2248
02FC  3004  	MOVLW 0x04
02FD  044B  	IORWF CompTempVar2248, W
02FE  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//ce
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
02FF  30FD  	MOVLW 0xFD
0300  1683  	BSF STATUS, RP0
0301  0507  	ANDWF gbl_trisc, W
0302  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFD) | 0x02;
0303  30FD  	MOVLW 0xFD
0304  1283  	BCF STATUS, RP0
0305  0507  	ANDWF gbl_portc, W
0306  00CB  	MOVWF CompTempVar2249
0307  3002  	MOVLW 0x02
0308  044B  	IORWF CompTempVar2249, W
0309  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFD;

	//setup
	//Loop: Loop 1 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<1; FCLV_LOOP1++)
030A  01C8  	CLRF gbl_FCLV_LOOP1
030B        label37
030B  3001  	MOVLW 0x01
030C  0248  	SUBWF gbl_FCLV_LOOP1, W
030D  1803  	BTFSC STATUS,C
030E  2B16  	GOTO	label38
0314  0AC8  	INCF gbl_FCLV_LOOP1, F
0315  2B0B  	GOTO	label37
0316        label38

	{

		//Call Macro
		//Call Macro: rf_begin()
		FCM_rf_begin();
030F  2249  	CALL FCM_rf_beg_00052


		//Call Macro
		//Call Macro: set_writing_pipe0()
		FCM_set_writing_pipe0();
0310  2231  	CALL FCM_set_wr_00053


		//Call Macro
		//Call Macro: open_writing_pipe_address()
		FCM_open_writing_pipe_address();
0311  225D  	CALL FCM_open_w_00055


		//Call Macro
		//Call Macro: rf_setpa()
		FCM_rf_setpa();
0312  2240  	CALL FCM_rf_set_00054


		//Call Macro
		//Call Macro: activate()
		FCM_activate();
0313  2272  	CALL FCM_activa_00058



	}

	//Delay
	//Delay: 1 ms
	delay_ms(1);
0316  3001  	MOVLW 0x01
0317  00CD  	MOVWF delay_ms_00000_arg_del
0318  2015  	CALL delay_ms_00000


	//Loop
	//Loop: While 1
	while (1)
0319        label39
031E  2B19  	GOTO	label39

	{

		//Call Macro
		//Call Macro: radio_writepayload()
		FCM_radio_writepayload();
0319  2254  	CALL FCM_radio__00056


		//Call Macro
		//Call Macro: tx_flush()
		FCM_tx_flush();
031A  222B  	CALL FCM_tx_flu_00057


		//Delay
		//Delay: 1 ms
		delay_ms(1);
031B  3001  	MOVLW 0x01
031C  00CD  	MOVWF delay_ms_00000_arg_del
031D  2015  	CALL delay_ms_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0355  1283  	BCF STATUS, RP0
0356  1303  	BCF STATUS, RP1
0357  0E36  	SWAPF Int1BContext+D'2', W
0358  0084  	MOVWF FSR
0359  0E35  	SWAPF Int1BContext+D'1', W
035A  008A  	MOVWF PCLATH
035B  0E34  	SWAPF Int1BContext, W
035C  0083  	MOVWF STATUS
035D  0EFF  	SWAPF Int1Context, F
035E  0E7F  	SWAPF Int1Context, W
035F  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2B1F  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2B55  	GOTO	interrupt
0010        delay_us_00000
0010        ; { delay_us ; function begin
0010        label1
0010  0000  	NOP
0011  0000  	NOP
0012  0BCB  	DECFSZ delay_us_00000_arg_del, F
0013  2810  	GOTO	label1
0014  0008  	RETURN
0015        ; } delay_us function end

0015        delay_ms_00000
0015        ; { delay_ms ; function begin
0015  08CD  	MOVF delay_ms_00000_arg_del, F
0016  1D03  	BTFSS STATUS,Z
0017  2819  	GOTO	label2
0018  0008  	RETURN
0019        label2
0019  30F9  	MOVLW 0xF9
001A        label3
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  0000  	NOP
0026  0000  	NOP
0027  0000  	NOP
0028  0000  	NOP
0029  0000  	NOP
002A  3EFF  	ADDLW 0xFF
002B  1D03  	BTFSS STATUS,Z
002C  281A  	GOTO	label3
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0000  	NOP
003A  0000  	NOP
003B  0000  	NOP
003C  0000  	NOP
003D  0000  	NOP
003E  0BCD  	DECFSZ delay_ms_00000_arg_del, F
003F  2819  	GOTO	label2
0040  0008  	RETURN
0041        ; } delay_ms function end

0041        delay_10us_00000
0041        ; { delay_10us ; function begin
0041  08CE  	MOVF delay_10us_00000_arg_del, F
0042  1D03  	BTFSS STATUS,Z
0043  2845  	GOTO	label4
0044  0008  	RETURN
0045        label4
0045  3009  	MOVLW 0x09
0046        label5
0046  0000  	NOP
0047  3EFF  	ADDLW 0xFF
0048  1D03  	BTFSS STATUS,Z
0049  2846  	GOTO	label5
004A  0000  	NOP
004B  0000  	NOP
004C  0BCE  	DECFSZ delay_10us_00000_arg_del, F
004D  2845  	GOTO	label4
004E  0008  	RETURN
004F        ; } delay_10us function end


031F        _startup
031F  30D5  	MOVLW 0xD5
0320  1283  	BCF STATUS, RP0
0321  1303  	BCF STATUS, RP1
0322  00A0  	MOVWF gbl_14_LSR
0323  30C4  	MOVLW 0xC4
0324  00A1  	MOVWF gbl_14_LSR+D'1'
0325  30BB  	MOVLW 0xBB
0326  00A2  	MOVWF gbl_14_LSR+D'2'
0327  30DC  	MOVLW 0xDC
0328  00A3  	MOVWF gbl_14_LSR+D'3'
0329  01A4  	CLRF gbl_15_gbl_aSig
032A  01A5  	CLRF gbl_15_gbl_aSig+D'1'
032B  01A6  	CLRF gbl_15_gbl_aSig+D'2'
032C  01A7  	CLRF gbl_15_gbl_aSig+D'3'
032D  01A8  	CLRF gbl_15_gbl_bSig
032E  01A9  	CLRF gbl_15_gbl_bSig+D'1'
032F  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0330  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0331  01AC  	CLRF gbl_15_gbl_zSig
0332  01AD  	CLRF gbl_15_gbl_zSig+D'1'
0333  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0334  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0335  01BC  	CLRF gbl_15_gbl_aExp
0336  01BD  	CLRF gbl_15_gbl_bExp
0337  01B7  	CLRF gbl_15_gbl_zExp
0338  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0339  01BE  	CLRF gbl_15_gbl_aSign
033A  01BF  	CLRF gbl_15_gbl_bSign
033B  01C0  	CLRF gbl_15_gbl_zSign
033C  01C1  	CLRF gbl_15_gbl_zSigZero
033D  01B0  	CLRF gbl_15_gbl_ret
033E  01B1  	CLRF gbl_15_gbl_ret+D'1'
033F  01B2  	CLRF gbl_15_gbl_ret+D'2'
0340  01B3  	CLRF gbl_15_gbl_ret+D'3'
0341  01BA  	CLRF gbl_float_rounding_mode
0342  01BB  	CLRF gbl_float_exception_flags
0343  01B9  	CLRF gbl_float_detect_tininess

0352  118A  	BCF PCLATH,3
0353  120A  	BCF PCLATH,4
0354  2AE1  	GOTO	main

2007  3F3A  	DW 0x3F3A
