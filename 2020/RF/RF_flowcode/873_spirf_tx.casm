;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
004A  01CE  	CLRF Wdt_Delay__0003E_1_i
004B        label5
004B  084D  	MOVF Wdt_Delay__0003E_arg_delay, W
004C  024E  	SUBWF Wdt_Delay__0003E_1_i, W
004D  1803  	BTFSC STATUS,C
0053  0ACE  	INCF Wdt_Delay__0003E_1_i, F
0054  284B  	GOTO	label5

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
004F  0064  	CLRWDT

        delay_ms(1);
0050  3001  	MOVLW 0x01
0051  00CF  	MOVWF delay_ms_00000_arg_del
0052  2010  	CALL delay_ms_00000

    }
}
004E  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\RF\RF_flowcode\873_spirf_tx.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Wednesday, July 29, 2020 13:47:00
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_radio_setas_tx();
void FCM_print_datain_bin();
void FCM_radio_set_pa();
void FCM_radio_writedata();
void FCM_radio_tx_flush();
void FCM_radio_setwriting_address();
void FCM_radio_setas_rx();
void FCM_radio_setreading_address();
void FCM_radio_readdata();
void FCM_radio_set_enaa();
void FCM_radio_transmit();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_BOOL FCV_DATAIN_BIT = (1);
0410  1442  	BSF gbl_FCV_DATAIN_BIT,0

MX_UINT8 FCV_CURSORX = (0x0);
0411  01C3  	CLRF gbl_FCV_CURSORX

MX_UINT8 FCV_SPI_MISO;
MX_UINT8 FCV_SPI_MOSI = (0xff);
0412  30FF  	MOVLW 0xFF
0413  00C5  	MOVWF gbl_FCV_SPI_MOSI


MX_UINT8 FCLV_LOOP1;
MX_UINT8 FCLV_LOOP2;



//SPI_Legacy(0): //Defines:

/**** Macro Substitutions ****
a = Unique Ref
b = SPI Channel
c = MOSI Pin
d = MOSI Port
e = MISO Pin
f = MISO Port
g = SCK Pin
h = SCK Port
i = Clock Polarity + Clock Phase + Data Sample Phase
j = SPI Prescaler
k = SPI Postscaler
l = DAC Enable Pin
m = DAC Enable Port
n = FRAM Enable Pin
o = FRAM Enable Port
******************************/

//MX_SPI_BMODE - Bus Mode - Bit0=CPOL, Bit1=CPHA, Bit2=CSMP
//CPOL - Clock Polarity - Idle State of the clock 0=0, 1=1
//CPHA - Clock Phase - Clock Edge 0=leading edge, 1=trailing edge
//CSMP - Input Data Bit Sample Phase


//Definitions for CS control lines
#define SPI_1_MX_SPI_LEGACY_DAC_PIN		0
#define SPI_1_MX_SPI_LEGACY_DAC_PORT		porta
#define SPI_1_MX_SPI_LEGACY_DAC_TRIS		trisa
#define SPI_1_MX_SPI_LEGACY_FRAM_PIN		0
#define SPI_1_MX_SPI_LEGACY_FRAM_PORT		porta
#define SPI_1_MX_SPI_LEGACY_FRAM_TRIS		trisa


//Definitions for SPI slot allocation
#ifndef	MX_SPI_REF1
	#define MX_SPI_REF1
	#define SPI_1_MX_SPI_UREF			1
	#define MX_SPI_CHANNEL_1		1
	#define MX_SPI_MOSI_PIN_1		-1
	#define MX_SPI_MOSI_PORT_1		port0
	#define MX_SPI_MOSI_TRIS_1		tris0
	#define MX_SPI_MISO_PIN_1		-1
	#define MX_SPI_MISO_PORT_1		port0
	#define MX_SPI_MISO_TRIS_1		tris0
	#define MX_SPI_SCK_PIN_1		-1
	#define MX_SPI_SCK_PORT_1		port0
	#define MX_SPI_SCK_TRIS_1		tris0
	#define MX_SPI_CS_PIN_1			0
	#define MX_SPI_CS_PORT_1		0
	#define MX_SPI_BMODE_1			6
	#define MX_SPI_PR_SCALE_1		16
	#define MX_SPI_PO_SCALE_1		0
	#define MX_SPI_INT_1			0
#else
 #ifndef	MX_SPI_REF2
	#define MX_SPI_REF2
	#define SPI_1_MX_SPI_UREF			2
	#define MX_SPI_CHANNEL_2		1
	#define MX_SPI_MOSI_PIN_2		-1
	#define MX_SPI_MOSI_PORT_2		port0
	#define MX_SPI_MOSI_TRIS_2		tris0
	#define MX_SPI_MISO_PIN_2		-1
	#define MX_SPI_MISO_PORT_2		port0
	#define MX_SPI_MISO_TRIS_2		tris0
	#define MX_SPI_SCK_PIN_2		-1
	#define MX_SPI_SCK_PORT_2		port0
	#define MX_SPI_SCK_TRIS_2		tris0
	#define MX_SPI_CS_PIN_2			0
	#define MX_SPI_CS_PORT_2		0
	#define MX_SPI_BMODE_2			6
	#define MX_SPI_PR_SCALE_2		16
	#define MX_SPI_PO_SCALE_2		0
	#define MX_SPI_INT_2			0
 #else
  #ifndef	MX_SPI_REF3
	#define MX_SPI_REF3
	#define SPI_1_MX_SPI_UREF			3
	#define MX_SPI_CHANNEL_3		1
	#define MX_SPI_MOSI_PIN_3		-1
	#define MX_SPI_MOSI_PORT_3		port0
	#define MX_SPI_MOSI_TRIS_3		tris0
	#define MX_SPI_MISO_PIN_3		-1
	#define MX_SPI_MISO_PORT_3		port0
	#define MX_SPI_MISO_TRIS_3		tris0
	#define MX_SPI_SCK_PIN_3		-1
	#define MX_SPI_SCK_PORT_3		port0
	#define MX_SPI_SCK_TRIS_3		tris0
	#define MX_SPI_CS_PIN_3			0
	#define MX_SPI_CS_PORT_3		0
	#define MX_SPI_BMODE_3			6
	#define MX_SPI_PR_SCALE_3		16
	#define MX_SPI_PO_SCALE_3		0
	#define MX_SPI_INT_3			0
  #else
   #ifndef	MX_SPI_REF4
	#define MX_SPI_REF4
	#define SPI_1_MX_SPI_UREF			4
	#define MX_SPI_CHANNEL_4		1
	#define MX_SPI_MOSI_PIN_4		-1
	#define MX_SPI_MOSI_PORT_4		port0
	#define MX_SPI_MOSI_TRIS_4		tris0
	#define MX_SPI_MISO_PIN_4		-1
	#define MX_SPI_MISO_PORT_4		port0
	#define MX_SPI_MISO_TRIS_4		tris0
	#define MX_SPI_SCK_PIN_4		-1
	#define MX_SPI_SCK_PORT_4		port0
	#define MX_SPI_SCK_TRIS_4		tris0
	#define MX_SPI_CS_PIN_4			0
	#define MX_SPI_CS_PORT_4		0
	#define MX_SPI_BMODE_4			6
	#define MX_SPI_PR_SCALE_4		16
	#define MX_SPI_PO_SCALE_4		0
	#define MX_SPI_INT_4			0
   #endif
  #endif
 #endif
#endif

#define SPI_1_SPI_Master_Init		CAL_APPEND(FC_CAL_SPI_Master_Init_, SPI_1_MX_SPI_UREF)
#define SPI_1_SPI_Master_Uninit	CAL_APPEND(FC_CAL_SPI_Master_Uninit_, SPI_1_MX_SPI_UREF)
#define SPI_1_SPI_Master_Byte		CAL_APPEND(FC_CAL_SPI_Master_Byte_, SPI_1_MX_SPI_UREF)

extern void SPI_1_SPI_Master_Init ();
extern void SPI_1_SPI_Master_Uninit ();
extern MX_UINT8 SPI_1_SPI_Master_Byte (MX_UINT8 DataOut);

//FRAM commands
#define FRAM_WREN  	6
#define FRAM_WRDI  	4
#define FRAM_RDSR  	5
#define FRAM_WRSR  	1
#define FRAM_READ  	3
#define FRAM_WRITE 	2




//SPI_Legacy(0): //Macro function declarations

void FCD_SPI_Legacy0_SPI_Init();
void FCD_SPI_Legacy0_SPI_Uninit();
void FCD_SPI_Legacy0_SPI_Send_Char(MX_UINT8 Char);
void FCD_SPI_Legacy0_SPI_Send_String(MX_STRING String, MX_UINT8 MSZ_String);
MX_UINT8 FCD_SPI_Legacy0_SPI_Get_Char();
void FCD_SPI_Legacy0_SPI_Get_String(MX_CHAR* FCR_RETVAL, MX_UINT8 FCR_RETVAL_SIZE, MX_UINT8 NumBytes);
void FCD_SPI_Legacy0_DAC_Send_Char(MX_UINT8 Char);
void FCD_SPI_Legacy0_NVM_Send_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr, MX_UINT8 Char);
MX_UINT8 FCD_SPI_Legacy0_NVM_Get_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr);
MX_UINT8 FCD_SPI_Legacy0_FramOutput(MX_UINT8 Char);
void FCD_SPI_Legacy0_EnableFRAM();
void FCD_SPI_Legacy0_DisableFRAM();


//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_2__PORT0    portb
	#define LCD_2__PORT1    portb
	#define LCD_2__PORT2    portb
	#define LCD_2__PORT3    portb
	#define LCD_2__PORT4    portb
	#define LCD_2__PORT5    portb
	#define LCD_2__TRIS0    trisb
	#define LCD_2__TRIS1    trisb
	#define LCD_2__TRIS2    trisb
	#define LCD_2__TRIS3    trisb
	#define LCD_2__TRIS4    trisb
	#define LCD_2__TRIS5    trisb
	#define LCD_2__BIT0    	2
	#define LCD_2__BIT1    	3
	#define LCD_2__BIT2    	4
	#define LCD_2__BIT3    	5
	#define LCD_2__RS      	0
	#define LCD_2__E       	1
	#define LCD_2__ROWCNT	4
	#define LCD_2__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_2__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_2__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_2__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_2__DELAY
	  #define LCD_2__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//SPI_Legacy(0): //Macro implementations


void FCD_SPI_Legacy0_SPI_Init()

{
	
		//Disable SPI Devices
		FC_CAL_Bit_High_DDR(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_TRIS, SPI_1_MX_SPI_LEGACY_DAC_PIN);
0347  1683  	BSF STATUS, RP0
0348  1303  	BCF STATUS, RP1
0349  1005  	BCF gbl_trisa,0
034A  1283  	BCF STATUS, RP0
034B  1405  	BSF gbl_porta,0

		FC_CAL_Bit_High_DDR(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_TRIS, SPI_1_MX_SPI_LEGACY_FRAM_PIN);
034C  1683  	BSF STATUS, RP0
034D  1005  	BCF gbl_trisa,0
034E  1283  	BCF STATUS, RP0
034F  1405  	BSF gbl_porta,0


		//Init SPI
		SPI_1_SPI_Master_Init();		//Call initialise function
0350  20DF  	CALL FC_CAL_SPI_00062


}
0351  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Uninit()
{
	
		//Convert SPI Device Control Lines To Inputs
		FC_CAL_Bit_In_DDR(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_TRIS, SPI_1_MX_SPI_LEGACY_DAC_PIN);
		FC_CAL_Bit_In_DDR(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_TRIS, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

		//Uninit SPI
		SPI_1_SPI_Master_Uninit();		//Call uninitialise function

}

void FCD_SPI_Legacy0_SPI_Send_Char(MX_UINT8 Char)

{
	
		SPI_1_SPI_Master_Byte(Char);
00FD  0848  	MOVF FCD_SPI_Le_00052_arg_Char, W
00FE  00C9  	MOVWF FC_CAL_SPI_00064_arg_DataOut
00FF  20B5  	CALL FC_CAL_SPI_00064


}
0100  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Send_String(MX_STRING String, MX_UINT8 MSZ_String)
{
	
		MX_UINT8 idx;
		for(idx = 0; idx < MSZ_String; idx++)
		{
			if (String[idx] == 0)				//End of string data?
				break;

			SPI_1_SPI_Master_Byte(String[idx]);
		}

}

MX_UINT8 FCD_SPI_Legacy0_SPI_Get_Char()

{
	
		MX_UINT8 retVal = 0;
00F2  1283  	BCF STATUS, RP0
00F3  1303  	BCF STATUS, RP1
00F4  01C8  	CLRF FCD_SPI_Le_00054_1_retVal


		retVal = SPI_1_SPI_Master_Byte(0xFF);
00F5  30FF  	MOVLW 0xFF
00F6  00C9  	MOVWF FC_CAL_SPI_00064_arg_DataOut
00F7  20B5  	CALL FC_CAL_SPI_00064
00F8  084B  	MOVF CompTempVarRet2232, W
00F9  00C8  	MOVWF FCD_SPI_Le_00054_1_retVal


		return (retVal);
00FA  0848  	MOVF FCD_SPI_Le_00054_1_retVal, W
00FB  00C9  	MOVWF CompTempVarRet2197


}
00FC  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Get_String(MX_CHAR* FCR_RETVAL, MX_UINT8 FCR_RETVAL_SIZE, MX_UINT8 NumBytes)
{
		MX_UINT8 idx;

		if (NumBytes > FCR_RETVAL_SIZE)
			NumBytes = FCR_RETVAL_SIZE;

		for (idx = 0; idx < NumBytes; idx++)
		{
			FCR_RETVAL[idx] = SPI_1_SPI_Master_Byte(0xFF);		//Collect incoming data byte
		}

		if (idx < FCR_RETVAL_SIZE)
			FCR_RETVAL[idx] = 0;					//Terminate string if string variable is longer then expected data

}

void FCD_SPI_Legacy0_DAC_Send_Char(MX_UINT8 Char)
{
	
		MX_UINT8 dac_val;

		FC_CAL_Bit_Low(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_PIN);		//enable dac

		dac_val = (Char & 0xF0) >> 4;
		SPI_1_SPI_Master_Byte(dac_val);

		dac_val = (Char & 0x0F) << 4;
		SPI_1_SPI_Master_Byte(dac_val);

		FC_CAL_Bit_High(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_PIN);		//disable dac

}

void FCD_SPI_Legacy0_NVM_Send_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr, MX_UINT8 Char)
{
	
		//enable writes
		FCD_SPI_Legacy0_EnableFRAM();
		FCD_SPI_Legacy0_FramOutput(FRAM_WREN);
		FCD_SPI_Legacy0_DisableFRAM();

		//send write-fram command, address and data
		FCD_SPI_Legacy0_EnableFRAM();
		FCD_SPI_Legacy0_FramOutput(FRAM_WRITE);
		FCD_SPI_Legacy0_FramOutput(hi_addr);
		FCD_SPI_Legacy0_FramOutput(lo_addr);
		FCD_SPI_Legacy0_FramOutput(Char);
		FCD_SPI_Legacy0_DisableFRAM();

}

MX_UINT8 FCD_SPI_Legacy0_NVM_Get_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr)
{
	
		MX_UINT8 retVal;

		FCD_SPI_Legacy0_EnableFRAM();

		//send read-fram command and address
		FCD_SPI_Legacy0_FramOutput(FRAM_READ);
		FCD_SPI_Legacy0_FramOutput(hi_addr);
		FCD_SPI_Legacy0_FramOutput(lo_addr);

		//read the data
		retVal = FCD_SPI_Legacy0_FramOutput(0x5A);  	//don't care byte of 0x5A

		FCD_SPI_Legacy0_DisableFRAM();

		return(retVal);

}

MX_UINT8 FCD_SPI_Legacy0_FramOutput(MX_UINT8 Char)
{
	
		MX_UINT8 retVal = 0;
		retVal = SPI_1_SPI_Master_Byte(Char);
		return (retVal);

}

void FCD_SPI_Legacy0_EnableFRAM()
{
	
		FC_CAL_Bit_Low(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

}

void FCD_SPI_Legacy0_DisableFRAM()
{
	
		FC_CAL_Bit_High(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

}



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_2__PORT0, LCD_2__BIT0);
0055  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_2__PORT1, LCD_2__BIT1);
0056  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_2__PORT2, LCD_2__BIT2);
0057  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_2__PORT3, LCD_2__BIT3);
0058  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_2__PORT4, LCD_2__RS);
0059  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_2__PORT5, LCD_2__E);
005A  1086  	BCF gbl_portb,1

		pt = ((in >> 4) & 0x0f);
005B  0E52  	SWAPF FCD_LCDDis_00070_arg_in, W
005C  390F  	ANDLW 0x0F
005D  00D4  	MOVWF FCD_LCDDis_00070_1_pt
005E  300F  	MOVLW 0x0F
005F  05D4  	ANDWF FCD_LCDDis_00070_1_pt, F

		if (pt & 0x01)
0060  1854  	BTFSC FCD_LCDDis_00070_1_pt,0

		    FC_CAL_Bit_High(LCD_2__PORT0, LCD_2__BIT0);
0061  1506  	BSF gbl_portb,2

		if (pt & 0x02)
0062  18D4  	BTFSC FCD_LCDDis_00070_1_pt,1

		    FC_CAL_Bit_High(LCD_2__PORT1, LCD_2__BIT1);
0063  1586  	BSF gbl_portb,3

		if (pt & 0x04)
0064  1954  	BTFSC FCD_LCDDis_00070_1_pt,2

		    FC_CAL_Bit_High(LCD_2__PORT2, LCD_2__BIT2);
0065  1606  	BSF gbl_portb,4

		if (pt & 0x08)
0066  19D4  	BTFSC FCD_LCDDis_00070_1_pt,3

		    FC_CAL_Bit_High(LCD_2__PORT3, LCD_2__BIT3);
0067  1686  	BSF gbl_portb,5

		if (mask)
0068  08D3  	MOVF FCD_LCDDis_00070_arg_mask, F
0069  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_2__PORT4, LCD_2__RS);
006A  1406  	BSF gbl_portb,0

		LCD_2__DELAY;
006B  300A  	MOVLW 0x0A
006C  00D5  	MOVWF delay_10us_00000_arg_del
006D  203C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_2__PORT5, LCD_2__E);
006E  1486  	BSF gbl_portb,1

		LCD_2__DELAY;
006F  300A  	MOVLW 0x0A
0070  00D5  	MOVWF delay_10us_00000_arg_del
0071  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_2__PORT5, LCD_2__E);
0072  1086  	BCF gbl_portb,1

		pt = (in & 0x0f);
0073  300F  	MOVLW 0x0F
0074  0552  	ANDWF FCD_LCDDis_00070_arg_in, W
0075  00D4  	MOVWF FCD_LCDDis_00070_1_pt

		LCD_2__DELAY;
0076  300A  	MOVLW 0x0A
0077  00D5  	MOVWF delay_10us_00000_arg_del
0078  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_2__PORT0, LCD_2__BIT0);
0079  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_2__PORT1, LCD_2__BIT1);
007A  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_2__PORT2, LCD_2__BIT2);
007B  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_2__PORT3, LCD_2__BIT3);
007C  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_2__PORT4, LCD_2__RS);
007D  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_2__PORT5, LCD_2__E);
007E  1086  	BCF gbl_portb,1

		if (pt & 0x01)
007F  1854  	BTFSC FCD_LCDDis_00070_1_pt,0

		    FC_CAL_Bit_High(LCD_2__PORT0, LCD_2__BIT0);
0080  1506  	BSF gbl_portb,2

		if (pt & 0x02)
0081  18D4  	BTFSC FCD_LCDDis_00070_1_pt,1

		    FC_CAL_Bit_High(LCD_2__PORT1, LCD_2__BIT1);
0082  1586  	BSF gbl_portb,3

		if (pt & 0x04)
0083  1954  	BTFSC FCD_LCDDis_00070_1_pt,2

		    FC_CAL_Bit_High(LCD_2__PORT2, LCD_2__BIT2);
0084  1606  	BSF gbl_portb,4

		if (pt & 0x08)
0085  19D4  	BTFSC FCD_LCDDis_00070_1_pt,3

		    FC_CAL_Bit_High(LCD_2__PORT3, LCD_2__BIT3);
0086  1686  	BSF gbl_portb,5

		if (mask)
0087  08D3  	MOVF FCD_LCDDis_00070_arg_mask, F
0088  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_2__PORT4, LCD_2__RS);
0089  1406  	BSF gbl_portb,0

		LCD_2__DELAY;
008A  300A  	MOVLW 0x0A
008B  00D5  	MOVWF delay_10us_00000_arg_del
008C  203C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_2__PORT5, LCD_2__E);
008D  1486  	BSF gbl_portb,1

		LCD_2__DELAY;
008E  300A  	MOVLW 0x0A
008F  00D5  	MOVWF delay_10us_00000_arg_del
0090  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_2__PORT5, LCD_2__E);
0091  1086  	BCF gbl_portb,1

		LCD_2__DELAY;
0092  300A  	MOVLW 0x0A
0093  00D5  	MOVWF delay_10us_00000_arg_del
0094  203C  	CALL delay_10us_00000


}
0095  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_2__PORT0, LCD_2__TRIS0, LCD_2__BIT0);
0363  1683  	BSF STATUS, RP0
0364  1303  	BCF STATUS, RP1
0365  1106  	BCF gbl_trisb,2
0366  1283  	BCF STATUS, RP0
0367  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low_DDR(LCD_2__PORT1, LCD_2__TRIS1, LCD_2__BIT1);
0368  1683  	BSF STATUS, RP0
0369  1186  	BCF gbl_trisb,3
036A  1283  	BCF STATUS, RP0
036B  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low_DDR(LCD_2__PORT2, LCD_2__TRIS2, LCD_2__BIT2);
036C  1683  	BSF STATUS, RP0
036D  1206  	BCF gbl_trisb,4
036E  1283  	BCF STATUS, RP0
036F  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_2__PORT3, LCD_2__TRIS3, LCD_2__BIT3);
0370  1683  	BSF STATUS, RP0
0371  1286  	BCF gbl_trisb,5
0372  1283  	BCF STATUS, RP0
0373  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low_DDR(LCD_2__PORT4, LCD_2__TRIS4, LCD_2__RS);
0374  1683  	BSF STATUS, RP0
0375  1006  	BCF gbl_trisb,0
0376  1283  	BCF STATUS, RP0
0377  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low_DDR(LCD_2__PORT5, LCD_2__TRIS5, LCD_2__E);
0378  1683  	BSF STATUS, RP0
0379  1086  	BCF gbl_trisb,1
037A  1283  	BCF STATUS, RP0
037B  1086  	BCF gbl_portb,1


		Wdt_Delay_Ms(12);
037C  300C  	MOVLW 0x0C
037D  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
037E  204A  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
037F  3033  	MOVLW 0x33
0380  00D2  	MOVWF FCD_LCDDis_00070_arg_in
0381  01D3  	CLRF FCD_LCDDis_00070_arg_mask
0382  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
0383  3002  	MOVLW 0x02
0384  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
0385  204A  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
0386  3033  	MOVLW 0x33
0387  00D2  	MOVWF FCD_LCDDis_00070_arg_in
0388  01D3  	CLRF FCD_LCDDis_00070_arg_mask
0389  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
038A  3002  	MOVLW 0x02
038B  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
038C  204A  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
038D  3032  	MOVLW 0x32
038E  00D2  	MOVWF FCD_LCDDis_00070_arg_in
038F  01D3  	CLRF FCD_LCDDis_00070_arg_mask
0390  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
0391  3002  	MOVLW 0x02
0392  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
0393  204A  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
0394  302C  	MOVLW 0x2C
0395  00D2  	MOVWF FCD_LCDDis_00070_arg_in
0396  01D3  	CLRF FCD_LCDDis_00070_arg_mask
0397  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
0398  3002  	MOVLW 0x02
0399  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
039A  204A  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
039B  3006  	MOVLW 0x06
039C  00D2  	MOVWF FCD_LCDDis_00070_arg_in
039D  01D3  	CLRF FCD_LCDDis_00070_arg_mask
039E  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
039F  3002  	MOVLW 0x02
03A0  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
03A1  204A  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
03A2  300C  	MOVLW 0x0C
03A3  00D2  	MOVWF FCD_LCDDis_00070_arg_in
03A4  01D3  	CLRF FCD_LCDDis_00070_arg_mask
03A5  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
03A6  3002  	MOVLW 0x02
03A7  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
03A8  204A  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
03A9  3001  	MOVLW 0x01
03AA  00D2  	MOVWF FCD_LCDDis_00070_arg_in
03AB  01D3  	CLRF FCD_LCDDis_00070_arg_mask
03AC  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
03AD  3002  	MOVLW 0x02
03AE  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
03AF  204A  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
03B0  3002  	MOVLW 0x02
03B1  00D2  	MOVWF FCD_LCDDis_00070_arg_in
03B2  01D3  	CLRF FCD_LCDDis_00070_arg_mask
03B3  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
03B4  3002  	MOVLW 0x02
03B5  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
03B6  204A  	CALL Wdt_Delay__0003E


}
03B7  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
0352  3001  	MOVLW 0x01
0353  1283  	BCF STATUS, RP0
0354  1303  	BCF STATUS, RP1
0355  00D2  	MOVWF FCD_LCDDis_00070_arg_in
0356  01D3  	CLRF FCD_LCDDis_00070_arg_mask
0357  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
0358  3002  	MOVLW 0x02
0359  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
035A  204A  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
035B  3002  	MOVLW 0x02
035C  00D2  	MOVWF FCD_LCDDis_00070_arg_in
035D  01D3  	CLRF FCD_LCDDis_00070_arg_mask
035E  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
035F  3002  	MOVLW 0x02
0360  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
0361  204A  	CALL Wdt_Delay__0003E


}
0362  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_2__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_2__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_2__ROWCNT == 4)
		if (y==0)
00C1  08CC  	MOVF FCD_LCDDis_00056_arg_y, F
00C2  1D03  	BTFSS STATUS,Z
00C3  28C7  	GOTO	label10
00C7        label10

			y=0x80;
00C4  3080  	MOVLW 0x80
00C5  00CC  	MOVWF FCD_LCDDis_00056_arg_y

		else if (y==1)
00C6  28D6  	GOTO	label13
00C7  034C  	DECF FCD_LCDDis_00056_arg_y, W
00C8  1D03  	BTFSS STATUS,Z
00C9  28CD  	GOTO	label11
00CD        label11

			y=0xc0;
00CA  30C0  	MOVLW 0xC0
00CB  00CC  	MOVWF FCD_LCDDis_00056_arg_y


		#if (LCD_2__COLCNT == 16)
			else if (y==2)
00CC  28D6  	GOTO	label13
00CD  084C  	MOVF FCD_LCDDis_00056_arg_y, W
00CE  3A02  	XORLW 0x02
00CF  1D03  	BTFSS STATUS,Z
00D0  28D4  	GOTO	label12
00D4        label12

				y=0x90;
00D1  3090  	MOVLW 0x90
00D2  00CC  	MOVWF FCD_LCDDis_00056_arg_y

			else
00D3  28D6  	GOTO	label13
00D6        label13

				y=0xd0;
00D4  30D0  	MOVLW 0xD0
00D5  00CC  	MOVWF FCD_LCDDis_00056_arg_y

		#endif

		#if (LCD_2__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
00D6  084B  	MOVF FCD_LCDDis_00056_arg_x, W
00D7  074C  	ADDWF FCD_LCDDis_00056_arg_y, W
00D8  00D2  	MOVWF FCD_LCDDis_00070_arg_in
00D9  01D3  	CLRF FCD_LCDDis_00070_arg_mask
00DA  2055  	CALL FCD_LCDDis_00070

		Wdt_Delay_Ms(2);
00DB  3002  	MOVLW 0x02
00DC  00CD  	MOVWF Wdt_Delay__0003E_arg_delay
00DD  204A  	CALL Wdt_Delay__0003E


}
00DE  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)

{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
0101  1FC9  	BTFSS FCD_LCDDis_00058_arg_Number+D'1',7
0102  2910  	GOTO	label14
0110        label14

		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
0103  302D  	MOVLW 0x2D
0104  00D2  	MOVWF FCD_LCDDis_00070_arg_in
0105  3010  	MOVLW 0x10
0106  00D3  	MOVWF FCD_LCDDis_00070_arg_mask
0107  2055  	CALL FCD_LCDDis_00070

			Number = 0 - Number;
0108  0848  	MOVF FCD_LCDDis_00058_arg_Number, W
0109  3C00  	SUBLW 0x00
010A  00CD  	MOVWF CompTempVar2202
010B  09C9  	COMF FCD_LCDDis_00058_arg_Number+D'1', F
010C  1803  	BTFSC STATUS,C
010D  0AC9  	INCF FCD_LCDDis_00058_arg_Number+D'1', F
010E  084D  	MOVF CompTempVar2202, W
010F  00C8  	MOVWF FCD_LCDDis_00058_arg_Number

		}

		tmp_int = Number;
0110  0848  	MOVF FCD_LCDDis_00058_arg_Number, W
0111  00CA  	MOVWF FCD_LCDDis_00058_1_tmp_int
0112  0849  	MOVF FCD_LCDDis_00058_arg_Number+D'1', W
0113  00CB  	MOVWF FCD_LCDDis_00058_1_tmp_int+D'1'

		if (Number >= 10000)
0114  3027  	MOVLW 0x27
0115  0249  	SUBWF FCD_LCDDis_00058_arg_Number+D'1', W
0116  1D03  	BTFSS STATUS,Z
0117  291A  	GOTO	label15
0118  3010  	MOVLW 0x10
0119  0248  	SUBWF FCD_LCDDis_00058_arg_Number, W
011A        label15
011A  1C03  	BTFSS STATUS,C
011B  2948  	GOTO	label19
011C  1BC9  	BTFSC FCD_LCDDis_00058_arg_Number+D'1',7
011D  2948  	GOTO	label19

		{
			tmp_byte = tmp_int / 10000;
011E  01D1  	CLRF CompTempVar2205
011F  084A  	MOVF FCD_LCDDis_00058_1_tmp_int, W
0120  00CD  	MOVWF __div_16_1_00003_arg_a
0121  084B  	MOVF FCD_LCDDis_00058_1_tmp_int+D'1', W
0122  00CE  	MOVWF __div_16_1_00003_arg_a+D'1'
0123  1FCB  	BTFSS FCD_LCDDis_00058_1_tmp_int+D'1',7
0124  292B  	GOTO	label16
0125  09CD  	COMF __div_16_1_00003_arg_a, F
0126  09CE  	COMF __div_16_1_00003_arg_a+D'1', F
0127  0ACD  	INCF __div_16_1_00003_arg_a, F
0128  1903  	BTFSC STATUS,Z
0129  0ACE  	INCF __div_16_1_00003_arg_a+D'1', F
012A  0AD1  	INCF CompTempVar2205, F
012B        label16
012B  3010  	MOVLW 0x10
012C  00CF  	MOVWF __div_16_1_00003_arg_b
012D  3027  	MOVLW 0x27
012E  00D0  	MOVWF __div_16_1_00003_arg_b+D'1'
012F  2096  	CALL __div_16_1_00003
0130  0856  	MOVF CompTempVarRet214, W
0131  00CC  	MOVWF FCD_LCDDis_00058_1_tmp_byte
0132  1C51  	BTFSS CompTempVar2205,0
0133  2936  	GOTO	label17
0134  09CC  	COMF FCD_LCDDis_00058_1_tmp_byte, F
0135  0ACC  	INCF FCD_LCDDis_00058_1_tmp_byte, F
0136        label17

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0136  084C  	MOVF FCD_LCDDis_00058_1_tmp_byte, W
0137  3E30  	ADDLW 0x30
0138  00D2  	MOVWF FCD_LCDDis_00070_arg_in
0139  3010  	MOVLW 0x10
013A  00D3  	MOVWF FCD_LCDDis_00070_arg_mask
013B  2055  	CALL FCD_LCDDis_00070


			while (tmp_byte > 0)
013C        label18
013C  084C  	MOVF FCD_LCDDis_00058_1_tmp_byte, W
013D  3C00  	SUBLW 0x00
013E  1803  	BTFSC STATUS,C
013F  2948  	GOTO	label19
0147  293C  	GOTO	label18
0148        label19

			{
				tmp_int = tmp_int - 10000;
0140  3010  	MOVLW 0x10
0141  02CA  	SUBWF FCD_LCDDis_00058_1_tmp_int, F
0142  3027  	MOVLW 0x27
0143  1C03  	BTFSS STATUS,C
0144  3028  	MOVLW 0x28
0145  02CB  	SUBWF FCD_LCDDis_00058_1_tmp_int+D'1', F

				tmp_byte--;
0146  03CC  	DECF FCD_LCDDis_00058_1_tmp_byte, F

			}
		}
		if (Number >= 1000)
0148  3003  	MOVLW 0x03
0149  0249  	SUBWF FCD_LCDDis_00058_arg_Number+D'1', W
014A  1D03  	BTFSS STATUS,Z
014B  294E  	GOTO	label20
014C  30E8  	MOVLW 0xE8
014D  0248  	SUBWF FCD_LCDDis_00058_arg_Number, W
014E        label20
014E  1C03  	BTFSS STATUS,C
014F  297E  	GOTO	label24
0150  1BC9  	BTFSC FCD_LCDDis_00058_arg_Number+D'1',7
0151  297E  	GOTO	label24

		{
			tmp_byte = tmp_int / 1000;
0152  01D2  	CLRF CompTempVar2209
0153  084A  	MOVF FCD_LCDDis_00058_1_tmp_int, W
0154  00CD  	MOVWF __div_16_1_00003_arg_a
0155  084B  	MOVF FCD_LCDDis_00058_1_tmp_int+D'1', W
0156  00CE  	MOVWF __div_16_1_00003_arg_a+D'1'
0157  1FCB  	BTFSS FCD_LCDDis_00058_1_tmp_int+D'1',7
0158  295F  	GOTO	label21
0159  09CD  	COMF __div_16_1_00003_arg_a, F
015A  09CE  	COMF __div_16_1_00003_arg_a+D'1', F
015B  0ACD  	INCF __div_16_1_00003_arg_a, F
015C  1903  	BTFSC STATUS,Z
015D  0ACE  	INCF __div_16_1_00003_arg_a+D'1', F
015E  0AD2  	INCF CompTempVar2209, F
015F        label21
015F  30E8  	MOVLW 0xE8
0160  00CF  	MOVWF __div_16_1_00003_arg_b
0161  3003  	MOVLW 0x03
0162  00D0  	MOVWF __div_16_1_00003_arg_b+D'1'
0163  2096  	CALL __div_16_1_00003
0164  0856  	MOVF CompTempVarRet214, W
0165  00D1  	MOVWF CompTempVar2208
0166  1C52  	BTFSS CompTempVar2209,0
0167  296A  	GOTO	label22
0168  09D1  	COMF CompTempVar2208, F
0169  0AD1  	INCF CompTempVar2208, F
016A        label22
016A  0851  	MOVF CompTempVar2208, W
016B  00CC  	MOVWF FCD_LCDDis_00058_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
016C  084C  	MOVF FCD_LCDDis_00058_1_tmp_byte, W
016D  3E30  	ADDLW 0x30
016E  00D2  	MOVWF FCD_LCDDis_00070_arg_in
016F  3010  	MOVLW 0x10
0170  00D3  	MOVWF FCD_LCDDis_00070_arg_mask
0171  2055  	CALL FCD_LCDDis_00070


			while (tmp_byte > 0)
0172        label23
0172  084C  	MOVF FCD_LCDDis_00058_1_tmp_byte, W
0173  3C00  	SUBLW 0x00
0174  1803  	BTFSC STATUS,C
0175  297E  	GOTO	label24
017D  2972  	GOTO	label23
017E        label24

			{
				tmp_int = tmp_int - 1000;
0176  30E8  	MOVLW 0xE8
0177  02CA  	SUBWF FCD_LCDDis_00058_1_tmp_int, F
0178  3003  	MOVLW 0x03
0179  1C03  	BTFSS STATUS,C
017A  3004  	MOVLW 0x04
017B  02CB  	SUBWF FCD_LCDDis_00058_1_tmp_int+D'1', F

				tmp_byte--;
017C  03CC  	DECF FCD_LCDDis_00058_1_tmp_byte, F

			}
		}
		if (Number >= 100)
017E  0849  	MOVF FCD_LCDDis_00058_arg_Number+D'1', W
017F  3A80  	XORLW 0x80
0180  00CD  	MOVWF CompTempVar2212
0181  3080  	MOVLW 0x80
0182  024D  	SUBWF CompTempVar2212, W
0183  1D03  	BTFSS STATUS,Z
0184  2987  	GOTO	label25
0185  3064  	MOVLW 0x64
0186  0248  	SUBWF FCD_LCDDis_00058_arg_Number, W
0187        label25
0187  1C03  	BTFSS STATUS,C
0188  29B3  	GOTO	label29

		{
			tmp_byte = tmp_int / 100;
0189  01D2  	CLRF CompTempVar2214
018A  084A  	MOVF FCD_LCDDis_00058_1_tmp_int, W
018B  00CD  	MOVWF __div_16_1_00003_arg_a
018C  084B  	MOVF FCD_LCDDis_00058_1_tmp_int+D'1', W
018D  00CE  	MOVWF __div_16_1_00003_arg_a+D'1'
018E  1FCB  	BTFSS FCD_LCDDis_00058_1_tmp_int+D'1',7
018F  2996  	GOTO	label26
0190  09CD  	COMF __div_16_1_00003_arg_a, F
0191  09CE  	COMF __div_16_1_00003_arg_a+D'1', F
0192  0ACD  	INCF __div_16_1_00003_arg_a, F
0193  1903  	BTFSC STATUS,Z
0194  0ACE  	INCF __div_16_1_00003_arg_a+D'1', F
0195  0AD2  	INCF CompTempVar2214, F
0196        label26
0196  3064  	MOVLW 0x64
0197  00CF  	MOVWF __div_16_1_00003_arg_b
0198  01D0  	CLRF __div_16_1_00003_arg_b+D'1'
0199  2096  	CALL __div_16_1_00003
019A  0856  	MOVF CompTempVarRet214, W
019B  00D1  	MOVWF CompTempVar2213
019C  1C52  	BTFSS CompTempVar2214,0
019D  29A0  	GOTO	label27
019E  09D1  	COMF CompTempVar2213, F
019F  0AD1  	INCF CompTempVar2213, F
01A0        label27
01A0  0851  	MOVF CompTempVar2213, W
01A1  00CC  	MOVWF FCD_LCDDis_00058_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
01A2  084C  	MOVF FCD_LCDDis_00058_1_tmp_byte, W
01A3  3E30  	ADDLW 0x30
01A4  00D2  	MOVWF FCD_LCDDis_00070_arg_in
01A5  3010  	MOVLW 0x10
01A6  00D3  	MOVWF FCD_LCDDis_00070_arg_mask
01A7  2055  	CALL FCD_LCDDis_00070


			while (tmp_byte > 0)
01A8        label28
01A8  084C  	MOVF FCD_LCDDis_00058_1_tmp_byte, W
01A9  3C00  	SUBLW 0x00
01AA  1803  	BTFSC STATUS,C
01AB  29B3  	GOTO	label29
01B2  29A8  	GOTO	label28
01B3        label29

			{
				tmp_int = tmp_int - 100;
01AC  3064  	MOVLW 0x64
01AD  02CA  	SUBWF FCD_LCDDis_00058_1_tmp_int, F
01AE  08CB  	MOVF FCD_LCDDis_00058_1_tmp_int+D'1', F
01AF  1C03  	BTFSS STATUS,C
01B0  03CB  	DECF FCD_LCDDis_00058_1_tmp_int+D'1', F

				tmp_byte--;
01B1  03CC  	DECF FCD_LCDDis_00058_1_tmp_byte, F

			}
		}
		if (Number >= 10)
01B3  0849  	MOVF FCD_LCDDis_00058_arg_Number+D'1', W
01B4  3A80  	XORLW 0x80
01B5  00CD  	MOVWF CompTempVar2217
01B6  3080  	MOVLW 0x80
01B7  024D  	SUBWF CompTempVar2217, W
01B8  1D03  	BTFSS STATUS,Z
01B9  29BC  	GOTO	label30
01BA  300A  	MOVLW 0x0A
01BB  0248  	SUBWF FCD_LCDDis_00058_arg_Number, W
01BC        label30
01BC  1C03  	BTFSS STATUS,C
01BD  29E8  	GOTO	label34

		{
			tmp_byte = tmp_int / 10;
01BE  01D2  	CLRF CompTempVar2219
01BF  084A  	MOVF FCD_LCDDis_00058_1_tmp_int, W
01C0  00CD  	MOVWF __div_16_1_00003_arg_a
01C1  084B  	MOVF FCD_LCDDis_00058_1_tmp_int+D'1', W
01C2  00CE  	MOVWF __div_16_1_00003_arg_a+D'1'
01C3  1FCB  	BTFSS FCD_LCDDis_00058_1_tmp_int+D'1',7
01C4  29CB  	GOTO	label31
01C5  09CD  	COMF __div_16_1_00003_arg_a, F
01C6  09CE  	COMF __div_16_1_00003_arg_a+D'1', F
01C7  0ACD  	INCF __div_16_1_00003_arg_a, F
01C8  1903  	BTFSC STATUS,Z
01C9  0ACE  	INCF __div_16_1_00003_arg_a+D'1', F
01CA  0AD2  	INCF CompTempVar2219, F
01CB        label31
01CB  300A  	MOVLW 0x0A
01CC  00CF  	MOVWF __div_16_1_00003_arg_b
01CD  01D0  	CLRF __div_16_1_00003_arg_b+D'1'
01CE  2096  	CALL __div_16_1_00003
01CF  0856  	MOVF CompTempVarRet214, W
01D0  00D1  	MOVWF CompTempVar2218
01D1  1C52  	BTFSS CompTempVar2219,0
01D2  29D5  	GOTO	label32
01D3  09D1  	COMF CompTempVar2218, F
01D4  0AD1  	INCF CompTempVar2218, F
01D5        label32
01D5  0851  	MOVF CompTempVar2218, W
01D6  00CC  	MOVWF FCD_LCDDis_00058_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
01D7  084C  	MOVF FCD_LCDDis_00058_1_tmp_byte, W
01D8  3E30  	ADDLW 0x30
01D9  00D2  	MOVWF FCD_LCDDis_00070_arg_in
01DA  3010  	MOVLW 0x10
01DB  00D3  	MOVWF FCD_LCDDis_00070_arg_mask
01DC  2055  	CALL FCD_LCDDis_00070


			while (tmp_byte > 0)
01DD        label33
01DD  084C  	MOVF FCD_LCDDis_00058_1_tmp_byte, W
01DE  3C00  	SUBLW 0x00
01DF  1803  	BTFSC STATUS,C
01E0  29E8  	GOTO	label34
01E7  29DD  	GOTO	label33
01E8        label34

			{
				tmp_int = tmp_int - 10;
01E1  300A  	MOVLW 0x0A
01E2  02CA  	SUBWF FCD_LCDDis_00058_1_tmp_int, F
01E3  08CB  	MOVF FCD_LCDDis_00058_1_tmp_int+D'1', F
01E4  1C03  	BTFSS STATUS,C
01E5  03CB  	DECF FCD_LCDDis_00058_1_tmp_int+D'1', F

				tmp_byte--;
01E6  03CC  	DECF FCD_LCDDis_00058_1_tmp_byte, F

			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);
01E8  084A  	MOVF FCD_LCDDis_00058_1_tmp_int, W
01E9  3E30  	ADDLW 0x30
01EA  00D2  	MOVWF FCD_LCDDis_00070_arg_in
01EB  3010  	MOVLW 0x10
01EC  00D3  	MOVWF FCD_LCDDis_00070_arg_mask
01ED  2055  	CALL FCD_LCDDis_00070


}
01EE  0008  	RETURN


void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
01EF  01D1  	CLRF FCD_LCDDis_00057_1_idx


		for (idx=0; idx<MSZ_String; idx++)
01F0  01D1  	CLRF FCD_LCDDis_00057_1_idx
01F1        label35
01F1  0850  	MOVF FCD_LCDDis_00057_arg_MSZ_String, W
01F2  0251  	SUBWF FCD_LCDDis_00057_1_idx, W
01F3  1803  	BTFSC STATUS,C
0209  0AD1  	INCF FCD_LCDDis_00057_1_idx, F
020A  29F1  	GOTO	label35

		{
			if (String[idx] == 0)
01F5  1383  	BCF STATUS,IRP
01F6  1849  	BTFSC FCD_LCDDis_00057_arg_String+D'1',0
01F7  1783  	BSF STATUS,IRP
01F8  0848  	MOVF FCD_LCDDis_00057_arg_String, W
01F9  0751  	ADDWF FCD_LCDDis_00057_1_idx, W
01FA  0084  	MOVWF FSR
01FB  0880  	MOVF INDF, F
01FC  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
01FE  1383  	BCF STATUS,IRP
01FF  1849  	BTFSC FCD_LCDDis_00057_arg_String+D'1',0
0200  1783  	BSF STATUS,IRP
0201  0848  	MOVF FCD_LCDDis_00057_arg_String, W
0202  0751  	ADDWF FCD_LCDDis_00057_1_idx, W
0203  0084  	MOVWF FSR
0204  0800  	MOVF INDF, W
0205  00D2  	MOVWF FCD_LCDDis_00070_arg_in
0206  3010  	MOVLW 0x10
0207  00D3  	MOVWF FCD_LCDDis_00070_arg_mask
0208  2055  	CALL FCD_LCDDis_00070

		}

}
01F4  0008  	RETURN
01FD  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)

{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_2__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_2__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_2__ROWCNT == 4)
			#if (LCD_2__COLCNT == 16)
				rowcount=16;
020B  3010  	MOVLW 0x10
020C  00CA  	MOVWF FCD_LCDDis_00055_1_rowcount

			#endif
			#if (LCD_2__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);
020D  01CB  	CLRF FCD_LCDDis_00056_arg_x
020E  0848  	MOVF FCD_LCDDis_00055_arg_Line, W
020F  00CC  	MOVWF FCD_LCDDis_00056_arg_y
0210  20C1  	CALL FCD_LCDDis_00056


		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
0211  01C9  	CLRF FCD_LCDDis_00055_1_count
0212        label36
0212  084A  	MOVF FCD_LCDDis_00055_1_rowcount, W
0213  0249  	SUBWF FCD_LCDDis_00055_1_count, W
0214  1803  	BTFSC STATUS,C
0215  2A1D  	GOTO	label37
021B  0AC9  	INCF FCD_LCDDis_00055_1_count, F
021C  2A12  	GOTO	label36
021D        label37

			FCD_LCDDisplay0_RawSend(' ', 0x10);
0216  3020  	MOVLW 0x20
0217  00D2  	MOVWF FCD_LCDDis_00070_arg_in
0218  3010  	MOVLW 0x10
0219  00D3  	MOVWF FCD_LCDDis_00070_arg_mask
021A  2055  	CALL FCD_LCDDis_00070


		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);
021D  01CB  	CLRF FCD_LCDDis_00056_arg_x
021E  0848  	MOVF FCD_LCDDis_00055_arg_Line, W
021F  00CC  	MOVWF FCD_LCDDis_00056_arg_y
0220  20C1  	CALL FCD_LCDDis_00056


}
0221  0008  	RETURN


void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_radio_setas_tx()
{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00001010
	FCV_SPI_MOSI = 10;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

}


void FCM_print_datain_bin()

{

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00011110
	FCV_SPI_MOSI = 30;
02E6  301E  	MOVLW 0x1E
02E7  1283  	BCF STATUS, RP0
02E8  1303  	BCF STATUS, RP1
02E9  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
02EA  30FB  	MOVLW 0xFB
02EB  1683  	BSF STATUS, RP0
02EC  0507  	ANDWF gbl_trisc, W
02ED  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
02EE  30FB  	MOVLW 0xFB
02EF  1283  	BCF STATUS, RP0
02F0  0507  	ANDWF gbl_portc, W
02F1  0087  	MOVWF gbl_portc


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02F2  0845  	MOVF gbl_FCV_SPI_MOSI, W
02F3  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
02F4  20FD  	CALL FCD_SPI_Le_00052


	//Call Component Macro
	//Call Component Macro: spi_miso=SPI_Get_Char()
	FCV_SPI_MISO = FCD_SPI_Legacy0_SPI_Get_Char();
02F5  20F2  	CALL FCD_SPI_Le_00054
02F6  0849  	MOVF CompTempVarRet2197, W
02F7  00C4  	MOVWF gbl_FCV_SPI_MISO


	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
02F8  30FB  	MOVLW 0xFB
02F9  1683  	BSF STATUS, RP0
02FA  0507  	ANDWF gbl_trisc, W
02FB  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
02FC  30FB  	MOVLW 0xFB
02FD  1283  	BCF STATUS, RP0
02FE  0507  	ANDWF gbl_portc, W
02FF  00C8  	MOVWF CompTempVar2189
0300  3004  	MOVLW 0x04
0301  0448  	IORWF CompTempVar2189, W
0302  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Call Component Macro
	//Call Component Macro: ClearLine(0)
	FCD_LCDDisplay0_ClearLine(0);
0303  01C8  	CLRF FCD_LCDDis_00055_arg_Line
0304  220B  	CALL FCD_LCDDis_00055


	//Call Component Macro
	//Call Component Macro: Cursor(0, 0)
	FCD_LCDDisplay0_Cursor(0, 0);
0305  01CB  	CLRF FCD_LCDDis_00056_arg_x
0306  01CC  	CLRF FCD_LCDDis_00056_arg_y
0307  20C1  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintString("MISO:")
	FCD_LCDDisplay0_PrintString("MISO:", 5);
0308  304D  	MOVLW 0x4D
0309  00CA  	MOVWF CompTempVar2190
030A  3049  	MOVLW 0x49
030B  00CB  	MOVWF CompTempVar2190+D'1'
030C  3053  	MOVLW 0x53
030D  00CC  	MOVWF CompTempVar2190+D'2'
030E  304F  	MOVLW 0x4F
030F  00CD  	MOVWF CompTempVar2190+D'3'
0310  303A  	MOVLW 0x3A
0311  00CE  	MOVWF CompTempVar2190+D'4'
0312  01CF  	CLRF CompTempVar2190+D'5'
0313  3000  	MOVLW HIGH(CompTempVar2190+D'0')
0314  00C9  	MOVWF FCD_LCDDis_00057_arg_String+D'1'
0315  304A  	MOVLW LOW(CompTempVar2190+D'0')
0316  00C8  	MOVWF FCD_LCDDis_00057_arg_String
0317  3005  	MOVLW 0x05
0318  00D0  	MOVWF FCD_LCDDis_00057_arg_MSZ_String
0319  21EF  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = 12
	FCV_CURSORX = 12;
031A  300C  	MOVLW 0x0C
031B  00C3  	MOVWF gbl_FCV_CURSORX


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP2=0; FCLV_LOOP2<8; FCLV_LOOP2++)
031C  01C7  	CLRF gbl_FCLV_LOOP2
031D        label38
031D  3008  	MOVLW 0x08
031E  0247  	SUBWF gbl_FCLV_LOOP2, W
031F  1803  	BTFSC STATUS,C
0345  0AC7  	INCF gbl_FCLV_LOOP2, F
0346  2B1D  	GOTO	label38

	{

		//Calculation
		//Calculation:
		//  datain_bit = spi_miso AND 1
		FCV_DATAIN_BIT = FCV_SPI_MISO & 1;
0321  3001  	MOVLW 0x01
0322  0544  	ANDWF gbl_FCV_SPI_MISO, W
0323  00C8  	MOVWF CompTempVar2192
0324  01C9  	CLRF CompTempVar2193
0325  08C8  	MOVF CompTempVar2192, F
0326  1D03  	BTFSS STATUS,Z
0327  1449  	BSF CompTempVar2193,0
0328  1042  	BCF gbl_FCV_DATAIN_BIT,0
0329  0849  	MOVF CompTempVar2193, W
032A  1D03  	BTFSS STATUS,Z
032B  1442  	BSF gbl_FCV_DATAIN_BIT,0


		//Call Component Macro
		//Call Component Macro: Cursor(cursorx, 0)
		FCD_LCDDisplay0_Cursor(FCV_CURSORX, 0);
032C  0843  	MOVF gbl_FCV_CURSORX, W
032D  00CB  	MOVWF FCD_LCDDis_00056_arg_x
032E  01CC  	CLRF FCD_LCDDis_00056_arg_y
032F  20C1  	CALL FCD_LCDDis_00056


		//Calculation
		//Calculation:
		//  datain_bit = spi_miso AND 1
		//  cursorx = cursorx - 1
		FCV_DATAIN_BIT = FCV_SPI_MISO & 1;
0330  3001  	MOVLW 0x01
0331  0544  	ANDWF gbl_FCV_SPI_MISO, W
0332  00C8  	MOVWF CompTempVar2194
0333  01C9  	CLRF CompTempVar2195
0334  08C8  	MOVF CompTempVar2194, F
0335  1D03  	BTFSS STATUS,Z
0336  1449  	BSF CompTempVar2195,0
0337  1042  	BCF gbl_FCV_DATAIN_BIT,0
0338  0849  	MOVF CompTempVar2195, W
0339  1D03  	BTFSS STATUS,Z
033A  1442  	BSF gbl_FCV_DATAIN_BIT,0

		FCV_CURSORX = FCV_CURSORX - 1;
033B  0343  	DECF gbl_FCV_CURSORX, W
033C  00C3  	MOVWF gbl_FCV_CURSORX


		//Call Component Macro
		//Call Component Macro: PrintNumber(datain_bit)
		FCD_LCDDisplay0_PrintNumber(FCV_DATAIN_BIT);
033D  01C9  	CLRF FCD_LCDDis_00058_arg_Number+D'1'
033E  01C8  	CLRF FCD_LCDDis_00058_arg_Number
033F  1842  	BTFSC gbl_FCV_DATAIN_BIT,0
0340  0AC8  	INCF FCD_LCDDis_00058_arg_Number, F
0341  2101  	CALL FCD_LCDDis_00058


		//Calculation
		//Calculation:
		//  spi_miso = spi_miso >> 1
		FCV_SPI_MISO = FCV_SPI_MISO >> 1;
0342  08C4  	MOVF gbl_FCV_SPI_MISO, F
0343  1003  	BCF STATUS,C
0344  0CC4  	RRF gbl_FCV_SPI_MISO, F



	}

}
0320  0008  	RETURN



void FCM_radio_set_pa()

{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
02C7  30FB  	MOVLW 0xFB
02C8  1683  	BSF STATUS, RP0
02C9  1303  	BCF STATUS, RP1
02CA  0507  	ANDWF gbl_trisc, W
02CB  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
02CC  30FB  	MOVLW 0xFB
02CD  1283  	BCF STATUS, RP0
02CE  0507  	ANDWF gbl_portc, W
02CF  0087  	MOVWF gbl_portc


	//Calculation
	//Calculation:
	//  spi_mosi = 0b00100110
	FCV_SPI_MOSI = 38;
02D0  3026  	MOVLW 0x26
02D1  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02D2  0845  	MOVF gbl_FCV_SPI_MOSI, W
02D3  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
02D4  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0b00001101
	FCV_SPI_MOSI = 13;
02D5  300D  	MOVLW 0x0D
02D6  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02D7  0845  	MOVF gbl_FCV_SPI_MOSI, W
02D8  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
02D9  20FD  	CALL FCD_SPI_Le_00052


	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
02DA  30FB  	MOVLW 0xFB
02DB  1683  	BSF STATUS, RP0
02DC  0507  	ANDWF gbl_trisc, W
02DD  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
02DE  30FB  	MOVLW 0xFB
02DF  1283  	BCF STATUS, RP0
02E0  0507  	ANDWF gbl_portc, W
02E1  00C8  	MOVWF CompTempVar2222
02E2  3004  	MOVLW 0x04
02E3  0448  	IORWF CompTempVar2222, W
02E4  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

}
02E5  0008  	RETURN



void FCM_radio_writedata()

{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
02A8  30FB  	MOVLW 0xFB
02A9  1683  	BSF STATUS, RP0
02AA  1303  	BCF STATUS, RP1
02AB  0507  	ANDWF gbl_trisc, W
02AC  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
02AD  30FB  	MOVLW 0xFB
02AE  1283  	BCF STATUS, RP0
02AF  0507  	ANDWF gbl_portc, W
02B0  0087  	MOVWF gbl_portc


	//Calculation
	//Calculation:
	//  spi_mosi = 0b10100000
	FCV_SPI_MOSI = 160;
02B1  30A0  	MOVLW 0xA0
02B2  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02B3  0845  	MOVF gbl_FCV_SPI_MOSI, W
02B4  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
02B5  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0x55
	FCV_SPI_MOSI = 0x55;
02B6  3055  	MOVLW 0x55
02B7  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02B8  0845  	MOVF gbl_FCV_SPI_MOSI, W
02B9  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
02BA  20FD  	CALL FCD_SPI_Le_00052


	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
02BB  30FB  	MOVLW 0xFB
02BC  1683  	BSF STATUS, RP0
02BD  0507  	ANDWF gbl_trisc, W
02BE  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
02BF  30FB  	MOVLW 0xFB
02C0  1283  	BCF STATUS, RP0
02C1  0507  	ANDWF gbl_portc, W
02C2  00C8  	MOVWF CompTempVar2223
02C3  3004  	MOVLW 0x04
02C4  0448  	IORWF CompTempVar2223, W
02C5  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

}
02C6  0008  	RETURN



void FCM_radio_tx_flush()
{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Calculation
	//Calculation:
	//  spi_mosi = 0b11100001
	FCV_SPI_MOSI = 225;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

}


void FCM_radio_setwriting_address()

{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
0257  30FB  	MOVLW 0xFB
0258  1683  	BSF STATUS, RP0
0259  1303  	BCF STATUS, RP1
025A  0507  	ANDWF gbl_trisc, W
025B  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
025C  30FB  	MOVLW 0xFB
025D  1283  	BCF STATUS, RP0
025E  0507  	ANDWF gbl_portc, W
025F  0087  	MOVWF gbl_portc


	//Calculation
	//Calculation:
	//  spi_mosi = 0b00110000
	FCV_SPI_MOSI = 48;
0260  3030  	MOVLW 0x30
0261  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0262  0845  	MOVF gbl_FCV_SPI_MOSI, W
0263  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0264  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
0265  30E7  	MOVLW 0xE7
0266  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0267  0845  	MOVF gbl_FCV_SPI_MOSI, W
0268  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0269  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
026A  30E7  	MOVLW 0xE7
026B  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
026C  0845  	MOVF gbl_FCV_SPI_MOSI, W
026D  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
026E  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
026F  30E7  	MOVLW 0xE7
0270  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0271  0845  	MOVF gbl_FCV_SPI_MOSI, W
0272  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0273  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
0274  30E7  	MOVLW 0xE7
0275  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0276  0845  	MOVF gbl_FCV_SPI_MOSI, W
0277  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0278  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
0279  30E7  	MOVLW 0xE7
027A  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
027B  0845  	MOVF gbl_FCV_SPI_MOSI, W
027C  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
027D  20FD  	CALL FCD_SPI_Le_00052


	//Comment:
	//set 0x0A to E7E7E7E7E7

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00101010
	FCV_SPI_MOSI = 42;
027E  302A  	MOVLW 0x2A
027F  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0280  0845  	MOVF gbl_FCV_SPI_MOSI, W
0281  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0282  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
0283  30E7  	MOVLW 0xE7
0284  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0285  0845  	MOVF gbl_FCV_SPI_MOSI, W
0286  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0287  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
0288  30E7  	MOVLW 0xE7
0289  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
028A  0845  	MOVF gbl_FCV_SPI_MOSI, W
028B  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
028C  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
028D  30E7  	MOVLW 0xE7
028E  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
028F  0845  	MOVF gbl_FCV_SPI_MOSI, W
0290  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0291  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
0292  30E7  	MOVLW 0xE7
0293  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0294  0845  	MOVF gbl_FCV_SPI_MOSI, W
0295  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0296  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;
0297  30E7  	MOVLW 0xE7
0298  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0299  0845  	MOVF gbl_FCV_SPI_MOSI, W
029A  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
029B  20FD  	CALL FCD_SPI_Le_00052


	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
029C  30FB  	MOVLW 0xFB
029D  1683  	BSF STATUS, RP0
029E  0507  	ANDWF gbl_trisc, W
029F  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
02A0  30FB  	MOVLW 0xFB
02A1  1283  	BCF STATUS, RP0
02A2  0507  	ANDWF gbl_portc, W
02A3  00C8  	MOVWF CompTempVar2225
02A4  3004  	MOVLW 0x04
02A5  0448  	IORWF CompTempVar2225, W
02A6  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

}
02A7  0008  	RETURN



void FCM_radio_setas_rx()
{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00001011
	FCV_SPI_MOSI = 11;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

}


void FCM_radio_setreading_address()
{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00101010
	FCV_SPI_MOSI = 42;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Calculation
	//Calculation:
	//  spi_mosi = 0xE7
	FCV_SPI_MOSI = 0xE7;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

}


void FCM_radio_readdata()
{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Calculation
	//Calculation:
	//  spi_mosi = 0b01100001
	FCV_SPI_MOSI = 97;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

}


void FCM_radio_set_enaa()
{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00100001
	FCV_SPI_MOSI = 33;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Calculation
	//Calculation:
	//  spi_mosi = 0
	FCV_SPI_MOSI = 0;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

}


void FCM_radio_transmit()

{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
0222  30FB  	MOVLW 0xFB
0223  1683  	BSF STATUS, RP0
0224  1303  	BCF STATUS, RP1
0225  0507  	ANDWF gbl_trisc, W
0226  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
0227  30FB  	MOVLW 0xFB
0228  1283  	BCF STATUS, RP0
0229  0507  	ANDWF gbl_portc, W
022A  0087  	MOVWF gbl_portc


	//Calculation
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;
022B  3020  	MOVLW 0x20
022C  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
022D  0845  	MOVF gbl_FCV_SPI_MOSI, W
022E  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
022F  20FD  	CALL FCD_SPI_Le_00052


	//Calculation
	//Calculation:
	//  spi_mosi = 0b00001010
	FCV_SPI_MOSI = 10;
0230  300A  	MOVLW 0x0A
0231  00C5  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0232  0845  	MOVF gbl_FCV_SPI_MOSI, W
0233  00C8  	MOVWF FCD_SPI_Le_00052_arg_Char
0234  20FD  	CALL FCD_SPI_Le_00052


	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0235  30FB  	MOVLW 0xFB
0236  1683  	BSF STATUS, RP0
0237  0507  	ANDWF gbl_trisc, W
0238  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0239  30FB  	MOVLW 0xFB
023A  1283  	BCF STATUS, RP0
023B  0507  	ANDWF gbl_portc, W
023C  00C8  	MOVWF CompTempVar2230
023D  3004  	MOVLW 0x04
023E  0448  	IORWF CompTempVar2230, W
023F  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//ce
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
0240  30FD  	MOVLW 0xFD
0241  1683  	BSF STATUS, RP0
0242  0507  	ANDWF gbl_trisc, W
0243  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFD) | 0x02;
0244  30FD  	MOVLW 0xFD
0245  1283  	BCF STATUS, RP0
0246  0507  	ANDWF gbl_portc, W
0247  00C8  	MOVWF CompTempVar2231
0248  3002  	MOVLW 0x02
0249  0448  	IORWF CompTempVar2231, W
024A  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFD;

	//Delay
	//Delay: 4 ms
	delay_ms(4);
024B  3004  	MOVLW 0x04
024C  00CF  	MOVWF delay_ms_00000_arg_del
024D  2010  	CALL delay_ms_00000


	//ce
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
024E  30FD  	MOVLW 0xFD
024F  1683  	BSF STATUS, RP0
0250  0507  	ANDWF gbl_trisc, W
0251  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
0252  30FD  	MOVLW 0xFD
0253  1283  	BCF STATUS, RP0
0254  0507  	ANDWF gbl_portc, W
0255  0087  	MOVWF gbl_portc


}
0256  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
03B8  3007  	MOVLW 0x07
03B9  1683  	BSF STATUS, RP0
03BA  1303  	BCF STATUS, RP1
03BB  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
03BC  30C0  	MOVLW 0xC0
03BD  0081  	MOVWF gbl_option_reg



	//Calculation
	//Calculation:
	//  spi_mosi = 0xff
	//  spi_miso = 0xff
	FCV_SPI_MOSI = 0xff;
03BE  30FF  	MOVLW 0xFF
03BF  1283  	BCF STATUS, RP0
03C0  00C5  	MOVWF gbl_FCV_SPI_MOSI

	FCV_SPI_MISO = 0xff;
03C1  00C4  	MOVWF gbl_FCV_SPI_MISO


	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
03C2  2363  	CALL FCD_LCDDis_00071


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
03C3  2352  	CALL FCD_LCDDis_00072


	//ce
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
03C4  30FD  	MOVLW 0xFD
03C5  1683  	BSF STATUS, RP0
03C6  0507  	ANDWF gbl_trisc, W
03C7  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
03C8  30FD  	MOVLW 0xFD
03C9  1283  	BCF STATUS, RP0
03CA  0507  	ANDWF gbl_portc, W
03CB  0087  	MOVWF gbl_portc


	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
03CC  30FB  	MOVLW 0xFB
03CD  1683  	BSF STATUS, RP0
03CE  0507  	ANDWF gbl_trisc, W
03CF  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
03D0  30FB  	MOVLW 0xFB
03D1  1283  	BCF STATUS, RP0
03D2  0507  	ANDWF gbl_portc, W
03D3  00C8  	MOVWF CompTempVar2249
03D4  3004  	MOVLW 0x04
03D5  0448  	IORWF CompTempVar2249, W
03D6  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Call Component Macro
	//Call Component Macro: SPI_Init()
	FCD_SPI_Legacy0_SPI_Init();
03D7  2347  	CALL FCD_SPI_Le_00065


	//setup
	//Loop: Loop 1 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<1; FCLV_LOOP1++)
03D8  01C6  	CLRF gbl_FCLV_LOOP1
03D9        label39
03D9  3001  	MOVLW 0x01
03DA  0246  	SUBWF gbl_FCLV_LOOP1, W
03DB  1803  	BTFSC STATUS,C
03DC  2BE1  	GOTO	label40
03DF  0AC6  	INCF gbl_FCLV_LOOP1, F
03E0  2BD9  	GOTO	label39
03E1        label40

	{

		//Call Macro
		//Call Macro: radio_set_pa()
		FCM_radio_set_pa();
03DD  22C7  	CALL FCM_radio__00059


		//Call Macro
		//Call Macro: radio_setwriting_address()
		FCM_radio_setwriting_address();
03DE  2257  	CALL FCM_radio__0005C



	}

	//Delay
	//Delay: 1 ms
	delay_ms(1);
03E1  3001  	MOVLW 0x01
03E2  00CF  	MOVWF delay_ms_00000_arg_del
03E3  2010  	CALL delay_ms_00000


	//Loop
	//Loop: While 1
	while (1)
03E4        label41
03EA  2BE4  	GOTO	label41

	{

		//Call Macro
		//Call Macro: radio_writedata()
		FCM_radio_writedata();
03E4  22A8  	CALL FCM_radio__0005A


		//Call Macro
		//Call Macro: radio_transmit()
		FCM_radio_transmit();
03E5  2222  	CALL FCM_radio__00061


		//Call Macro
		//Call Macro: print_datain_bin()
		FCM_print_datain_bin();
03E6  22E6  	CALL FCM_print__00053


		//Delay
		//Delay: 1 ms
		delay_ms(1);
03E7  3001  	MOVLW 0x01
03E8  00CF  	MOVWF delay_ms_00000_arg_del
03E9  2010  	CALL delay_ms_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0417  1283  	BCF STATUS, RP0
0418  1303  	BCF STATUS, RP1
0419  0E36  	SWAPF Int1BContext+D'2', W
041A  0084  	MOVWF FSR
041B  0E35  	SWAPF Int1BContext+D'1', W
041C  008A  	MOVWF PCLATH
041D  0E34  	SWAPF Int1BContext, W
041E  0083  	MOVWF STATUS
041F  0EFF  	SWAPF Int1Context, F
0420  0E7F  	SWAPF Int1Context, W
0421  0009  	RETFIE





/*********************************************************************
 *                  Flowcode CAL SPI File
 *
 * File: PIC_CAL_SPI.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 * 150911 | BR | Updated variables with typedef alternatives
 * 011211 | BR | Converted to new dynamic defines mechanism
 *
 */


//When using hardware SPI channels override port and pin conns with FCD conn definitions
//Only overwrite CS pin defines when using SPI in slave mode on a hardware channel
//Also sort out postscale and prescale options for hardware channels
#ifdef MX_SPI_REF1
	#if MX_SPI_CHANNEL_1 > 0
		#undef MX_SPI_MOSI_PIN_1
		#undef MX_SPI_MOSI_PORT_1
		#undef MX_SPI_MOSI_TRIS_1
		#undef MX_SPI_MISO_PIN_1
		#undef MX_SPI_MISO_PORT_1
		#undef MX_SPI_MISO_TRIS_1
		#undef MX_SPI_SCK_PIN_1
		#undef MX_SPI_SCK_PORT_1
		#undef MX_SPI_SCK_TRIS_1
		#undef MX_SPI_CS_PIN_1
		#undef MX_SPI_CS_PORT_1
		#undef MX_SPI_CS_TRIS_1

		#if MX_SPI_PR_SCALE_1 == 4
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	0
		#endif
		#if MX_SPI_PR_SCALE_1 == 16
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	1
		#endif
		#if MX_SPI_PR_SCALE_1 == 64
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_1 == 1
		#define MX_SPI_MOSI_PIN_1		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 2
		#define MX_SPI_MOSI_PIN_1		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 3
		#define MX_SPI_MOSI_PIN_1		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 4
		#define MX_SPI_MOSI_PIN_1		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF2
	#if MX_SPI_CHANNEL_2 > 0
		#undef MX_SPI_MOSI_PIN_2
		#undef MX_SPI_MOSI_PORT_2
		#undef MX_SPI_MOSI_TRIS_2
		#undef MX_SPI_MISO_PIN_2
		#undef MX_SPI_MISO_PORT_2
		#undef MX_SPI_MISO_TRIS_2
		#undef MX_SPI_SCK_PIN_2
		#undef MX_SPI_SCK_PORT_2
		#undef MX_SPI_SCK_TRIS_2
		#undef MX_SPI_CS_PIN_2
		#undef MX_SPI_CS_PORT_2
		#undef MX_SPI_CS_TRIS_2

		#if MX_SPI_PR_SCALE_2 == 4
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	0
		#endif
		#if MX_SPI_PR_SCALE_2 == 16
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	1
		#endif
		#if MX_SPI_PR_SCALE_2 == 64
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_2 == 1
		#define MX_SPI_MOSI_PIN_2		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 2
		#define MX_SPI_MOSI_PIN_2		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 3
		#define MX_SPI_MOSI_PIN_2		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 4
		#define MX_SPI_MOSI_PIN_2		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF3
	#if MX_SPI_CHANNEL_3 > 0
		#undef MX_SPI_MOSI_PIN_3
		#undef MX_SPI_MOSI_PORT_3
		#undef MX_SPI_MOSI_TRIS_3
		#undef MX_SPI_MISO_PIN_3
		#undef MX_SPI_MISO_PORT_3
		#undef MX_SPI_MISO_TRIS_3
		#undef MX_SPI_SCK_PIN_3
		#undef MX_SPI_SCK_PORT_3
		#undef MX_SPI_SCK_TRIS_3
		#undef MX_SPI_CS_PIN_3
		#undef MX_SPI_CS_PORT_3
		#undef MX_SPI_CS_TRIS_3

		#if MX_SPI_PR_SCALE_3 == 4
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	0
		#endif
		#if MX_SPI_PR_SCALE_3 == 16
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	1
		#endif
		#if MX_SPI_PR_SCALE_3 == 64
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_3 == 1
		#define MX_SPI_MOSI_PIN_3		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 2
		#define MX_SPI_MOSI_PIN_3		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 3
		#define MX_SPI_MOSI_PIN_3		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 4
		#define MX_SPI_MOSI_PIN_3		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF4
	#if MX_SPI_CHANNEL_4 > 0
		#undef MX_SPI_MOSI_PIN_4
		#undef MX_SPI_MOSI_PORT_4
		#undef MX_SPI_MOSI_TRIS_4
		#undef MX_SPI_MISO_PIN_4
		#undef MX_SPI_MISO_PORT_4
		#undef MX_SPI_MISO_TRIS_4
		#undef MX_SPI_SCK_PIN_4
		#undef MX_SPI_SCK_PORT_4
		#undef MX_SPI_SCK_TRIS_4
		#undef MX_SPI_CS_PIN_4
		#undef MX_SPI_CS_PORT_4
		#undef MX_SPI_CS_TRIS_4

		#if MX_SPI_PR_SCALE_4 == 4
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	0
		#endif
		#if MX_SPI_PR_SCALE_4 == 16
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	1
		#endif
		#if MX_SPI_PR_SCALE_4 == 64
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_4 == 1
		#define MX_SPI_MOSI_PIN_4		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 2
		#define MX_SPI_MOSI_PIN_4		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 3
		#define MX_SPI_MOSI_PIN_4		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 4
		#define MX_SPI_MOSI_PIN_4		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_4_SS_TRIS
	#endif
#endif

#define MX_SPI_CHANNEL_X		CAL_APPEND(MX_SPI_CHANNEL_, MX_SPI_NUM)
#define MX_SPI_MOSI_PIN_X		CAL_APPEND(MX_SPI_MOSI_PIN_, MX_SPI_NUM)
#define MX_SPI_MOSI_PORT_X		CAL_APPEND(MX_SPI_MOSI_PORT_, MX_SPI_NUM)
#define MX_SPI_MOSI_TRIS_X		CAL_APPEND(MX_SPI_MOSI_TRIS_, MX_SPI_NUM)
#define MX_SPI_MISO_PIN_X		CAL_APPEND(MX_SPI_MISO_PIN_, MX_SPI_NUM)
#define MX_SPI_MISO_PORT_X		CAL_APPEND(MX_SPI_MISO_PORT_, MX_SPI_NUM)
#define MX_SPI_MISO_TRIS_X		CAL_APPEND(MX_SPI_MISO_TRIS_, MX_SPI_NUM)
#define MX_SPI_SCK_PIN_X		CAL_APPEND(MX_SPI_SCK_PIN_, MX_SPI_NUM)
#define MX_SPI_SCK_PORT_X		CAL_APPEND(MX_SPI_SCK_PORT_, MX_SPI_NUM)
#define MX_SPI_SCK_TRIS_X		CAL_APPEND(MX_SPI_SCK_TRIS_, MX_SPI_NUM)
#define MX_SPI_CS_PIN_X			CAL_APPEND(MX_SPI_CS_PIN_, MX_SPI_NUM)
#define MX_SPI_CS_PORT_X		CAL_APPEND(MX_SPI_CS_PORT_, MX_SPI_NUM)
#define MX_SPI_CS_TRIS_X		CAL_APPEND(MX_SPI_CS_TRIS_, MX_SPI_NUM)
#define MX_SPI_BMODE_X			CAL_APPEND(MX_SPI_BMODE_, MX_SPI_NUM)
#define MX_SPI_PR_SCALE_X		CAL_APPEND(MX_SPI_PR_SCALE_, MX_SPI_NUM)
#define MX_SPI_PO_SCALE_X		CAL_APPEND(MX_SPI_PO_SCALE_, MX_SPI_NUM)
#define MX_SPI_INT_X			CAL_APPEND(MX_SPI_INT_, MX_SPI_NUM)


//Function Prototypes
CALFUNCTION(void, FC_CAL_SPI_Master_Init_, (void));
CALFUNCTION(void, FC_CAL_SPI_Master_Uninit_, (void));
CALFUNCTION(MX_UINT8, FC_CAL_SPI_Master_Byte_, (MX_UINT8 DataOut));

CALFUNCTION(void, FC_CAL_SPI_Slave_Init_, (void));
CALFUNCTION(void, FC_CAL_SPI_Slave_Uninit_, (void));
CALFUNCTION(void, FC_CAL_SPI_Slave_SetTxData_, (MX_UINT8 Data));
CALFUNCTION(MX_UINT8, FC_CAL_SPI_Slave_GetRxData_, (void));


#if (MX_SPI_CHANNEL_X == 0)
  #ifndef MX_SPI_SW_DEL
    #define MX_SPI_SW_DEL
	MX_UINT8 SPI_SW_DELAY = 1;
  #endif
#endif


//Bus Mode - Bit0=CPOL, Bit1=CPHA, Bit2=CSMP
//CPOL - Clock Polarity - Idle State of the clock 0=0, 1=1
//CPHA - Clock Phase - Clock Edge 0=leading edge, 1=trailing edge
//CSMP - Input Data Bit Sample Phase
//CRAT - SPI Clock Rate 0=1/4, 1=1/16, 2=1/64


//Ensure SSPCON register is defined correctly
#ifndef SSPCON
  #ifdef SSPCON1
	#define sspcon	sspcon1
  #else
	#ifdef SSP1CON1
		#define sspcon	ssp1con1
	#endif
  #endif
#endif
#ifndef SSPBUF
  #ifdef SSP1BUF
	#define sspbuf	ssp1buf
  #endif
#endif

#ifndef SSP2CON
	#ifdef SSP2CON1
		#define ssp2con	ssp2con1
	#endif
#endif




CALFUNCTION(void, FC_CAL_SPI_Master_Init_, (void))

{
	FC_CAL_Bit_High_DDR (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_TRIS_X, MX_SPI_MOSI_PIN_X);		// MOSI pin is default high
00DF  1683  	BSF STATUS, RP0
00E0  1303  	BCF STATUS, RP1
00E1  1287  	BCF gbl_trisc,5
00E2  1283  	BCF STATUS, RP0
00E3  1687  	BSF gbl_portc,5

	FC_CAL_Bit_In_DDR   (MX_SPI_MISO_PORT_X, MX_SPI_MISO_TRIS_X, MX_SPI_MISO_PIN_X);		// MISO pin is a input
00E4  1683  	BSF STATUS, RP0
00E5  1607  	BSF gbl_trisc,4


	#if (MX_SPI_BMODE_X & 0x02)
		FC_CAL_Bit_Low_DDR  (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);		// Clock pin is default low
00E6  1187  	BCF gbl_trisc,3
00E7  1283  	BCF STATUS, RP0
00E8  1187  	BCF gbl_portc,3

	#else
		FC_CAL_Bit_High_DDR (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);		// Clock pin is default high
	#endif

	#if (MX_SPI_CHANNEL_X == 1)
	 #ifndef MX_SPI_1
	 	#error "SPI channel 1 not available on this device"
	 #else
		sspcon 		 = MX_SPI_PR_SCALE_X & 0x03;			//Assign Clock Prescaler
00E9  3001  	MOVLW 0x01
00EA  0094  	MOVWF gbl_sspcon

		sspcon.CKP 	 = MX_SPI_BMODE_X & 0x01;				//Assign Clock Polarity
00EB  1214  	BCF gbl_sspcon,4

		sspstat.CKE  = (MX_SPI_BMODE_X & 0x02) >> 1;		//Assign Clock Phase
00EC  1683  	BSF STATUS, RP0
00ED  1714  	BSF gbl_sspstat,6

		sspstat.SMP  = (MX_SPI_BMODE_X & 0x04) >> 2;		//Assign Input Data Phase
00EE  1794  	BSF gbl_sspstat,7

		sspcon.SSPEN = 1;									//Activate SPI Peripheral
00EF  1283  	BCF STATUS, RP0
00F0  1694  	BSF gbl_sspcon,5

	 #endif
	#endif

	#if (MX_SPI_CHANNEL_X == 2)
	 #ifndef MX_SPI_2
	 	#error "SPI channel 2 not available on this device"
	 #else

	  #ifdef MX_SPI_2_REMAPPABLE
		RPINR21 = 3; 										//MISO - RB0 - RP3
		RPOR4 = 9;											//MOSI - RB1 - RP4
		RPOR5 = 10;											//SCK  - RB2 - RP5
	  #endif

		ssp2con 	  = MX_SPI_PR_SCALE_X & 0x03;		//Assign Clock Prescaler
		ssp2con.CKP   = MX_SPI_BMODE_X & 0x01;			//Assign Clock Polarity
		ssp2stat.CKE  = (MX_SPI_BMODE_X & 0x02) >> 1;	//Assign Clock Phase
		ssp2stat.SMP  = (MX_SPI_BMODE_X & 0x04) >> 2;	//Assign Input Data Phase
		ssp2con.SSPEN = 1;									//Activate SPI Peripheral
	 #endif
	#endif
}
00F1  0008  	RETURN



CALFUNCTION(void, FC_CAL_SPI_Master_Uninit_, (void))
{
	#if (MX_SPI_CHANNEL_X == 1)
		sspcon = 0;
	#endif

	#if (MX_SPI_CHANNEL_X == 2)
		ssp2con = 0;
    #endif

	//Reset Pins to Inputs
	FC_CAL_Bit_In_DDR (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_TRIS_X, MX_SPI_MOSI_PIN_X);
	FC_CAL_Bit_In_DDR (MX_SPI_MISO_PORT_X, MX_SPI_MISO_TRIS_X, MX_SPI_MISO_PIN_X);
	FC_CAL_Bit_In_DDR (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);
}


CALFUNCTION(MX_UINT8, FC_CAL_SPI_Master_Byte_, (MX_UINT8 DataOut))

{
	MX_UINT8 retVal = 0;
00B5  01CA  	CLRF FC_CAL_SPI_00064_1_retVal


	#if (MX_SPI_CHANNEL_X == 0)
		SPI_SW_DELAY = MX_SPI_PR_SCALE_X;

		MX_UINT8 idx;
		for (idx = 0; idx < 8; idx++)
		{
			retVal = retVal << 1;

			#if ((MX_SPI_BMODE_X & 0x02) == 0x00)									//CKE = 0; Set SCK active before data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			if (DataOut & 0x80)														//Test Data bit
				FC_CAL_Bit_High(MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_PIN_X);				//Set SDO bit
			else
				FC_CAL_Bit_Low (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_PIN_X);				//Clear SDO bit

			delay_us(SPI_SW_DELAY);

			#if ((MX_SPI_BMODE_X & 0x02) == 0x02)									//CKE = 1; Set SCK active after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#else																	//CKE = 0; Set SCK idle after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			#if ((MX_SPI_BMODE_X & 0x04) == 0)										//Sample at the middle of period
				if(FC_CAL_Bit_In(MX_SPI_MISO_PORT_X, MX_SPI_MISO_PIN_X))
					retVal = retVal | 0x01;
				else
					retVal = retVal & 0xFE;
			#endif

			delay_us(SPI_SW_DELAY);

			#if ((MX_SPI_BMODE_X & 0x02) == 0x02)									//CKE = 1; Set SCK idle to complete cycle																	//CKE = 0; Set SCK idle after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			#if ((MX_SPI_BMODE_X & 0x04) == 0x04)									//Sample at the end of period
				if(FC_CAL_Bit_In(MX_SPI_MISO_PORT_X, MX_SPI_MISO_PIN_X))
					retVal = retVal | 0x01;
				else
					retVal = retVal & 0xFE;
			#endif

			DataOut = DataOut << 1;							//Move to next data bit
		}
    #endif

	#if (MX_SPI_CHANNEL_X == 1)
		sspbuf = DataOut;					//Send outgoing byte
00B6  0849  	MOVF FC_CAL_SPI_00064_arg_DataOut, W
00B7  0093  	MOVWF gbl_sspbuf

		while ((sspstat & 0x01) == 0);		//Wait until sspbuf is empty
00B8        label9
00B8  1683  	BSF STATUS, RP0
00B9  1C14  	BTFSS gbl_sspstat,0
00BA  28B8  	GOTO	label9

		retVal = sspbuf;					//Collect incoming byte
00BB  1283  	BCF STATUS, RP0
00BC  0813  	MOVF gbl_sspbuf, W
00BD  00CA  	MOVWF FC_CAL_SPI_00064_1_retVal

	#endif

	#if (MX_SPI_CHANNEL_X == 2)
		ssp2buf = DataOut;					//Send outgoing byte
		while ((ssp2stat & 0x01) == 0);		//Wait until sspbuf is empty
		retVal = ssp2buf;					//Collect incoming byte
	#endif

	return (retVal);
00BE  084A  	MOVF FC_CAL_SPI_00064_1_retVal, W
00BF  00CB  	MOVWF CompTempVarRet2232

}
00C0  0008  	RETURN






CALFUNCTION(void, FC_CAL_SPI_Slave_Init_, (void))
{

}

CALFUNCTION(void, FC_CAL_SPI_Slave_Uninit_, (void))
{

}

CALFUNCTION(void, FC_CAL_SPI_Slave_SetTxData_, (MX_UINT8 Data))
{

}

CALFUNCTION(MX_UINT8, FC_CAL_SPI_Slave_GetRxData_, (void))
{

}



////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2BEB  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2C17  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08CF  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  2815  	GOTO	label2
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0BCF  	DECFSZ delay_ms_00000_arg_del, F
003A  2814  	GOTO	label1
003B  0008  	RETURN
003C        ; } delay_ms function end

003C        delay_10us_00000
003C        ; { delay_10us ; function begin
003C  08D5  	MOVF delay_10us_00000_arg_del, F
003D  1D03  	BTFSS STATUS,Z
003E  2840  	GOTO	label3
003F  0008  	RETURN
0040        label3
0040  3009  	MOVLW 0x09
0041        label4
0041  0000  	NOP
0042  3EFF  	ADDLW 0xFF
0043  1D03  	BTFSS STATUS,Z
0044  2841  	GOTO	label4
0045  0000  	NOP
0046  0000  	NOP
0047  0BD5  	DECFSZ delay_10us_00000_arg_del, F
0048  2840  	GOTO	label3
0049  0008  	RETURN
004A        ; } delay_10us function end


0096        __div_16_1_00003
0096        ; { __div_16_16 ; function begin
0096  01D3  	CLRF __div_16_1_00003_1_r
0097  01D4  	CLRF __div_16_1_00003_1_r+D'1'
0098  01D6  	CLRF CompTempVarRet214
0099  01D7  	CLRF CompTempVarRet214+D'1'
009A  01D5  	CLRF __div_16_1_00003_1_i
009B        label6
009B  1A55  	BTFSC __div_16_1_00003_1_i,4
009C  0008  	RETURN
009D  1003  	BCF STATUS,C
009E  0DD6  	RLF CompTempVarRet214, F
009F  0DD7  	RLF CompTempVarRet214+D'1', F
00A0  0DCD  	RLF __div_16_1_00003_arg_a, F
00A1  0DCE  	RLF __div_16_1_00003_arg_a+D'1', F
00A2  0DD3  	RLF __div_16_1_00003_1_r, F
00A3  0DD4  	RLF __div_16_1_00003_1_r+D'1', F
00A4  0850  	MOVF __div_16_1_00003_arg_b+D'1', W
00A5  0254  	SUBWF __div_16_1_00003_1_r+D'1', W
00A6  1D03  	BTFSS STATUS,Z
00A7  28AA  	GOTO	label7
00A8  084F  	MOVF __div_16_1_00003_arg_b, W
00A9  0253  	SUBWF __div_16_1_00003_1_r, W
00AA        label7
00AA  1C03  	BTFSS STATUS,C
00AB  28B3  	GOTO	label8
00AC  084F  	MOVF __div_16_1_00003_arg_b, W
00AD  02D3  	SUBWF __div_16_1_00003_1_r, F
00AE  0850  	MOVF __div_16_1_00003_arg_b+D'1', W
00AF  1C03  	BTFSS STATUS,C
00B0  03D4  	DECF __div_16_1_00003_1_r+D'1', F
00B1  02D4  	SUBWF __div_16_1_00003_1_r+D'1', F
00B2  1456  	BSF CompTempVarRet214,0
00B3        label8
00B3  0AD5  	INCF __div_16_1_00003_1_i, F
00B4  289B  	GOTO	label6
00B5        ; } __div_16_16 function end


03EB        _startup
03EB  30D5  	MOVLW 0xD5
03EC  1283  	BCF STATUS, RP0
03ED  1303  	BCF STATUS, RP1
03EE  00A0  	MOVWF gbl_14_LSR
03EF  30C4  	MOVLW 0xC4
03F0  00A1  	MOVWF gbl_14_LSR+D'1'
03F1  30BB  	MOVLW 0xBB
03F2  00A2  	MOVWF gbl_14_LSR+D'2'
03F3  30DC  	MOVLW 0xDC
03F4  00A3  	MOVWF gbl_14_LSR+D'3'
03F5  01A4  	CLRF gbl_15_gbl_aSig
03F6  01A5  	CLRF gbl_15_gbl_aSig+D'1'
03F7  01A6  	CLRF gbl_15_gbl_aSig+D'2'
03F8  01A7  	CLRF gbl_15_gbl_aSig+D'3'
03F9  01A8  	CLRF gbl_15_gbl_bSig
03FA  01A9  	CLRF gbl_15_gbl_bSig+D'1'
03FB  01AA  	CLRF gbl_15_gbl_bSig+D'2'
03FC  01AB  	CLRF gbl_15_gbl_bSig+D'3'
03FD  01AC  	CLRF gbl_15_gbl_zSig
03FE  01AD  	CLRF gbl_15_gbl_zSig+D'1'
03FF  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0400  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0401  01BC  	CLRF gbl_15_gbl_aExp
0402  01BD  	CLRF gbl_15_gbl_bExp
0403  01B7  	CLRF gbl_15_gbl_zExp
0404  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0405  01BE  	CLRF gbl_15_gbl_aSign
0406  01BF  	CLRF gbl_15_gbl_bSign
0407  01C0  	CLRF gbl_15_gbl_zSign
0408  01C1  	CLRF gbl_15_gbl_zSigZero
0409  01B0  	CLRF gbl_15_gbl_ret
040A  01B1  	CLRF gbl_15_gbl_ret+D'1'
040B  01B2  	CLRF gbl_15_gbl_ret+D'2'
040C  01B3  	CLRF gbl_15_gbl_ret+D'3'
040D  01BA  	CLRF gbl_float_rounding_mode
040E  01BB  	CLRF gbl_float_exception_flags
040F  01B9  	CLRF gbl_float_detect_tininess

0414  118A  	BCF PCLATH,3
0415  120A  	BCF PCLATH,4
0416  2BB8  	GOTO	main

2007  3F3A  	DW 0x3F3A
