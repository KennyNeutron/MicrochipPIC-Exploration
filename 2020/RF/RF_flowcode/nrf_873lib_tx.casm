;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
005F  01C7  	CLRF Wdt_Delay__0003E_1_i
0060        label7
0060  0846  	MOVF Wdt_Delay__0003E_arg_delay, W
0061  0247  	SUBWF Wdt_Delay__0003E_1_i, W
0062  1803  	BTFSC STATUS,C
0068  0AC7  	INCF Wdt_Delay__0003E_1_i, F
0069  2860  	GOTO	label7

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0064  0064  	CLRWDT

        delay_ms(1);
0065  3001  	MOVLW 0x01
0066  00C8  	MOVWF delay_ms_00000_arg_del
0067  2015  	CALL delay_ms_00000

    }
}
0063  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\RF\RF_flowcode\nrf_873lib_tx.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Thursday, July 30, 2020 15:10:16
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_radio_tx_init();
void FCM_flush_tx_rx();
void FCM_radio_senddata();
void FCM_radio_rx_init();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT8 FCV_SPI_MISO = (0xff);
0280  30FF  	MOVLW 0xFF
0281  00C2  	MOVWF gbl_FCV_SPI_MISO

MX_UINT8 FCV_SPI_MOSI = (0xff);
0282  30FF  	MOVLW 0xFF
0283  00C3  	MOVWF gbl_FCV_SPI_MOSI


MX_UINT8 FCLV_LOOP1;
MX_UINT8 FCLV_LOOP2;
MX_UINT8 FCLV_LOOP3;
MX_UINT8 FCLV_LOOP4;



//SPI_Legacy(0): //Defines:

/**** Macro Substitutions ****
a = Unique Ref
b = SPI Channel
c = MOSI Pin
d = MOSI Port
e = MISO Pin
f = MISO Port
g = SCK Pin
h = SCK Port
i = Clock Polarity + Clock Phase + Data Sample Phase
j = SPI Prescaler
k = SPI Postscaler
l = DAC Enable Pin
m = DAC Enable Port
n = FRAM Enable Pin
o = FRAM Enable Port
******************************/

//MX_SPI_BMODE - Bus Mode - Bit0=CPOL, Bit1=CPHA, Bit2=CSMP
//CPOL - Clock Polarity - Idle State of the clock 0=0, 1=1
//CPHA - Clock Phase - Clock Edge 0=leading edge, 1=trailing edge
//CSMP - Input Data Bit Sample Phase


//Definitions for CS control lines
#define SPI_1_MX_SPI_LEGACY_DAC_PIN		0
#define SPI_1_MX_SPI_LEGACY_DAC_PORT		porta
#define SPI_1_MX_SPI_LEGACY_DAC_TRIS		trisa
#define SPI_1_MX_SPI_LEGACY_FRAM_PIN		0
#define SPI_1_MX_SPI_LEGACY_FRAM_PORT		porta
#define SPI_1_MX_SPI_LEGACY_FRAM_TRIS		trisa


//Definitions for SPI slot allocation
#ifndef	MX_SPI_REF1
	#define MX_SPI_REF1
	#define SPI_1_MX_SPI_UREF			1
	#define MX_SPI_CHANNEL_1		1
	#define MX_SPI_MOSI_PIN_1		-1
	#define MX_SPI_MOSI_PORT_1		port0
	#define MX_SPI_MOSI_TRIS_1		tris0
	#define MX_SPI_MISO_PIN_1		-1
	#define MX_SPI_MISO_PORT_1		port0
	#define MX_SPI_MISO_TRIS_1		tris0
	#define MX_SPI_SCK_PIN_1		-1
	#define MX_SPI_SCK_PORT_1		port0
	#define MX_SPI_SCK_TRIS_1		tris0
	#define MX_SPI_CS_PIN_1			0
	#define MX_SPI_CS_PORT_1		0
	#define MX_SPI_BMODE_1			6
	#define MX_SPI_PR_SCALE_1		16
	#define MX_SPI_PO_SCALE_1		0
	#define MX_SPI_INT_1			0
#else
 #ifndef	MX_SPI_REF2
	#define MX_SPI_REF2
	#define SPI_1_MX_SPI_UREF			2
	#define MX_SPI_CHANNEL_2		1
	#define MX_SPI_MOSI_PIN_2		-1
	#define MX_SPI_MOSI_PORT_2		port0
	#define MX_SPI_MOSI_TRIS_2		tris0
	#define MX_SPI_MISO_PIN_2		-1
	#define MX_SPI_MISO_PORT_2		port0
	#define MX_SPI_MISO_TRIS_2		tris0
	#define MX_SPI_SCK_PIN_2		-1
	#define MX_SPI_SCK_PORT_2		port0
	#define MX_SPI_SCK_TRIS_2		tris0
	#define MX_SPI_CS_PIN_2			0
	#define MX_SPI_CS_PORT_2		0
	#define MX_SPI_BMODE_2			6
	#define MX_SPI_PR_SCALE_2		16
	#define MX_SPI_PO_SCALE_2		0
	#define MX_SPI_INT_2			0
 #else
  #ifndef	MX_SPI_REF3
	#define MX_SPI_REF3
	#define SPI_1_MX_SPI_UREF			3
	#define MX_SPI_CHANNEL_3		1
	#define MX_SPI_MOSI_PIN_3		-1
	#define MX_SPI_MOSI_PORT_3		port0
	#define MX_SPI_MOSI_TRIS_3		tris0
	#define MX_SPI_MISO_PIN_3		-1
	#define MX_SPI_MISO_PORT_3		port0
	#define MX_SPI_MISO_TRIS_3		tris0
	#define MX_SPI_SCK_PIN_3		-1
	#define MX_SPI_SCK_PORT_3		port0
	#define MX_SPI_SCK_TRIS_3		tris0
	#define MX_SPI_CS_PIN_3			0
	#define MX_SPI_CS_PORT_3		0
	#define MX_SPI_BMODE_3			6
	#define MX_SPI_PR_SCALE_3		16
	#define MX_SPI_PO_SCALE_3		0
	#define MX_SPI_INT_3			0
  #else
   #ifndef	MX_SPI_REF4
	#define MX_SPI_REF4
	#define SPI_1_MX_SPI_UREF			4
	#define MX_SPI_CHANNEL_4		1
	#define MX_SPI_MOSI_PIN_4		-1
	#define MX_SPI_MOSI_PORT_4		port0
	#define MX_SPI_MOSI_TRIS_4		tris0
	#define MX_SPI_MISO_PIN_4		-1
	#define MX_SPI_MISO_PORT_4		port0
	#define MX_SPI_MISO_TRIS_4		tris0
	#define MX_SPI_SCK_PIN_4		-1
	#define MX_SPI_SCK_PORT_4		port0
	#define MX_SPI_SCK_TRIS_4		tris0
	#define MX_SPI_CS_PIN_4			0
	#define MX_SPI_CS_PORT_4		0
	#define MX_SPI_BMODE_4			6
	#define MX_SPI_PR_SCALE_4		16
	#define MX_SPI_PO_SCALE_4		0
	#define MX_SPI_INT_4			0
   #endif
  #endif
 #endif
#endif

#define SPI_1_SPI_Master_Init		CAL_APPEND(FC_CAL_SPI_Master_Init_, SPI_1_MX_SPI_UREF)
#define SPI_1_SPI_Master_Uninit	CAL_APPEND(FC_CAL_SPI_Master_Uninit_, SPI_1_MX_SPI_UREF)
#define SPI_1_SPI_Master_Byte		CAL_APPEND(FC_CAL_SPI_Master_Byte_, SPI_1_MX_SPI_UREF)

extern void SPI_1_SPI_Master_Init ();
extern void SPI_1_SPI_Master_Uninit ();
extern MX_UINT8 SPI_1_SPI_Master_Byte (MX_UINT8 DataOut);

//FRAM commands
#define FRAM_WREN  	6
#define FRAM_WRDI  	4
#define FRAM_RDSR  	5
#define FRAM_WRSR  	1
#define FRAM_READ  	3
#define FRAM_WRITE 	2




//SPI_Legacy(0): //Macro function declarations

void FCD_SPI_Legacy0_SPI_Init();
void FCD_SPI_Legacy0_SPI_Uninit();
void FCD_SPI_Legacy0_SPI_Send_Char(MX_UINT8 Char);
void FCD_SPI_Legacy0_SPI_Send_String(MX_STRING String, MX_UINT8 MSZ_String);
MX_UINT8 FCD_SPI_Legacy0_SPI_Get_Char();
void FCD_SPI_Legacy0_SPI_Get_String(MX_CHAR* FCR_RETVAL, MX_UINT8 FCR_RETVAL_SIZE, MX_UINT8 NumBytes);
void FCD_SPI_Legacy0_DAC_Send_Char(MX_UINT8 Char);
void FCD_SPI_Legacy0_NVM_Send_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr, MX_UINT8 Char);
MX_UINT8 FCD_SPI_Legacy0_NVM_Get_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr);
MX_UINT8 FCD_SPI_Legacy0_FramOutput(MX_UINT8 Char);
void FCD_SPI_Legacy0_EnableFRAM();
void FCD_SPI_Legacy0_DisableFRAM();


//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_2__PORT0    portb
	#define LCD_2__PORT1    portb
	#define LCD_2__PORT2    portb
	#define LCD_2__PORT3    portb
	#define LCD_2__PORT4    portb
	#define LCD_2__PORT5    portb
	#define LCD_2__TRIS0    trisb
	#define LCD_2__TRIS1    trisb
	#define LCD_2__TRIS2    trisb
	#define LCD_2__TRIS3    trisb
	#define LCD_2__TRIS4    trisb
	#define LCD_2__TRIS5    trisb
	#define LCD_2__BIT0    	2
	#define LCD_2__BIT1    	3
	#define LCD_2__BIT2    	4
	#define LCD_2__BIT3    	5
	#define LCD_2__RS      	0
	#define LCD_2__E       	1
	#define LCD_2__ROWCNT	4
	#define LCD_2__COLCNT	20

	#ifdef _BOOSTC
	  #define LCD_2__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_2__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_2__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_2__DELAY
	  #define LCD_2__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//SPI_Legacy(0): //Macro implementations


void FCD_SPI_Legacy0_SPI_Init()

{
	
		//Disable SPI Devices
		FC_CAL_Bit_High_DDR(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_TRIS, SPI_1_MX_SPI_LEGACY_DAC_PIN);
01CB  1683  	BSF STATUS, RP0
01CC  1303  	BCF STATUS, RP1
01CD  1005  	BCF gbl_trisa,0
01CE  1283  	BCF STATUS, RP0
01CF  1405  	BSF gbl_porta,0

		FC_CAL_Bit_High_DDR(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_TRIS, SPI_1_MX_SPI_LEGACY_FRAM_PIN);
01D0  1683  	BSF STATUS, RP0
01D1  1005  	BCF gbl_trisa,0
01D2  1283  	BCF STATUS, RP0
01D3  1405  	BSF gbl_porta,0


		//Init SPI
		SPI_1_SPI_Master_Init();		//Call initialise function
01D4  206A  	CALL FC_CAL_SPI_00056


}
01D5  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Uninit()
{
	
		//Convert SPI Device Control Lines To Inputs
		FC_CAL_Bit_In_DDR(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_TRIS, SPI_1_MX_SPI_LEGACY_DAC_PIN);
		FC_CAL_Bit_In_DDR(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_TRIS, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

		//Uninit SPI
		SPI_1_SPI_Master_Uninit();		//Call uninitialise function

}

void FCD_SPI_Legacy0_SPI_Send_Char(MX_UINT8 Char)

{
	
		SPI_1_SPI_Master_Byte(Char);
005B  0846  	MOVF FCD_SPI_Le_00052_arg_Char, W
005C  00C7  	MOVWF FC_CAL_SPI_00058_arg_DataOut
005D  204F  	CALL FC_CAL_SPI_00058


}
005E  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Send_String(MX_STRING String, MX_UINT8 MSZ_String)
{
	
		MX_UINT8 idx;
		for(idx = 0; idx < MSZ_String; idx++)
		{
			if (String[idx] == 0)				//End of string data?
				break;

			SPI_1_SPI_Master_Byte(String[idx]);
		}

}

MX_UINT8 FCD_SPI_Legacy0_SPI_Get_Char()
{
	
		MX_UINT8 retVal = 0;

		retVal = SPI_1_SPI_Master_Byte(0xFF);

		return (retVal);

}

void FCD_SPI_Legacy0_SPI_Get_String(MX_CHAR* FCR_RETVAL, MX_UINT8 FCR_RETVAL_SIZE, MX_UINT8 NumBytes)
{
		MX_UINT8 idx;

		if (NumBytes > FCR_RETVAL_SIZE)
			NumBytes = FCR_RETVAL_SIZE;

		for (idx = 0; idx < NumBytes; idx++)
		{
			FCR_RETVAL[idx] = SPI_1_SPI_Master_Byte(0xFF);		//Collect incoming data byte
		}

		if (idx < FCR_RETVAL_SIZE)
			FCR_RETVAL[idx] = 0;					//Terminate string if string variable is longer then expected data

}

void FCD_SPI_Legacy0_DAC_Send_Char(MX_UINT8 Char)
{
	
		MX_UINT8 dac_val;

		FC_CAL_Bit_Low(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_PIN);		//enable dac

		dac_val = (Char & 0xF0) >> 4;
		SPI_1_SPI_Master_Byte(dac_val);

		dac_val = (Char & 0x0F) << 4;
		SPI_1_SPI_Master_Byte(dac_val);

		FC_CAL_Bit_High(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_PIN);		//disable dac

}

void FCD_SPI_Legacy0_NVM_Send_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr, MX_UINT8 Char)
{
	
		//enable writes
		FCD_SPI_Legacy0_EnableFRAM();
		FCD_SPI_Legacy0_FramOutput(FRAM_WREN);
		FCD_SPI_Legacy0_DisableFRAM();

		//send write-fram command, address and data
		FCD_SPI_Legacy0_EnableFRAM();
		FCD_SPI_Legacy0_FramOutput(FRAM_WRITE);
		FCD_SPI_Legacy0_FramOutput(hi_addr);
		FCD_SPI_Legacy0_FramOutput(lo_addr);
		FCD_SPI_Legacy0_FramOutput(Char);
		FCD_SPI_Legacy0_DisableFRAM();

}

MX_UINT8 FCD_SPI_Legacy0_NVM_Get_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr)
{
	
		MX_UINT8 retVal;

		FCD_SPI_Legacy0_EnableFRAM();

		//send read-fram command and address
		FCD_SPI_Legacy0_FramOutput(FRAM_READ);
		FCD_SPI_Legacy0_FramOutput(hi_addr);
		FCD_SPI_Legacy0_FramOutput(lo_addr);

		//read the data
		retVal = FCD_SPI_Legacy0_FramOutput(0x5A);  	//don't care byte of 0x5A

		FCD_SPI_Legacy0_DisableFRAM();

		return(retVal);

}

MX_UINT8 FCD_SPI_Legacy0_FramOutput(MX_UINT8 Char)
{
	
		MX_UINT8 retVal = 0;
		retVal = SPI_1_SPI_Master_Byte(Char);
		return (retVal);

}

void FCD_SPI_Legacy0_EnableFRAM()
{
	
		FC_CAL_Bit_Low(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

}

void FCD_SPI_Legacy0_DisableFRAM()
{
	
		FC_CAL_Bit_High(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

}



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_2__PORT0, LCD_2__BIT0);
00A2  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_2__PORT1, LCD_2__BIT1);
00A3  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_2__PORT2, LCD_2__BIT2);
00A4  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_2__PORT3, LCD_2__BIT3);
00A5  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_2__PORT4, LCD_2__RS);
00A6  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_2__PORT5, LCD_2__E);
00A7  1086  	BCF gbl_portb,1

		pt = ((in >> 4) & 0x0f);
00A8  0E46  	SWAPF FCD_LCDDis_00065_arg_in, W
00A9  390F  	ANDLW 0x0F
00AA  00C8  	MOVWF FCD_LCDDis_00065_1_pt
00AB  300F  	MOVLW 0x0F
00AC  05C8  	ANDWF FCD_LCDDis_00065_1_pt, F

		if (pt & 0x01)
00AD  1848  	BTFSC FCD_LCDDis_00065_1_pt,0

		    FC_CAL_Bit_High(LCD_2__PORT0, LCD_2__BIT0);
00AE  1506  	BSF gbl_portb,2

		if (pt & 0x02)
00AF  18C8  	BTFSC FCD_LCDDis_00065_1_pt,1

		    FC_CAL_Bit_High(LCD_2__PORT1, LCD_2__BIT1);
00B0  1586  	BSF gbl_portb,3

		if (pt & 0x04)
00B1  1948  	BTFSC FCD_LCDDis_00065_1_pt,2

		    FC_CAL_Bit_High(LCD_2__PORT2, LCD_2__BIT2);
00B2  1606  	BSF gbl_portb,4

		if (pt & 0x08)
00B3  19C8  	BTFSC FCD_LCDDis_00065_1_pt,3

		    FC_CAL_Bit_High(LCD_2__PORT3, LCD_2__BIT3);
00B4  1686  	BSF gbl_portb,5

		if (mask)
00B5  08C7  	MOVF FCD_LCDDis_00065_arg_mask, F
00B6  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_2__PORT4, LCD_2__RS);
00B7  1406  	BSF gbl_portb,0

		LCD_2__DELAY;
00B8  300A  	MOVLW 0x0A
00B9  00C9  	MOVWF delay_10us_00000_arg_del
00BA  2041  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_2__PORT5, LCD_2__E);
00BB  1486  	BSF gbl_portb,1

		LCD_2__DELAY;
00BC  300A  	MOVLW 0x0A
00BD  00C9  	MOVWF delay_10us_00000_arg_del
00BE  2041  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_2__PORT5, LCD_2__E);
00BF  1086  	BCF gbl_portb,1

		pt = (in & 0x0f);
00C0  300F  	MOVLW 0x0F
00C1  0546  	ANDWF FCD_LCDDis_00065_arg_in, W
00C2  00C8  	MOVWF FCD_LCDDis_00065_1_pt

		LCD_2__DELAY;
00C3  300A  	MOVLW 0x0A
00C4  00C9  	MOVWF delay_10us_00000_arg_del
00C5  2041  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_2__PORT0, LCD_2__BIT0);
00C6  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_2__PORT1, LCD_2__BIT1);
00C7  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_2__PORT2, LCD_2__BIT2);
00C8  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_2__PORT3, LCD_2__BIT3);
00C9  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_2__PORT4, LCD_2__RS);
00CA  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_2__PORT5, LCD_2__E);
00CB  1086  	BCF gbl_portb,1

		if (pt & 0x01)
00CC  1848  	BTFSC FCD_LCDDis_00065_1_pt,0

		    FC_CAL_Bit_High(LCD_2__PORT0, LCD_2__BIT0);
00CD  1506  	BSF gbl_portb,2

		if (pt & 0x02)
00CE  18C8  	BTFSC FCD_LCDDis_00065_1_pt,1

		    FC_CAL_Bit_High(LCD_2__PORT1, LCD_2__BIT1);
00CF  1586  	BSF gbl_portb,3

		if (pt & 0x04)
00D0  1948  	BTFSC FCD_LCDDis_00065_1_pt,2

		    FC_CAL_Bit_High(LCD_2__PORT2, LCD_2__BIT2);
00D1  1606  	BSF gbl_portb,4

		if (pt & 0x08)
00D2  19C8  	BTFSC FCD_LCDDis_00065_1_pt,3

		    FC_CAL_Bit_High(LCD_2__PORT3, LCD_2__BIT3);
00D3  1686  	BSF gbl_portb,5

		if (mask)
00D4  08C7  	MOVF FCD_LCDDis_00065_arg_mask, F
00D5  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_2__PORT4, LCD_2__RS);
00D6  1406  	BSF gbl_portb,0

		LCD_2__DELAY;
00D7  300A  	MOVLW 0x0A
00D8  00C9  	MOVWF delay_10us_00000_arg_del
00D9  2041  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_2__PORT5, LCD_2__E);
00DA  1486  	BSF gbl_portb,1

		LCD_2__DELAY;
00DB  300A  	MOVLW 0x0A
00DC  00C9  	MOVWF delay_10us_00000_arg_del
00DD  2041  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_2__PORT5, LCD_2__E);
00DE  1086  	BCF gbl_portb,1

		LCD_2__DELAY;
00DF  300A  	MOVLW 0x0A
00E0  00C9  	MOVWF delay_10us_00000_arg_del
00E1  2041  	CALL delay_10us_00000


}
00E2  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_2__PORT0, LCD_2__TRIS0, LCD_2__BIT0);
01E7  1683  	BSF STATUS, RP0
01E8  1303  	BCF STATUS, RP1
01E9  1106  	BCF gbl_trisb,2
01EA  1283  	BCF STATUS, RP0
01EB  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low_DDR(LCD_2__PORT1, LCD_2__TRIS1, LCD_2__BIT1);
01EC  1683  	BSF STATUS, RP0
01ED  1186  	BCF gbl_trisb,3
01EE  1283  	BCF STATUS, RP0
01EF  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low_DDR(LCD_2__PORT2, LCD_2__TRIS2, LCD_2__BIT2);
01F0  1683  	BSF STATUS, RP0
01F1  1206  	BCF gbl_trisb,4
01F2  1283  	BCF STATUS, RP0
01F3  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_2__PORT3, LCD_2__TRIS3, LCD_2__BIT3);
01F4  1683  	BSF STATUS, RP0
01F5  1286  	BCF gbl_trisb,5
01F6  1283  	BCF STATUS, RP0
01F7  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low_DDR(LCD_2__PORT4, LCD_2__TRIS4, LCD_2__RS);
01F8  1683  	BSF STATUS, RP0
01F9  1006  	BCF gbl_trisb,0
01FA  1283  	BCF STATUS, RP0
01FB  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low_DDR(LCD_2__PORT5, LCD_2__TRIS5, LCD_2__E);
01FC  1683  	BSF STATUS, RP0
01FD  1086  	BCF gbl_trisb,1
01FE  1283  	BCF STATUS, RP0
01FF  1086  	BCF gbl_portb,1


		Wdt_Delay_Ms(12);
0200  300C  	MOVLW 0x0C
0201  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
0202  205F  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
0203  3033  	MOVLW 0x33
0204  00C6  	MOVWF FCD_LCDDis_00065_arg_in
0205  01C7  	CLRF FCD_LCDDis_00065_arg_mask
0206  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
0207  3002  	MOVLW 0x02
0208  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
0209  205F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
020A  3033  	MOVLW 0x33
020B  00C6  	MOVWF FCD_LCDDis_00065_arg_in
020C  01C7  	CLRF FCD_LCDDis_00065_arg_mask
020D  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
020E  3002  	MOVLW 0x02
020F  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
0210  205F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
0211  3032  	MOVLW 0x32
0212  00C6  	MOVWF FCD_LCDDis_00065_arg_in
0213  01C7  	CLRF FCD_LCDDis_00065_arg_mask
0214  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
0215  3002  	MOVLW 0x02
0216  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
0217  205F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
0218  302C  	MOVLW 0x2C
0219  00C6  	MOVWF FCD_LCDDis_00065_arg_in
021A  01C7  	CLRF FCD_LCDDis_00065_arg_mask
021B  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
021C  3002  	MOVLW 0x02
021D  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
021E  205F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
021F  3006  	MOVLW 0x06
0220  00C6  	MOVWF FCD_LCDDis_00065_arg_in
0221  01C7  	CLRF FCD_LCDDis_00065_arg_mask
0222  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
0223  3002  	MOVLW 0x02
0224  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
0225  205F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
0226  300C  	MOVLW 0x0C
0227  00C6  	MOVWF FCD_LCDDis_00065_arg_in
0228  01C7  	CLRF FCD_LCDDis_00065_arg_mask
0229  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
022A  3002  	MOVLW 0x02
022B  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
022C  205F  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
022D  3001  	MOVLW 0x01
022E  00C6  	MOVWF FCD_LCDDis_00065_arg_in
022F  01C7  	CLRF FCD_LCDDis_00065_arg_mask
0230  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
0231  3002  	MOVLW 0x02
0232  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
0233  205F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0234  3002  	MOVLW 0x02
0235  00C6  	MOVWF FCD_LCDDis_00065_arg_in
0236  01C7  	CLRF FCD_LCDDis_00065_arg_mask
0237  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
0238  3002  	MOVLW 0x02
0239  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
023A  205F  	CALL Wdt_Delay__0003E


}
023B  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
01D6  3001  	MOVLW 0x01
01D7  1283  	BCF STATUS, RP0
01D8  1303  	BCF STATUS, RP1
01D9  00C6  	MOVWF FCD_LCDDis_00065_arg_in
01DA  01C7  	CLRF FCD_LCDDis_00065_arg_mask
01DB  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
01DC  3002  	MOVLW 0x02
01DD  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
01DE  205F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
01DF  3002  	MOVLW 0x02
01E0  00C6  	MOVWF FCD_LCDDis_00065_arg_in
01E1  01C7  	CLRF FCD_LCDDis_00065_arg_mask
01E2  20A2  	CALL FCD_LCDDis_00065

		Wdt_Delay_Ms(2);
01E3  3002  	MOVLW 0x02
01E4  00C6  	MOVWF Wdt_Delay__0003E_arg_delay
01E5  205F  	CALL Wdt_Delay__0003E


}
01E6  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)
{
	
	  #if (LCD_2__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_2__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_2__ROWCNT == 4)
		if (y==0)
			y=0x80;
		else if (y==1)
			y=0xc0;

		#if (LCD_2__COLCNT == 16)
			else if (y==2)
				y=0x90;
			else
				y=0xd0;
		#endif

		#if (LCD_2__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)
{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
			Number = 0 - Number;
		}

		tmp_int = Number;
		if (Number >= 10000)
		{
			tmp_byte = tmp_int / 10000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10000;
				tmp_byte--;
			}
		}
		if (Number >= 1000)
		{
			tmp_byte = tmp_int / 1000;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 1000;
				tmp_byte--;
			}
		}
		if (Number >= 100)
		{
			tmp_byte = tmp_int / 100;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 100;
				tmp_byte--;
			}
		}
		if (Number >= 10)
		{
			tmp_byte = tmp_int / 10;
			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);

			while (tmp_byte > 0)
			{
				tmp_int = tmp_int - 10;
				tmp_byte--;
			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);

}

void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)
{
	
		MX_UINT8 idx = 0;

		for (idx=0; idx<MSZ_String; idx++)
		{
			if (String[idx] == 0)
			{
				break;
			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
		}

}

void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_2__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_2__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_2__ROWCNT == 4)
			#if (LCD_2__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_2__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_radio_tx_init()

{

	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
014B  30FD  	MOVLW 0xFD
014C  1683  	BSF STATUS, RP0
014D  1303  	BCF STATUS, RP1
014E  0507  	ANDWF gbl_trisc, W
014F  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
0150  30FD  	MOVLW 0xFD
0151  1283  	BCF STATUS, RP0
0152  0507  	ANDWF gbl_portc, W
0153  0087  	MOVWF gbl_portc


	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
0154  30FB  	MOVLW 0xFB
0155  1683  	BSF STATUS, RP0
0156  0507  	ANDWF gbl_trisc, W
0157  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
0158  30FB  	MOVLW 0xFB
0159  1283  	BCF STATUS, RP0
015A  0507  	ANDWF gbl_portc, W
015B  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 8 us
	delay_us(8);
015C  3008  	MOVLW 0x08
015D  00C6  	MOVWF delay_us_00000_arg_del
015E  2010  	CALL delay_us_00000


	//Comment:
	//setup_retr_reg(0x04)=0x00

	//W_setup_retr_reg
	//Calculation:
	//  spi_mosi = 0b00100100
	FCV_SPI_MOSI = 36;
015F  3024  	MOVLW 0x24
0160  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0161  0843  	MOVF gbl_FCV_SPI_MOSI, W
0162  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0163  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x00
	FCV_SPI_MOSI = 0x00;
0164  01C3  	CLRF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0165  0843  	MOVF gbl_FCV_SPI_MOSI, W
0166  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0167  205B  	CALL FCD_SPI_Le_00052


	//Comment:
	//setup_aw_reg(0x03)=0x03

	//W_setup_aw_reg
	//Calculation:
	//  spi_mosi = 0b00100011
	FCV_SPI_MOSI = 35;
0168  3023  	MOVLW 0x23
0169  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
016A  0843  	MOVF gbl_FCV_SPI_MOSI, W
016B  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
016C  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x03
	FCV_SPI_MOSI = 0x03;
016D  3003  	MOVLW 0x03
016E  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
016F  0843  	MOVF gbl_FCV_SPI_MOSI, W
0170  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0171  205B  	CALL FCD_SPI_Le_00052


	//Comment:
	//rf_setup_reg(0x06)=0E

	//W_rf_setup_reg
	//Calculation:
	//  spi_mosi = 0b00100110
	FCV_SPI_MOSI = 38;
0172  3026  	MOVLW 0x26
0173  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0174  0843  	MOVF gbl_FCV_SPI_MOSI, W
0175  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0176  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x0E
	FCV_SPI_MOSI = 0x0E;
0177  300E  	MOVLW 0x0E
0178  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0179  0843  	MOVF gbl_FCV_SPI_MOSI, W
017A  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
017B  205B  	CALL FCD_SPI_Le_00052


	//Comment:
	//rf_ch_reg(0x05)=09

	//W_rf_ch_reg
	//Calculation:
	//  spi_mosi = 0b00100101
	FCV_SPI_MOSI = 37;
017C  3025  	MOVLW 0x25
017D  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
017E  0843  	MOVF gbl_FCV_SPI_MOSI, W
017F  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0180  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x09
	FCV_SPI_MOSI = 0x09;
0181  3009  	MOVLW 0x09
0182  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0183  0843  	MOVF gbl_FCV_SPI_MOSI, W
0184  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0185  205B  	CALL FCD_SPI_Le_00052


	//Comment:
	//en_aa_reg(0x01)=00

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100001
	FCV_SPI_MOSI = 33;
0186  3021  	MOVLW 0x21
0187  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0188  0843  	MOVF gbl_FCV_SPI_MOSI, W
0189  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
018A  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x00
	FCV_SPI_MOSI = 0x00;
018B  01C3  	CLRF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
018C  0843  	MOVF gbl_FCV_SPI_MOSI, W
018D  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
018E  205B  	CALL FCD_SPI_Le_00052


	//Comment:
	//config_reg(0x00)=0x78

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;
018F  3020  	MOVLW 0x20
0190  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0191  0843  	MOVF gbl_FCV_SPI_MOSI, W
0192  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0193  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x78
	FCV_SPI_MOSI = 0x78;
0194  3078  	MOVLW 0x78
0195  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0196  0843  	MOVF gbl_FCV_SPI_MOSI, W
0197  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0198  205B  	CALL FCD_SPI_Le_00052


	//Comment:
	//set_txrx_add
	//tx_addr_reg(0x10)

	//W_tx_addr_reg
	//Calculation:
	//  spi_mosi = 0b00110000
	FCV_SPI_MOSI = 48;
0199  3030  	MOVLW 0x30
019A  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
019B  0843  	MOVF gbl_FCV_SPI_MOSI, W
019C  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
019D  205B  	CALL FCD_SPI_Le_00052


	//Loop
	//Loop: Loop 5 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<5; FCLV_LOOP1++)
019E  01C4  	CLRF gbl_FCLV_LOOP1
019F        label8
019F  3005  	MOVLW 0x05
01A0  0244  	SUBWF gbl_FCLV_LOOP1, W
01A1  1803  	BTFSC STATUS,C
01A2  29AA  	GOTO	label9
01A8  0AC4  	INCF gbl_FCLV_LOOP1, F
01A9  299F  	GOTO	label8
01AA        label9

	{

		//data
		//Calculation:
		//  spi_mosi = 0x99
		FCV_SPI_MOSI = 0x99;
01A3  3099  	MOVLW 0x99
01A4  00C3  	MOVWF gbl_FCV_SPI_MOSI


		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
01A5  0843  	MOVF gbl_FCV_SPI_MOSI, W
01A6  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
01A7  205B  	CALL FCD_SPI_Le_00052



	}

	//Comment:
	//set_txrx_add
	//rx_addr_p0_reg(0x0A)

	//W_tx_addr_reg
	//Calculation:
	//  spi_mosi = 0b00101010
	FCV_SPI_MOSI = 42;
01AA  302A  	MOVLW 0x2A
01AB  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
01AC  0843  	MOVF gbl_FCV_SPI_MOSI, W
01AD  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
01AE  205B  	CALL FCD_SPI_Le_00052


	//Loop
	//Loop: Loop 5 times
	for (FCLV_LOOP2=0; FCLV_LOOP2<5; FCLV_LOOP2++)
01AF  01C5  	CLRF gbl_FCLV_LOOP2
01B0        label10
01B0  3005  	MOVLW 0x05
01B1  0245  	SUBWF gbl_FCLV_LOOP2, W
01B2  1803  	BTFSC STATUS,C
01B3  29BB  	GOTO	label11
01B9  0AC5  	INCF gbl_FCLV_LOOP2, F
01BA  29B0  	GOTO	label10
01BB        label11

	{

		//data
		//Calculation:
		//  spi_mosi = 0x99
		FCV_SPI_MOSI = 0x99;
01B4  3099  	MOVLW 0x99
01B5  00C3  	MOVWF gbl_FCV_SPI_MOSI


		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
01B6  0843  	MOVF gbl_FCV_SPI_MOSI, W
01B7  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
01B8  205B  	CALL FCD_SPI_Le_00052



	}

	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
01BB  30FB  	MOVLW 0xFB
01BC  1683  	BSF STATUS, RP0
01BD  0507  	ANDWF gbl_trisc, W
01BE  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
01BF  30FB  	MOVLW 0xFB
01C0  1283  	BCF STATUS, RP0
01C1  0507  	ANDWF gbl_portc, W
01C2  00C6  	MOVWF CompTempVar2188
01C3  3004  	MOVLW 0x04
01C4  0446  	IORWF CompTempVar2188, W
01C5  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);
01C6  3008  	MOVLW 0x08
01C7  00C6  	MOVWF delay_us_00000_arg_del
01C8  2010  	CALL delay_us_00000


	//Call Macro
	//Call Macro: flush_tx_rx()
	FCM_flush_tx_rx();
01C9  207D  	CALL FCM_flush__00053


}
01CA  0008  	RETURN



void FCM_flush_tx_rx()

{

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
007D  30FB  	MOVLW 0xFB
007E  1683  	BSF STATUS, RP0
007F  1303  	BCF STATUS, RP1
0080  0507  	ANDWF gbl_trisc, W
0081  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
0082  30FB  	MOVLW 0xFB
0083  1283  	BCF STATUS, RP0
0084  0507  	ANDWF gbl_portc, W
0085  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 8 us
	delay_us(8);
0086  3008  	MOVLW 0x08
0087  00C6  	MOVWF delay_us_00000_arg_del
0088  2010  	CALL delay_us_00000


	//Comment:
	//flush_tx

	//command
	//Calculation:
	//  spi_mosi = 0xE1
	FCV_SPI_MOSI = 0xE1;
0089  30E1  	MOVLW 0xE1
008A  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
008B  0843  	MOVF gbl_FCV_SPI_MOSI, W
008C  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
008D  205B  	CALL FCD_SPI_Le_00052


	//Comment:
	//flush_rx

	//command
	//Calculation:
	//  spi_mosi = 0xE2
	FCV_SPI_MOSI = 0xE2;
008E  30E2  	MOVLW 0xE2
008F  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0090  0843  	MOVF gbl_FCV_SPI_MOSI, W
0091  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0092  205B  	CALL FCD_SPI_Le_00052


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0093  30FB  	MOVLW 0xFB
0094  1683  	BSF STATUS, RP0
0095  0507  	ANDWF gbl_trisc, W
0096  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0097  30FB  	MOVLW 0xFB
0098  1283  	BCF STATUS, RP0
0099  0507  	ANDWF gbl_portc, W
009A  00C6  	MOVWF CompTempVar2189
009B  3004  	MOVLW 0x04
009C  0446  	IORWF CompTempVar2189, W
009D  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);
009E  3008  	MOVLW 0x08
009F  00C6  	MOVWF delay_us_00000_arg_del
00A0  2010  	CALL delay_us_00000


}
00A1  0008  	RETURN



void FCM_radio_senddata()

{

	//Call Macro
	//Call Macro: flush_tx_rx()
	FCM_flush_tx_rx();
00E3  207D  	CALL FCM_flush__00053


	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
00E4  30FB  	MOVLW 0xFB
00E5  1683  	BSF STATUS, RP0
00E6  0507  	ANDWF gbl_trisc, W
00E7  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
00E8  30FB  	MOVLW 0xFB
00E9  1283  	BCF STATUS, RP0
00EA  0507  	ANDWF gbl_portc, W
00EB  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 8 us
	delay_us(8);
00EC  3008  	MOVLW 0x08
00ED  00C6  	MOVWF delay_us_00000_arg_del
00EE  2010  	CALL delay_us_00000


	//Comment:
	//config_reg(0x00)=0x7A

	//W_setup_retr_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;
00EF  3020  	MOVLW 0x20
00F0  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
00F1  0843  	MOVF gbl_FCV_SPI_MOSI, W
00F2  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
00F3  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x7A
	FCV_SPI_MOSI = 0x7A;
00F4  307A  	MOVLW 0x7A
00F5  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
00F6  0843  	MOVF gbl_FCV_SPI_MOSI, W
00F7  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
00F8  205B  	CALL FCD_SPI_Le_00052


	//Comment:
	//write_tx_payload

	//command
	//Calculation:
	//  spi_mosi = 0xA0
	FCV_SPI_MOSI = 0xA0;
00F9  30A0  	MOVLW 0xA0
00FA  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
00FB  0843  	MOVF gbl_FCV_SPI_MOSI, W
00FC  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
00FD  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0xF0
	FCV_SPI_MOSI = 0xF0;
00FE  30F0  	MOVLW 0xF0
00FF  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0100  0843  	MOVF gbl_FCV_SPI_MOSI, W
0101  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0102  205B  	CALL FCD_SPI_Le_00052


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0103  30FB  	MOVLW 0xFB
0104  1683  	BSF STATUS, RP0
0105  0507  	ANDWF gbl_trisc, W
0106  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0107  30FB  	MOVLW 0xFB
0108  1283  	BCF STATUS, RP0
0109  0507  	ANDWF gbl_portc, W
010A  00C6  	MOVWF CompTempVar2190
010B  3004  	MOVLW 0x04
010C  0446  	IORWF CompTempVar2190, W
010D  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);
010E  3008  	MOVLW 0x08
010F  00C6  	MOVWF delay_us_00000_arg_del
0110  2010  	CALL delay_us_00000


	//CE
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
0111  30FD  	MOVLW 0xFD
0112  1683  	BSF STATUS, RP0
0113  0507  	ANDWF gbl_trisc, W
0114  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFD) | 0x02;
0115  30FD  	MOVLW 0xFD
0116  1283  	BCF STATUS, RP0
0117  0507  	ANDWF gbl_portc, W
0118  00C6  	MOVWF CompTempVar2191
0119  3002  	MOVLW 0x02
011A  0446  	IORWF CompTempVar2191, W
011B  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFD;

	//Delay
	//Delay: 60 us
	delay_us(60);
011C  303C  	MOVLW 0x3C
011D  00C6  	MOVWF delay_us_00000_arg_del
011E  2010  	CALL delay_us_00000


	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
011F  30FD  	MOVLW 0xFD
0120  1683  	BSF STATUS, RP0
0121  0507  	ANDWF gbl_trisc, W
0122  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
0123  30FD  	MOVLW 0xFD
0124  1283  	BCF STATUS, RP0
0125  0507  	ANDWF gbl_portc, W
0126  0087  	MOVWF gbl_portc


	//Comment:
	//config_reg(0x00)=0x38

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
0127  30FB  	MOVLW 0xFB
0128  1683  	BSF STATUS, RP0
0129  0507  	ANDWF gbl_trisc, W
012A  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
012B  30FB  	MOVLW 0xFB
012C  1283  	BCF STATUS, RP0
012D  0507  	ANDWF gbl_portc, W
012E  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 8 us
	delay_us(8);
012F  3008  	MOVLW 0x08
0130  00C6  	MOVWF delay_us_00000_arg_del
0131  2010  	CALL delay_us_00000


	//W_setup_retr_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;
0132  3020  	MOVLW 0x20
0133  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0134  0843  	MOVF gbl_FCV_SPI_MOSI, W
0135  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
0136  205B  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x38
	FCV_SPI_MOSI = 0x38;
0137  3038  	MOVLW 0x38
0138  00C3  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0139  0843  	MOVF gbl_FCV_SPI_MOSI, W
013A  00C6  	MOVWF FCD_SPI_Le_00052_arg_Char
013B  205B  	CALL FCD_SPI_Le_00052


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
013C  30FB  	MOVLW 0xFB
013D  1683  	BSF STATUS, RP0
013E  0507  	ANDWF gbl_trisc, W
013F  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0140  30FB  	MOVLW 0xFB
0141  1283  	BCF STATUS, RP0
0142  0507  	ANDWF gbl_portc, W
0143  00C6  	MOVWF CompTempVar2192
0144  3004  	MOVLW 0x04
0145  0446  	IORWF CompTempVar2192, W
0146  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);
0147  3008  	MOVLW 0x08
0148  00C6  	MOVWF delay_us_00000_arg_del
0149  2010  	CALL delay_us_00000


}
014A  0008  	RETURN



void FCM_radio_rx_init()
{

	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);

	//Comment:
	//config_reg(0x00)=0x38

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x38
	FCV_SPI_MOSI = 0x38;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//setup_retr_reg(0x04)=0x00

	//W_setup_retr_reg
	//Calculation:
	//  spi_mosi = 0b00100100
	FCV_SPI_MOSI = 36;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x00
	FCV_SPI_MOSI = 0x00;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//setup_aw_reg(0x03)=0x03

	//W_setup_aw_reg
	//Calculation:
	//  spi_mosi = 0b00100011
	FCV_SPI_MOSI = 35;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x03
	FCV_SPI_MOSI = 0x03;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//rf_setup_reg(0x06)=0E

	//W_rf_setup_reg
	//Calculation:
	//  spi_mosi = 0b00100110
	FCV_SPI_MOSI = 38;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x0E
	FCV_SPI_MOSI = 0x0E;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//rf_ch_reg(0x05)=09

	//W_rf_ch_reg
	//Calculation:
	//  spi_mosi = 0b00100101
	FCV_SPI_MOSI = 37;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x09
	FCV_SPI_MOSI = 0x09;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//en_aa_reg(0x01)=00

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100001
	FCV_SPI_MOSI = 33;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x00
	FCV_SPI_MOSI = 0x00;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//rx_pw_p0_reg(0x11)=01

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00110001
	FCV_SPI_MOSI = 49;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x01
	FCV_SPI_MOSI = 0x01;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//config_reg(0x00)=0x3B

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x3B
	FCV_SPI_MOSI = 0x3B;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//set_txrx_add
	//tx_addr_reg(0x10)

	//W_tx_addr_reg
	//Calculation:
	//  spi_mosi = 0b00110000
	FCV_SPI_MOSI = 48;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Loop
	//Loop: Loop 5 times
	for (FCLV_LOOP3=0; FCLV_LOOP3<5; FCLV_LOOP3++)
	{

		//data
		//Calculation:
		//  spi_mosi = 0xE7
		FCV_SPI_MOSI = 0xE7;

		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);


	}

	//Comment:
	//set_txrx_add
	//rx_addr_p0_reg(0x0A)

	//W_tx_addr_reg
	//Calculation:
	//  spi_mosi = 0b00101010
	FCV_SPI_MOSI = 42;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Loop
	//Loop: Loop 5 times
	for (FCLV_LOOP4=0; FCLV_LOOP4<5; FCLV_LOOP4++)
	{

		//data
		//Calculation:
		//  spi_mosi = 0xE7
		FCV_SPI_MOSI = 0xE7;

		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);


	}

	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);

	//Call Macro
	//Call Macro: flush_tx_rx()
	FCM_flush_tx_rx();

}



void main()

{
	//Initialization
	adcon1 = 0x07;
023C  3007  	MOVLW 0x07
023D  1683  	BSF STATUS, RP0
023E  1303  	BCF STATUS, RP1
023F  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0240  30C0  	MOVLW 0xC0
0241  0081  	MOVWF gbl_option_reg



	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
0242  21E7  	CALL FCD_LCDDis_00066


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0243  21D6  	CALL FCD_LCDDis_00067


	//Call Component Macro
	//Call Component Macro: SPI_Init()
	FCD_SPI_Legacy0_SPI_Init();
0244  21CB  	CALL FCD_SPI_Le_00059


	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
0245  30FD  	MOVLW 0xFD
0246  1683  	BSF STATUS, RP0
0247  0507  	ANDWF gbl_trisc, W
0248  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
0249  30FD  	MOVLW 0xFD
024A  1283  	BCF STATUS, RP0
024B  0507  	ANDWF gbl_portc, W
024C  0087  	MOVWF gbl_portc


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
024D  30FB  	MOVLW 0xFB
024E  1683  	BSF STATUS, RP0
024F  0507  	ANDWF gbl_trisc, W
0250  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0251  30FB  	MOVLW 0xFB
0252  1283  	BCF STATUS, RP0
0253  0507  	ANDWF gbl_portc, W
0254  00C6  	MOVWF CompTempVar2236
0255  3004  	MOVLW 0x04
0256  0446  	IORWF CompTempVar2236, W
0257  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Call Macro
	//Call Macro: radio_tx_init()
	FCM_radio_tx_init();
0258  214B  	CALL FCM_radio__00051


	//Loop
	//Loop: While 1
	while (1)
0259        label12
025A  2A59  	GOTO	label12

	{

		//Call Macro
		//Call Macro: radio_senddata()
		FCM_radio_senddata();
0259  20E3  	CALL FCM_radio__00054



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0287  1283  	BCF STATUS, RP0
0288  1303  	BCF STATUS, RP1
0289  0E36  	SWAPF Int1BContext+D'2', W
028A  0084  	MOVWF FSR
028B  0E35  	SWAPF Int1BContext+D'1', W
028C  008A  	MOVWF PCLATH
028D  0E34  	SWAPF Int1BContext, W
028E  0083  	MOVWF STATUS
028F  0EFF  	SWAPF Int1Context, F
0290  0E7F  	SWAPF Int1Context, W
0291  0009  	RETFIE





/*********************************************************************
 *                  Flowcode CAL SPI File
 *
 * File: PIC_CAL_SPI.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 * 150911 | BR | Updated variables with typedef alternatives
 * 011211 | BR | Converted to new dynamic defines mechanism
 *
 */


//When using hardware SPI channels override port and pin conns with FCD conn definitions
//Only overwrite CS pin defines when using SPI in slave mode on a hardware channel
//Also sort out postscale and prescale options for hardware channels
#ifdef MX_SPI_REF1
	#if MX_SPI_CHANNEL_1 > 0
		#undef MX_SPI_MOSI_PIN_1
		#undef MX_SPI_MOSI_PORT_1
		#undef MX_SPI_MOSI_TRIS_1
		#undef MX_SPI_MISO_PIN_1
		#undef MX_SPI_MISO_PORT_1
		#undef MX_SPI_MISO_TRIS_1
		#undef MX_SPI_SCK_PIN_1
		#undef MX_SPI_SCK_PORT_1
		#undef MX_SPI_SCK_TRIS_1
		#undef MX_SPI_CS_PIN_1
		#undef MX_SPI_CS_PORT_1
		#undef MX_SPI_CS_TRIS_1

		#if MX_SPI_PR_SCALE_1 == 4
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	0
		#endif
		#if MX_SPI_PR_SCALE_1 == 16
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	1
		#endif
		#if MX_SPI_PR_SCALE_1 == 64
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_1 == 1
		#define MX_SPI_MOSI_PIN_1		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 2
		#define MX_SPI_MOSI_PIN_1		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 3
		#define MX_SPI_MOSI_PIN_1		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 4
		#define MX_SPI_MOSI_PIN_1		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF2
	#if MX_SPI_CHANNEL_2 > 0
		#undef MX_SPI_MOSI_PIN_2
		#undef MX_SPI_MOSI_PORT_2
		#undef MX_SPI_MOSI_TRIS_2
		#undef MX_SPI_MISO_PIN_2
		#undef MX_SPI_MISO_PORT_2
		#undef MX_SPI_MISO_TRIS_2
		#undef MX_SPI_SCK_PIN_2
		#undef MX_SPI_SCK_PORT_2
		#undef MX_SPI_SCK_TRIS_2
		#undef MX_SPI_CS_PIN_2
		#undef MX_SPI_CS_PORT_2
		#undef MX_SPI_CS_TRIS_2

		#if MX_SPI_PR_SCALE_2 == 4
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	0
		#endif
		#if MX_SPI_PR_SCALE_2 == 16
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	1
		#endif
		#if MX_SPI_PR_SCALE_2 == 64
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_2 == 1
		#define MX_SPI_MOSI_PIN_2		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 2
		#define MX_SPI_MOSI_PIN_2		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 3
		#define MX_SPI_MOSI_PIN_2		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 4
		#define MX_SPI_MOSI_PIN_2		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF3
	#if MX_SPI_CHANNEL_3 > 0
		#undef MX_SPI_MOSI_PIN_3
		#undef MX_SPI_MOSI_PORT_3
		#undef MX_SPI_MOSI_TRIS_3
		#undef MX_SPI_MISO_PIN_3
		#undef MX_SPI_MISO_PORT_3
		#undef MX_SPI_MISO_TRIS_3
		#undef MX_SPI_SCK_PIN_3
		#undef MX_SPI_SCK_PORT_3
		#undef MX_SPI_SCK_TRIS_3
		#undef MX_SPI_CS_PIN_3
		#undef MX_SPI_CS_PORT_3
		#undef MX_SPI_CS_TRIS_3

		#if MX_SPI_PR_SCALE_3 == 4
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	0
		#endif
		#if MX_SPI_PR_SCALE_3 == 16
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	1
		#endif
		#if MX_SPI_PR_SCALE_3 == 64
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_3 == 1
		#define MX_SPI_MOSI_PIN_3		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 2
		#define MX_SPI_MOSI_PIN_3		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 3
		#define MX_SPI_MOSI_PIN_3		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 4
		#define MX_SPI_MOSI_PIN_3		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF4
	#if MX_SPI_CHANNEL_4 > 0
		#undef MX_SPI_MOSI_PIN_4
		#undef MX_SPI_MOSI_PORT_4
		#undef MX_SPI_MOSI_TRIS_4
		#undef MX_SPI_MISO_PIN_4
		#undef MX_SPI_MISO_PORT_4
		#undef MX_SPI_MISO_TRIS_4
		#undef MX_SPI_SCK_PIN_4
		#undef MX_SPI_SCK_PORT_4
		#undef MX_SPI_SCK_TRIS_4
		#undef MX_SPI_CS_PIN_4
		#undef MX_SPI_CS_PORT_4
		#undef MX_SPI_CS_TRIS_4

		#if MX_SPI_PR_SCALE_4 == 4
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	0
		#endif
		#if MX_SPI_PR_SCALE_4 == 16
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	1
		#endif
		#if MX_SPI_PR_SCALE_4 == 64
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_4 == 1
		#define MX_SPI_MOSI_PIN_4		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 2
		#define MX_SPI_MOSI_PIN_4		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 3
		#define MX_SPI_MOSI_PIN_4		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 4
		#define MX_SPI_MOSI_PIN_4		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_4_SS_TRIS
	#endif
#endif

#define MX_SPI_CHANNEL_X		CAL_APPEND(MX_SPI_CHANNEL_, MX_SPI_NUM)
#define MX_SPI_MOSI_PIN_X		CAL_APPEND(MX_SPI_MOSI_PIN_, MX_SPI_NUM)
#define MX_SPI_MOSI_PORT_X		CAL_APPEND(MX_SPI_MOSI_PORT_, MX_SPI_NUM)
#define MX_SPI_MOSI_TRIS_X		CAL_APPEND(MX_SPI_MOSI_TRIS_, MX_SPI_NUM)
#define MX_SPI_MISO_PIN_X		CAL_APPEND(MX_SPI_MISO_PIN_, MX_SPI_NUM)
#define MX_SPI_MISO_PORT_X		CAL_APPEND(MX_SPI_MISO_PORT_, MX_SPI_NUM)
#define MX_SPI_MISO_TRIS_X		CAL_APPEND(MX_SPI_MISO_TRIS_, MX_SPI_NUM)
#define MX_SPI_SCK_PIN_X		CAL_APPEND(MX_SPI_SCK_PIN_, MX_SPI_NUM)
#define MX_SPI_SCK_PORT_X		CAL_APPEND(MX_SPI_SCK_PORT_, MX_SPI_NUM)
#define MX_SPI_SCK_TRIS_X		CAL_APPEND(MX_SPI_SCK_TRIS_, MX_SPI_NUM)
#define MX_SPI_CS_PIN_X			CAL_APPEND(MX_SPI_CS_PIN_, MX_SPI_NUM)
#define MX_SPI_CS_PORT_X		CAL_APPEND(MX_SPI_CS_PORT_, MX_SPI_NUM)
#define MX_SPI_CS_TRIS_X		CAL_APPEND(MX_SPI_CS_TRIS_, MX_SPI_NUM)
#define MX_SPI_BMODE_X			CAL_APPEND(MX_SPI_BMODE_, MX_SPI_NUM)
#define MX_SPI_PR_SCALE_X		CAL_APPEND(MX_SPI_PR_SCALE_, MX_SPI_NUM)
#define MX_SPI_PO_SCALE_X		CAL_APPEND(MX_SPI_PO_SCALE_, MX_SPI_NUM)
#define MX_SPI_INT_X			CAL_APPEND(MX_SPI_INT_, MX_SPI_NUM)


//Function Prototypes
CALFUNCTION(void, FC_CAL_SPI_Master_Init_, (void));
CALFUNCTION(void, FC_CAL_SPI_Master_Uninit_, (void));
CALFUNCTION(MX_UINT8, FC_CAL_SPI_Master_Byte_, (MX_UINT8 DataOut));

CALFUNCTION(void, FC_CAL_SPI_Slave_Init_, (void));
CALFUNCTION(void, FC_CAL_SPI_Slave_Uninit_, (void));
CALFUNCTION(void, FC_CAL_SPI_Slave_SetTxData_, (MX_UINT8 Data));
CALFUNCTION(MX_UINT8, FC_CAL_SPI_Slave_GetRxData_, (void));


#if (MX_SPI_CHANNEL_X == 0)
  #ifndef MX_SPI_SW_DEL
    #define MX_SPI_SW_DEL
	MX_UINT8 SPI_SW_DELAY = 1;
  #endif
#endif


//Bus Mode - Bit0=CPOL, Bit1=CPHA, Bit2=CSMP
//CPOL - Clock Polarity - Idle State of the clock 0=0, 1=1
//CPHA - Clock Phase - Clock Edge 0=leading edge, 1=trailing edge
//CSMP - Input Data Bit Sample Phase
//CRAT - SPI Clock Rate 0=1/4, 1=1/16, 2=1/64


//Ensure SSPCON register is defined correctly
#ifndef SSPCON
  #ifdef SSPCON1
	#define sspcon	sspcon1
  #else
	#ifdef SSP1CON1
		#define sspcon	ssp1con1
	#endif
  #endif
#endif
#ifndef SSPBUF
  #ifdef SSP1BUF
	#define sspbuf	ssp1buf
  #endif
#endif

#ifndef SSP2CON
	#ifdef SSP2CON1
		#define ssp2con	ssp2con1
	#endif
#endif




CALFUNCTION(void, FC_CAL_SPI_Master_Init_, (void))

{
	FC_CAL_Bit_High_DDR (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_TRIS_X, MX_SPI_MOSI_PIN_X);		// MOSI pin is default high
006A  1683  	BSF STATUS, RP0
006B  1303  	BCF STATUS, RP1
006C  1287  	BCF gbl_trisc,5
006D  1283  	BCF STATUS, RP0
006E  1687  	BSF gbl_portc,5

	FC_CAL_Bit_In_DDR   (MX_SPI_MISO_PORT_X, MX_SPI_MISO_TRIS_X, MX_SPI_MISO_PIN_X);		// MISO pin is a input
006F  1683  	BSF STATUS, RP0
0070  1607  	BSF gbl_trisc,4


	#if (MX_SPI_BMODE_X & 0x02)
		FC_CAL_Bit_Low_DDR  (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);		// Clock pin is default low
0071  1187  	BCF gbl_trisc,3
0072  1283  	BCF STATUS, RP0
0073  1187  	BCF gbl_portc,3

	#else
		FC_CAL_Bit_High_DDR (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);		// Clock pin is default high
	#endif

	#if (MX_SPI_CHANNEL_X == 1)
	 #ifndef MX_SPI_1
	 	#error "SPI channel 1 not available on this device"
	 #else
		sspcon 		 = MX_SPI_PR_SCALE_X & 0x03;			//Assign Clock Prescaler
0074  3001  	MOVLW 0x01
0075  0094  	MOVWF gbl_sspcon

		sspcon.CKP 	 = MX_SPI_BMODE_X & 0x01;				//Assign Clock Polarity
0076  1214  	BCF gbl_sspcon,4

		sspstat.CKE  = (MX_SPI_BMODE_X & 0x02) >> 1;		//Assign Clock Phase
0077  1683  	BSF STATUS, RP0
0078  1714  	BSF gbl_sspstat,6

		sspstat.SMP  = (MX_SPI_BMODE_X & 0x04) >> 2;		//Assign Input Data Phase
0079  1794  	BSF gbl_sspstat,7

		sspcon.SSPEN = 1;									//Activate SPI Peripheral
007A  1283  	BCF STATUS, RP0
007B  1694  	BSF gbl_sspcon,5

	 #endif
	#endif

	#if (MX_SPI_CHANNEL_X == 2)
	 #ifndef MX_SPI_2
	 	#error "SPI channel 2 not available on this device"
	 #else

	  #ifdef MX_SPI_2_REMAPPABLE
		RPINR21 = 3; 										//MISO - RB0 - RP3
		RPOR4 = 9;											//MOSI - RB1 - RP4
		RPOR5 = 10;											//SCK  - RB2 - RP5
	  #endif

		ssp2con 	  = MX_SPI_PR_SCALE_X & 0x03;		//Assign Clock Prescaler
		ssp2con.CKP   = MX_SPI_BMODE_X & 0x01;			//Assign Clock Polarity
		ssp2stat.CKE  = (MX_SPI_BMODE_X & 0x02) >> 1;	//Assign Clock Phase
		ssp2stat.SMP  = (MX_SPI_BMODE_X & 0x04) >> 2;	//Assign Input Data Phase
		ssp2con.SSPEN = 1;									//Activate SPI Peripheral
	 #endif
	#endif
}
007C  0008  	RETURN



CALFUNCTION(void, FC_CAL_SPI_Master_Uninit_, (void))
{
	#if (MX_SPI_CHANNEL_X == 1)
		sspcon = 0;
	#endif

	#if (MX_SPI_CHANNEL_X == 2)
		ssp2con = 0;
    #endif

	//Reset Pins to Inputs
	FC_CAL_Bit_In_DDR (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_TRIS_X, MX_SPI_MOSI_PIN_X);
	FC_CAL_Bit_In_DDR (MX_SPI_MISO_PORT_X, MX_SPI_MISO_TRIS_X, MX_SPI_MISO_PIN_X);
	FC_CAL_Bit_In_DDR (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);
}


CALFUNCTION(MX_UINT8, FC_CAL_SPI_Master_Byte_, (MX_UINT8 DataOut))

{
	MX_UINT8 retVal = 0;
004F  01C8  	CLRF FC_CAL_SPI_00058_1_retVal


	#if (MX_SPI_CHANNEL_X == 0)
		SPI_SW_DELAY = MX_SPI_PR_SCALE_X;

		MX_UINT8 idx;
		for (idx = 0; idx < 8; idx++)
		{
			retVal = retVal << 1;

			#if ((MX_SPI_BMODE_X & 0x02) == 0x00)									//CKE = 0; Set SCK active before data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			if (DataOut & 0x80)														//Test Data bit
				FC_CAL_Bit_High(MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_PIN_X);				//Set SDO bit
			else
				FC_CAL_Bit_Low (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_PIN_X);				//Clear SDO bit

			delay_us(SPI_SW_DELAY);

			#if ((MX_SPI_BMODE_X & 0x02) == 0x02)									//CKE = 1; Set SCK active after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#else																	//CKE = 0; Set SCK idle after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			#if ((MX_SPI_BMODE_X & 0x04) == 0)										//Sample at the middle of period
				if(FC_CAL_Bit_In(MX_SPI_MISO_PORT_X, MX_SPI_MISO_PIN_X))
					retVal = retVal | 0x01;
				else
					retVal = retVal & 0xFE;
			#endif

			delay_us(SPI_SW_DELAY);

			#if ((MX_SPI_BMODE_X & 0x02) == 0x02)									//CKE = 1; Set SCK idle to complete cycle																	//CKE = 0; Set SCK idle after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			#if ((MX_SPI_BMODE_X & 0x04) == 0x04)									//Sample at the end of period
				if(FC_CAL_Bit_In(MX_SPI_MISO_PORT_X, MX_SPI_MISO_PIN_X))
					retVal = retVal | 0x01;
				else
					retVal = retVal & 0xFE;
			#endif

			DataOut = DataOut << 1;							//Move to next data bit
		}
    #endif

	#if (MX_SPI_CHANNEL_X == 1)
		sspbuf = DataOut;					//Send outgoing byte
0050  0847  	MOVF FC_CAL_SPI_00058_arg_DataOut, W
0051  0093  	MOVWF gbl_sspbuf

		while ((sspstat & 0x01) == 0);		//Wait until sspbuf is empty
0052        label6
0052  1683  	BSF STATUS, RP0
0053  1C14  	BTFSS gbl_sspstat,0
0054  2852  	GOTO	label6

		retVal = sspbuf;					//Collect incoming byte
0055  1283  	BCF STATUS, RP0
0056  0813  	MOVF gbl_sspbuf, W
0057  00C8  	MOVWF FC_CAL_SPI_00058_1_retVal

	#endif

	#if (MX_SPI_CHANNEL_X == 2)
		ssp2buf = DataOut;					//Send outgoing byte
		while ((ssp2stat & 0x01) == 0);		//Wait until sspbuf is empty
		retVal = ssp2buf;					//Collect incoming byte
	#endif

	return (retVal);
0058  0848  	MOVF FC_CAL_SPI_00058_1_retVal, W
0059  00C9  	MOVWF CompTempVarRet2194

}
005A  0008  	RETURN






CALFUNCTION(void, FC_CAL_SPI_Slave_Init_, (void))
{

}

CALFUNCTION(void, FC_CAL_SPI_Slave_Uninit_, (void))
{

}

CALFUNCTION(void, FC_CAL_SPI_Slave_SetTxData_, (MX_UINT8 Data))
{

}

CALFUNCTION(MX_UINT8, FC_CAL_SPI_Slave_GetRxData_, (void))
{

}



////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2A5B  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2A87  	GOTO	interrupt
0010        delay_us_00000
0010        ; { delay_us ; function begin
0010        label1
0010  0000  	NOP
0011  0000  	NOP
0012  0BC6  	DECFSZ delay_us_00000_arg_del, F
0013  2810  	GOTO	label1
0014  0008  	RETURN
0015        ; } delay_us function end

0015        delay_ms_00000
0015        ; { delay_ms ; function begin
0015  08C8  	MOVF delay_ms_00000_arg_del, F
0016  1D03  	BTFSS STATUS,Z
0017  2819  	GOTO	label2
0018  0008  	RETURN
0019        label2
0019  30F9  	MOVLW 0xF9
001A        label3
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  0000  	NOP
0026  0000  	NOP
0027  0000  	NOP
0028  0000  	NOP
0029  0000  	NOP
002A  3EFF  	ADDLW 0xFF
002B  1D03  	BTFSS STATUS,Z
002C  281A  	GOTO	label3
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0000  	NOP
003A  0000  	NOP
003B  0000  	NOP
003C  0000  	NOP
003D  0000  	NOP
003E  0BC8  	DECFSZ delay_ms_00000_arg_del, F
003F  2819  	GOTO	label2
0040  0008  	RETURN
0041        ; } delay_ms function end

0041        delay_10us_00000
0041        ; { delay_10us ; function begin
0041  08C9  	MOVF delay_10us_00000_arg_del, F
0042  1D03  	BTFSS STATUS,Z
0043  2845  	GOTO	label4
0044  0008  	RETURN
0045        label4
0045  3009  	MOVLW 0x09
0046        label5
0046  0000  	NOP
0047  3EFF  	ADDLW 0xFF
0048  1D03  	BTFSS STATUS,Z
0049  2846  	GOTO	label5
004A  0000  	NOP
004B  0000  	NOP
004C  0BC9  	DECFSZ delay_10us_00000_arg_del, F
004D  2845  	GOTO	label4
004E  0008  	RETURN
004F        ; } delay_10us function end


025B        _startup
025B  30D5  	MOVLW 0xD5
025C  1283  	BCF STATUS, RP0
025D  1303  	BCF STATUS, RP1
025E  00A0  	MOVWF gbl_14_LSR
025F  30C4  	MOVLW 0xC4
0260  00A1  	MOVWF gbl_14_LSR+D'1'
0261  30BB  	MOVLW 0xBB
0262  00A2  	MOVWF gbl_14_LSR+D'2'
0263  30DC  	MOVLW 0xDC
0264  00A3  	MOVWF gbl_14_LSR+D'3'
0265  01A4  	CLRF gbl_15_gbl_aSig
0266  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0267  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0268  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0269  01A8  	CLRF gbl_15_gbl_bSig
026A  01A9  	CLRF gbl_15_gbl_bSig+D'1'
026B  01AA  	CLRF gbl_15_gbl_bSig+D'2'
026C  01AB  	CLRF gbl_15_gbl_bSig+D'3'
026D  01AC  	CLRF gbl_15_gbl_zSig
026E  01AD  	CLRF gbl_15_gbl_zSig+D'1'
026F  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0270  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0271  01BC  	CLRF gbl_15_gbl_aExp
0272  01BD  	CLRF gbl_15_gbl_bExp
0273  01B7  	CLRF gbl_15_gbl_zExp
0274  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0275  01BE  	CLRF gbl_15_gbl_aSign
0276  01BF  	CLRF gbl_15_gbl_bSign
0277  01C0  	CLRF gbl_15_gbl_zSign
0278  01C1  	CLRF gbl_15_gbl_zSigZero
0279  01B0  	CLRF gbl_15_gbl_ret
027A  01B1  	CLRF gbl_15_gbl_ret+D'1'
027B  01B2  	CLRF gbl_15_gbl_ret+D'2'
027C  01B3  	CLRF gbl_15_gbl_ret+D'3'
027D  01BA  	CLRF gbl_float_rounding_mode
027E  01BB  	CLRF gbl_float_exception_flags
027F  01B9  	CLRF gbl_float_detect_tininess

0284  118A  	BCF PCLATH,3
0285  120A  	BCF PCLATH,4
0286  2A3C  	GOTO	main

2007  3F3A  	DW 0x3F3A
