;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
004F  01D2  	CLRF Wdt_Delay__0003E_1_i
0050        label6
0050  0851  	MOVF Wdt_Delay__0003E_arg_delay, W
0051  0252  	SUBWF Wdt_Delay__0003E_1_i, W
0052  1803  	BTFSC STATUS,C
0058  0AD2  	INCF Wdt_Delay__0003E_1_i, F
0059  2850  	GOTO	label6

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0054  0064  	CLRWDT

        delay_ms(1);
0055  3001  	MOVLW 0x01
0056  00D3  	MOVWF delay_ms_00000_arg_del
0057  2010  	CALL delay_ms_00000

    }
}
0053  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\RF\RF_flowcode\873_RF_RX.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Wednesday, July 29, 2020 11:04:13
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_own_spi();
void FCM_rf_begin();
void FCM_set_writing_pipe0();
void FCM_rf_setpa();
void FCM_open_writing_pipe_address();
void FCM_radio_writepayload();
void FCM_tx_flush();
void FCM_set_reading_pipe0();
void FCM_open_reading_pipe_address();
void FCM_radio_readpayload();
void FCM_rx_flush();
void FCM_own_spi_read();
void FCM_activate();
void FCM_status_read();


//Variable declarations
#define FCV_TRUE (1)
#define FCV_FALSE (0)
MX_BOOL FCV_SPB4 = (1);
0538  1442  	BSF gbl_FCV_SPB4,0

MX_UINT8 FCV_SPI_IHAP = (0x0);
0539  01C3  	CLRF gbl_FCV_SPI_IHAP

MX_BOOL FCV_OSPI_OUT_BIT = (1);
053A  14C2  	BSF gbl_FCV_OSPI_OUT_BIT,1

MX_BOOL FCV_SPB5 = (1);
053B  1542  	BSF gbl_FCV_SPB5,2

MX_BOOL FCV_SPB6 = (1);
053C  15C2  	BSF gbl_FCV_SPB6,3

MX_BOOL FCV_SPB7 = (1);
053D  1642  	BSF gbl_FCV_SPB7,4

MX_UINT8 FCV_RF_CONFIG;
MX_UINT8 FCV_OSPI_DATAIN = (0xff);
053E  30FF  	MOVLW 0xFF
053F  00C5  	MOVWF gbl_FCV_OSPI_DATAIN

MX_UINT8 FCV_OSPI_DATAOUT = (0xff);
0540  30FF  	MOVLW 0xFF
0541  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT

MX_BOOL FCV_OSPI_IN_BIT = (1);
0542  16C2  	BSF gbl_FCV_OSPI_IN_BIT,5

MX_BOOL FCV_SPB0 = (1);
0543  1742  	BSF gbl_FCV_SPB0,6

MX_BOOL FCV_SPB1;
MX_BOOL FCV_SPB2 = (1);
0544  1447  	BSF gbl_FCV_SPB2,0

MX_BOOL FCV_SPB3 = (1);
0545  14C7  	BSF gbl_FCV_SPB3,1


MX_UINT8 FCLV_LOOP1;
MX_UINT8 FCLV_LOOP2;
MX_UINT8 FCLV_LOOP3;
MX_UINT8 FCLV_LOOP4;



//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_4__PORT0    portb
	#define LCD_4__PORT1    portb
	#define LCD_4__PORT2    portb
	#define LCD_4__PORT3    portb
	#define LCD_4__PORT4    portb
	#define LCD_4__PORT5    portb
	#define LCD_4__TRIS0    trisb
	#define LCD_4__TRIS1    trisb
	#define LCD_4__TRIS2    trisb
	#define LCD_4__TRIS3    trisb
	#define LCD_4__TRIS4    trisb
	#define LCD_4__TRIS5    trisb
	#define LCD_4__BIT0    	2
	#define LCD_4__BIT1    	3
	#define LCD_4__BIT2    	4
	#define LCD_4__BIT3    	5
	#define LCD_4__RS      	0
	#define LCD_4__E       	1
	#define LCD_4__ROWCNT	4
	#define LCD_4__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_4__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_4__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_4__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_4__DELAY
	  #define LCD_4__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_4__PORT0, LCD_4__BIT0);
005A  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_4__PORT1, LCD_4__BIT1);
005B  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_4__PORT2, LCD_4__BIT2);
005C  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_4__PORT3, LCD_4__BIT3);
005D  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_4__PORT4, LCD_4__RS);
005E  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_4__PORT5, LCD_4__E);
005F  1086  	BCF gbl_portb,1

		pt = ((in >> 4) & 0x0f);
0060  0E56  	SWAPF FCD_LCDDis_0005F_arg_in, W
0061  390F  	ANDLW 0x0F
0062  00D8  	MOVWF FCD_LCDDis_0005F_1_pt
0063  300F  	MOVLW 0x0F
0064  05D8  	ANDWF FCD_LCDDis_0005F_1_pt, F

		if (pt & 0x01)
0065  1858  	BTFSC FCD_LCDDis_0005F_1_pt,0

		    FC_CAL_Bit_High(LCD_4__PORT0, LCD_4__BIT0);
0066  1506  	BSF gbl_portb,2

		if (pt & 0x02)
0067  18D8  	BTFSC FCD_LCDDis_0005F_1_pt,1

		    FC_CAL_Bit_High(LCD_4__PORT1, LCD_4__BIT1);
0068  1586  	BSF gbl_portb,3

		if (pt & 0x04)
0069  1958  	BTFSC FCD_LCDDis_0005F_1_pt,2

		    FC_CAL_Bit_High(LCD_4__PORT2, LCD_4__BIT2);
006A  1606  	BSF gbl_portb,4

		if (pt & 0x08)
006B  19D8  	BTFSC FCD_LCDDis_0005F_1_pt,3

		    FC_CAL_Bit_High(LCD_4__PORT3, LCD_4__BIT3);
006C  1686  	BSF gbl_portb,5

		if (mask)
006D  08D7  	MOVF FCD_LCDDis_0005F_arg_mask, F
006E  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_4__PORT4, LCD_4__RS);
006F  1406  	BSF gbl_portb,0

		LCD_4__DELAY;
0070  300A  	MOVLW 0x0A
0071  00D9  	MOVWF delay_10us_00000_arg_del
0072  203C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_4__PORT5, LCD_4__E);
0073  1486  	BSF gbl_portb,1

		LCD_4__DELAY;
0074  300A  	MOVLW 0x0A
0075  00D9  	MOVWF delay_10us_00000_arg_del
0076  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_4__PORT5, LCD_4__E);
0077  1086  	BCF gbl_portb,1

		pt = (in & 0x0f);
0078  300F  	MOVLW 0x0F
0079  0556  	ANDWF FCD_LCDDis_0005F_arg_in, W
007A  00D8  	MOVWF FCD_LCDDis_0005F_1_pt

		LCD_4__DELAY;
007B  300A  	MOVLW 0x0A
007C  00D9  	MOVWF delay_10us_00000_arg_del
007D  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_4__PORT0, LCD_4__BIT0);
007E  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_4__PORT1, LCD_4__BIT1);
007F  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_4__PORT2, LCD_4__BIT2);
0080  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_4__PORT3, LCD_4__BIT3);
0081  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_4__PORT4, LCD_4__RS);
0082  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_4__PORT5, LCD_4__E);
0083  1086  	BCF gbl_portb,1

		if (pt & 0x01)
0084  1858  	BTFSC FCD_LCDDis_0005F_1_pt,0

		    FC_CAL_Bit_High(LCD_4__PORT0, LCD_4__BIT0);
0085  1506  	BSF gbl_portb,2

		if (pt & 0x02)
0086  18D8  	BTFSC FCD_LCDDis_0005F_1_pt,1

		    FC_CAL_Bit_High(LCD_4__PORT1, LCD_4__BIT1);
0087  1586  	BSF gbl_portb,3

		if (pt & 0x04)
0088  1958  	BTFSC FCD_LCDDis_0005F_1_pt,2

		    FC_CAL_Bit_High(LCD_4__PORT2, LCD_4__BIT2);
0089  1606  	BSF gbl_portb,4

		if (pt & 0x08)
008A  19D8  	BTFSC FCD_LCDDis_0005F_1_pt,3

		    FC_CAL_Bit_High(LCD_4__PORT3, LCD_4__BIT3);
008B  1686  	BSF gbl_portb,5

		if (mask)
008C  08D7  	MOVF FCD_LCDDis_0005F_arg_mask, F
008D  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_4__PORT4, LCD_4__RS);
008E  1406  	BSF gbl_portb,0

		LCD_4__DELAY;
008F  300A  	MOVLW 0x0A
0090  00D9  	MOVWF delay_10us_00000_arg_del
0091  203C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_4__PORT5, LCD_4__E);
0092  1486  	BSF gbl_portb,1

		LCD_4__DELAY;
0093  300A  	MOVLW 0x0A
0094  00D9  	MOVWF delay_10us_00000_arg_del
0095  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_4__PORT5, LCD_4__E);
0096  1086  	BCF gbl_portb,1

		LCD_4__DELAY;
0097  300A  	MOVLW 0x0A
0098  00D9  	MOVWF delay_10us_00000_arg_del
0099  203C  	CALL delay_10us_00000


}
009A  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_4__PORT0, LCD_4__TRIS0, LCD_4__BIT0);
0465  1683  	BSF STATUS, RP0
0466  1303  	BCF STATUS, RP1
0467  1106  	BCF gbl_trisb,2
0468  1283  	BCF STATUS, RP0
0469  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low_DDR(LCD_4__PORT1, LCD_4__TRIS1, LCD_4__BIT1);
046A  1683  	BSF STATUS, RP0
046B  1186  	BCF gbl_trisb,3
046C  1283  	BCF STATUS, RP0
046D  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low_DDR(LCD_4__PORT2, LCD_4__TRIS2, LCD_4__BIT2);
046E  1683  	BSF STATUS, RP0
046F  1206  	BCF gbl_trisb,4
0470  1283  	BCF STATUS, RP0
0471  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_4__PORT3, LCD_4__TRIS3, LCD_4__BIT3);
0472  1683  	BSF STATUS, RP0
0473  1286  	BCF gbl_trisb,5
0474  1283  	BCF STATUS, RP0
0475  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low_DDR(LCD_4__PORT4, LCD_4__TRIS4, LCD_4__RS);
0476  1683  	BSF STATUS, RP0
0477  1006  	BCF gbl_trisb,0
0478  1283  	BCF STATUS, RP0
0479  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low_DDR(LCD_4__PORT5, LCD_4__TRIS5, LCD_4__E);
047A  1683  	BSF STATUS, RP0
047B  1086  	BCF gbl_trisb,1
047C  1283  	BCF STATUS, RP0
047D  1086  	BCF gbl_portb,1


		Wdt_Delay_Ms(12);
047E  300C  	MOVLW 0x0C
047F  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
0480  204F  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
0481  3033  	MOVLW 0x33
0482  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
0483  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
0484  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0485  3002  	MOVLW 0x02
0486  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
0487  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
0488  3033  	MOVLW 0x33
0489  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
048A  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
048B  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
048C  3002  	MOVLW 0x02
048D  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
048E  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
048F  3032  	MOVLW 0x32
0490  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
0491  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
0492  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0493  3002  	MOVLW 0x02
0494  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
0495  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
0496  302C  	MOVLW 0x2C
0497  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
0498  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
0499  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
049A  3002  	MOVLW 0x02
049B  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
049C  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
049D  3006  	MOVLW 0x06
049E  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
049F  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
04A0  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
04A1  3002  	MOVLW 0x02
04A2  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
04A3  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
04A4  300C  	MOVLW 0x0C
04A5  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
04A6  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
04A7  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
04A8  3002  	MOVLW 0x02
04A9  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
04AA  204F  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
04AB  3001  	MOVLW 0x01
04AC  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
04AD  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
04AE  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
04AF  3002  	MOVLW 0x02
04B0  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
04B1  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
04B2  3002  	MOVLW 0x02
04B3  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
04B4  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
04B5  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
04B6  3002  	MOVLW 0x02
04B7  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
04B8  204F  	CALL Wdt_Delay__0003E


}
04B9  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
0454  3001  	MOVLW 0x01
0455  1283  	BCF STATUS, RP0
0456  1303  	BCF STATUS, RP1
0457  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
0458  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
0459  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
045A  3002  	MOVLW 0x02
045B  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
045C  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
045D  3002  	MOVLW 0x02
045E  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
045F  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
0460  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0461  3002  	MOVLW 0x02
0462  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
0463  204F  	CALL Wdt_Delay__0003E


}
0464  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_4__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_4__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_4__ROWCNT == 4)
		if (y==0)
02C7  08D0  	MOVF FCD_LCDDis_00064_arg_y, F
02C8  1D03  	BTFSS STATUS,Z
02C9  2ACD  	GOTO	label43
02CD        label43

			y=0x80;
02CA  3080  	MOVLW 0x80
02CB  00D0  	MOVWF FCD_LCDDis_00064_arg_y

		else if (y==1)
02CC  2ADC  	GOTO	label46
02CD  0350  	DECF FCD_LCDDis_00064_arg_y, W
02CE  1D03  	BTFSS STATUS,Z
02CF  2AD3  	GOTO	label44
02D3        label44

			y=0xc0;
02D0  30C0  	MOVLW 0xC0
02D1  00D0  	MOVWF FCD_LCDDis_00064_arg_y


		#if (LCD_4__COLCNT == 16)
			else if (y==2)
02D2  2ADC  	GOTO	label46
02D3  0850  	MOVF FCD_LCDDis_00064_arg_y, W
02D4  3A02  	XORLW 0x02
02D5  1D03  	BTFSS STATUS,Z
02D6  2ADA  	GOTO	label45
02DA        label45

				y=0x90;
02D7  3090  	MOVLW 0x90
02D8  00D0  	MOVWF FCD_LCDDis_00064_arg_y

			else
02D9  2ADC  	GOTO	label46
02DC        label46

				y=0xd0;
02DA  30D0  	MOVLW 0xD0
02DB  00D0  	MOVWF FCD_LCDDis_00064_arg_y

		#endif

		#if (LCD_4__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
02DC  084F  	MOVF FCD_LCDDis_00064_arg_x, W
02DD  0750  	ADDWF FCD_LCDDis_00064_arg_y, W
02DE  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
02DF  01D7  	CLRF FCD_LCDDis_0005F_arg_mask
02E0  205A  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
02E1  3002  	MOVLW 0x02
02E2  00D1  	MOVWF Wdt_Delay__0003E_arg_delay
02E3  204F  	CALL Wdt_Delay__0003E


}
02E4  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)

{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
0366  1FCD  	BTFSS FCD_LCDDis_00065_arg_Number+D'1',7
0367  2B75  	GOTO	label50
0375        label50

		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
0368  302D  	MOVLW 0x2D
0369  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
036A  3010  	MOVLW 0x10
036B  00D7  	MOVWF FCD_LCDDis_0005F_arg_mask
036C  205A  	CALL FCD_LCDDis_0005F

			Number = 0 - Number;
036D  084C  	MOVF FCD_LCDDis_00065_arg_Number, W
036E  3C00  	SUBLW 0x00
036F  00D1  	MOVWF CompTempVar2228
0370  09CD  	COMF FCD_LCDDis_00065_arg_Number+D'1', F
0371  1803  	BTFSC STATUS,C
0372  0ACD  	INCF FCD_LCDDis_00065_arg_Number+D'1', F
0373  0851  	MOVF CompTempVar2228, W
0374  00CC  	MOVWF FCD_LCDDis_00065_arg_Number

		}

		tmp_int = Number;
0375  084C  	MOVF FCD_LCDDis_00065_arg_Number, W
0376  00CE  	MOVWF FCD_LCDDis_00065_1_tmp_int
0377  084D  	MOVF FCD_LCDDis_00065_arg_Number+D'1', W
0378  00CF  	MOVWF FCD_LCDDis_00065_1_tmp_int+D'1'

		if (Number >= 10000)
0379  3027  	MOVLW 0x27
037A  024D  	SUBWF FCD_LCDDis_00065_arg_Number+D'1', W
037B  1D03  	BTFSS STATUS,Z
037C  2B7F  	GOTO	label51
037D  3010  	MOVLW 0x10
037E  024C  	SUBWF FCD_LCDDis_00065_arg_Number, W
037F        label51
037F  1C03  	BTFSS STATUS,C
0380  2BAD  	GOTO	label55
0381  1BCD  	BTFSC FCD_LCDDis_00065_arg_Number+D'1',7
0382  2BAD  	GOTO	label55

		{
			tmp_byte = tmp_int / 10000;
0383  01D5  	CLRF CompTempVar2231
0384  084E  	MOVF FCD_LCDDis_00065_1_tmp_int, W
0385  00D1  	MOVWF __div_16_1_00003_arg_a
0386  084F  	MOVF FCD_LCDDis_00065_1_tmp_int+D'1', W
0387  00D2  	MOVWF __div_16_1_00003_arg_a+D'1'
0388  1FCF  	BTFSS FCD_LCDDis_00065_1_tmp_int+D'1',7
0389  2B90  	GOTO	label52
038A  09D1  	COMF __div_16_1_00003_arg_a, F
038B  09D2  	COMF __div_16_1_00003_arg_a+D'1', F
038C  0AD1  	INCF __div_16_1_00003_arg_a, F
038D  1903  	BTFSC STATUS,Z
038E  0AD2  	INCF __div_16_1_00003_arg_a+D'1', F
038F  0AD5  	INCF CompTempVar2231, F
0390        label52
0390  3010  	MOVLW 0x10
0391  00D3  	MOVWF __div_16_1_00003_arg_b
0392  3027  	MOVLW 0x27
0393  00D4  	MOVWF __div_16_1_00003_arg_b+D'1'
0394  209B  	CALL __div_16_1_00003
0395  085A  	MOVF CompTempVarRet214, W
0396  00D0  	MOVWF FCD_LCDDis_00065_1_tmp_byte
0397  1C55  	BTFSS CompTempVar2231,0
0398  2B9B  	GOTO	label53
0399  09D0  	COMF FCD_LCDDis_00065_1_tmp_byte, F
039A  0AD0  	INCF FCD_LCDDis_00065_1_tmp_byte, F
039B        label53

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
039B  0850  	MOVF FCD_LCDDis_00065_1_tmp_byte, W
039C  3E30  	ADDLW 0x30
039D  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
039E  3010  	MOVLW 0x10
039F  00D7  	MOVWF FCD_LCDDis_0005F_arg_mask
03A0  205A  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
03A1        label54
03A1  0850  	MOVF FCD_LCDDis_00065_1_tmp_byte, W
03A2  3C00  	SUBLW 0x00
03A3  1803  	BTFSC STATUS,C
03A4  2BAD  	GOTO	label55
03AC  2BA1  	GOTO	label54
03AD        label55

			{
				tmp_int = tmp_int - 10000;
03A5  3010  	MOVLW 0x10
03A6  02CE  	SUBWF FCD_LCDDis_00065_1_tmp_int, F
03A7  3027  	MOVLW 0x27
03A8  1C03  	BTFSS STATUS,C
03A9  3028  	MOVLW 0x28
03AA  02CF  	SUBWF FCD_LCDDis_00065_1_tmp_int+D'1', F

				tmp_byte--;
03AB  03D0  	DECF FCD_LCDDis_00065_1_tmp_byte, F

			}
		}
		if (Number >= 1000)
03AD  3003  	MOVLW 0x03
03AE  024D  	SUBWF FCD_LCDDis_00065_arg_Number+D'1', W
03AF  1D03  	BTFSS STATUS,Z
03B0  2BB3  	GOTO	label56
03B1  30E8  	MOVLW 0xE8
03B2  024C  	SUBWF FCD_LCDDis_00065_arg_Number, W
03B3        label56
03B3  1C03  	BTFSS STATUS,C
03B4  2BE3  	GOTO	label60
03B5  1BCD  	BTFSC FCD_LCDDis_00065_arg_Number+D'1',7
03B6  2BE3  	GOTO	label60

		{
			tmp_byte = tmp_int / 1000;
03B7  01D6  	CLRF CompTempVar2235
03B8  084E  	MOVF FCD_LCDDis_00065_1_tmp_int, W
03B9  00D1  	MOVWF __div_16_1_00003_arg_a
03BA  084F  	MOVF FCD_LCDDis_00065_1_tmp_int+D'1', W
03BB  00D2  	MOVWF __div_16_1_00003_arg_a+D'1'
03BC  1FCF  	BTFSS FCD_LCDDis_00065_1_tmp_int+D'1',7
03BD  2BC4  	GOTO	label57
03BE  09D1  	COMF __div_16_1_00003_arg_a, F
03BF  09D2  	COMF __div_16_1_00003_arg_a+D'1', F
03C0  0AD1  	INCF __div_16_1_00003_arg_a, F
03C1  1903  	BTFSC STATUS,Z
03C2  0AD2  	INCF __div_16_1_00003_arg_a+D'1', F
03C3  0AD6  	INCF CompTempVar2235, F
03C4        label57
03C4  30E8  	MOVLW 0xE8
03C5  00D3  	MOVWF __div_16_1_00003_arg_b
03C6  3003  	MOVLW 0x03
03C7  00D4  	MOVWF __div_16_1_00003_arg_b+D'1'
03C8  209B  	CALL __div_16_1_00003
03C9  085A  	MOVF CompTempVarRet214, W
03CA  00D5  	MOVWF CompTempVar2234
03CB  1C56  	BTFSS CompTempVar2235,0
03CC  2BCF  	GOTO	label58
03CD  09D5  	COMF CompTempVar2234, F
03CE  0AD5  	INCF CompTempVar2234, F
03CF        label58
03CF  0855  	MOVF CompTempVar2234, W
03D0  00D0  	MOVWF FCD_LCDDis_00065_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
03D1  0850  	MOVF FCD_LCDDis_00065_1_tmp_byte, W
03D2  3E30  	ADDLW 0x30
03D3  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
03D4  3010  	MOVLW 0x10
03D5  00D7  	MOVWF FCD_LCDDis_0005F_arg_mask
03D6  205A  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
03D7        label59
03D7  0850  	MOVF FCD_LCDDis_00065_1_tmp_byte, W
03D8  3C00  	SUBLW 0x00
03D9  1803  	BTFSC STATUS,C
03DA  2BE3  	GOTO	label60
03E2  2BD7  	GOTO	label59
03E3        label60

			{
				tmp_int = tmp_int - 1000;
03DB  30E8  	MOVLW 0xE8
03DC  02CE  	SUBWF FCD_LCDDis_00065_1_tmp_int, F
03DD  3003  	MOVLW 0x03
03DE  1C03  	BTFSS STATUS,C
03DF  3004  	MOVLW 0x04
03E0  02CF  	SUBWF FCD_LCDDis_00065_1_tmp_int+D'1', F

				tmp_byte--;
03E1  03D0  	DECF FCD_LCDDis_00065_1_tmp_byte, F

			}
		}
		if (Number >= 100)
03E3  084D  	MOVF FCD_LCDDis_00065_arg_Number+D'1', W
03E4  3A80  	XORLW 0x80
03E5  00D1  	MOVWF CompTempVar2238
03E6  3080  	MOVLW 0x80
03E7  0251  	SUBWF CompTempVar2238, W
03E8  1D03  	BTFSS STATUS,Z
03E9  2BEC  	GOTO	label61
03EA  3064  	MOVLW 0x64
03EB  024C  	SUBWF FCD_LCDDis_00065_arg_Number, W
03EC        label61
03EC  1C03  	BTFSS STATUS,C
03ED  2C18  	GOTO	label65

		{
			tmp_byte = tmp_int / 100;
03EE  01D6  	CLRF CompTempVar2240
03EF  084E  	MOVF FCD_LCDDis_00065_1_tmp_int, W
03F0  00D1  	MOVWF __div_16_1_00003_arg_a
03F1  084F  	MOVF FCD_LCDDis_00065_1_tmp_int+D'1', W
03F2  00D2  	MOVWF __div_16_1_00003_arg_a+D'1'
03F3  1FCF  	BTFSS FCD_LCDDis_00065_1_tmp_int+D'1',7
03F4  2BFB  	GOTO	label62
03F5  09D1  	COMF __div_16_1_00003_arg_a, F
03F6  09D2  	COMF __div_16_1_00003_arg_a+D'1', F
03F7  0AD1  	INCF __div_16_1_00003_arg_a, F
03F8  1903  	BTFSC STATUS,Z
03F9  0AD2  	INCF __div_16_1_00003_arg_a+D'1', F
03FA  0AD6  	INCF CompTempVar2240, F
03FB        label62
03FB  3064  	MOVLW 0x64
03FC  00D3  	MOVWF __div_16_1_00003_arg_b
03FD  01D4  	CLRF __div_16_1_00003_arg_b+D'1'
03FE  209B  	CALL __div_16_1_00003
03FF  085A  	MOVF CompTempVarRet214, W
0400  00D5  	MOVWF CompTempVar2239
0401  1C56  	BTFSS CompTempVar2240,0
0402  2C05  	GOTO	label63
0403  09D5  	COMF CompTempVar2239, F
0404  0AD5  	INCF CompTempVar2239, F
0405        label63
0405  0855  	MOVF CompTempVar2239, W
0406  00D0  	MOVWF FCD_LCDDis_00065_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0407  0850  	MOVF FCD_LCDDis_00065_1_tmp_byte, W
0408  3E30  	ADDLW 0x30
0409  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
040A  3010  	MOVLW 0x10
040B  00D7  	MOVWF FCD_LCDDis_0005F_arg_mask
040C  205A  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
040D        label64
040D  0850  	MOVF FCD_LCDDis_00065_1_tmp_byte, W
040E  3C00  	SUBLW 0x00
040F  1803  	BTFSC STATUS,C
0410  2C18  	GOTO	label65
0417  2C0D  	GOTO	label64
0418        label65

			{
				tmp_int = tmp_int - 100;
0411  3064  	MOVLW 0x64
0412  02CE  	SUBWF FCD_LCDDis_00065_1_tmp_int, F
0413  08CF  	MOVF FCD_LCDDis_00065_1_tmp_int+D'1', F
0414  1C03  	BTFSS STATUS,C
0415  03CF  	DECF FCD_LCDDis_00065_1_tmp_int+D'1', F

				tmp_byte--;
0416  03D0  	DECF FCD_LCDDis_00065_1_tmp_byte, F

			}
		}
		if (Number >= 10)
0418  084D  	MOVF FCD_LCDDis_00065_arg_Number+D'1', W
0419  3A80  	XORLW 0x80
041A  00D1  	MOVWF CompTempVar2243
041B  3080  	MOVLW 0x80
041C  0251  	SUBWF CompTempVar2243, W
041D  1D03  	BTFSS STATUS,Z
041E  2C21  	GOTO	label66
041F  300A  	MOVLW 0x0A
0420  024C  	SUBWF FCD_LCDDis_00065_arg_Number, W
0421        label66
0421  1C03  	BTFSS STATUS,C
0422  2C4D  	GOTO	label70

		{
			tmp_byte = tmp_int / 10;
0423  01D6  	CLRF CompTempVar2245
0424  084E  	MOVF FCD_LCDDis_00065_1_tmp_int, W
0425  00D1  	MOVWF __div_16_1_00003_arg_a
0426  084F  	MOVF FCD_LCDDis_00065_1_tmp_int+D'1', W
0427  00D2  	MOVWF __div_16_1_00003_arg_a+D'1'
0428  1FCF  	BTFSS FCD_LCDDis_00065_1_tmp_int+D'1',7
0429  2C30  	GOTO	label67
042A  09D1  	COMF __div_16_1_00003_arg_a, F
042B  09D2  	COMF __div_16_1_00003_arg_a+D'1', F
042C  0AD1  	INCF __div_16_1_00003_arg_a, F
042D  1903  	BTFSC STATUS,Z
042E  0AD2  	INCF __div_16_1_00003_arg_a+D'1', F
042F  0AD6  	INCF CompTempVar2245, F
0430        label67
0430  300A  	MOVLW 0x0A
0431  00D3  	MOVWF __div_16_1_00003_arg_b
0432  01D4  	CLRF __div_16_1_00003_arg_b+D'1'
0433  209B  	CALL __div_16_1_00003
0434  085A  	MOVF CompTempVarRet214, W
0435  00D5  	MOVWF CompTempVar2244
0436  1C56  	BTFSS CompTempVar2245,0
0437  2C3A  	GOTO	label68
0438  09D5  	COMF CompTempVar2244, F
0439  0AD5  	INCF CompTempVar2244, F
043A        label68
043A  0855  	MOVF CompTempVar2244, W
043B  00D0  	MOVWF FCD_LCDDis_00065_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
043C  0850  	MOVF FCD_LCDDis_00065_1_tmp_byte, W
043D  3E30  	ADDLW 0x30
043E  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
043F  3010  	MOVLW 0x10
0440  00D7  	MOVWF FCD_LCDDis_0005F_arg_mask
0441  205A  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
0442        label69
0442  0850  	MOVF FCD_LCDDis_00065_1_tmp_byte, W
0443  3C00  	SUBLW 0x00
0444  1803  	BTFSC STATUS,C
0445  2C4D  	GOTO	label70
044C  2C42  	GOTO	label69
044D        label70

			{
				tmp_int = tmp_int - 10;
0446  300A  	MOVLW 0x0A
0447  02CE  	SUBWF FCD_LCDDis_00065_1_tmp_int, F
0448  08CF  	MOVF FCD_LCDDis_00065_1_tmp_int+D'1', F
0449  1C03  	BTFSS STATUS,C
044A  03CF  	DECF FCD_LCDDis_00065_1_tmp_int+D'1', F

				tmp_byte--;
044B  03D0  	DECF FCD_LCDDis_00065_1_tmp_byte, F

			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);
044D  084E  	MOVF FCD_LCDDis_00065_1_tmp_int, W
044E  3E30  	ADDLW 0x30
044F  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
0450  3010  	MOVLW 0x10
0451  00D7  	MOVWF FCD_LCDDis_0005F_arg_mask
0452  205A  	CALL FCD_LCDDis_0005F


}
0453  0008  	RETURN


void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
034A  01D5  	CLRF FCD_LCDDis_00066_1_idx


		for (idx=0; idx<MSZ_String; idx++)
034B  01D5  	CLRF FCD_LCDDis_00066_1_idx
034C        label49
034C  0854  	MOVF FCD_LCDDis_00066_arg_MSZ_String, W
034D  0255  	SUBWF FCD_LCDDis_00066_1_idx, W
034E  1803  	BTFSC STATUS,C
0364  0AD5  	INCF FCD_LCDDis_00066_1_idx, F
0365  2B4C  	GOTO	label49

		{
			if (String[idx] == 0)
0350  1383  	BCF STATUS,IRP
0351  184D  	BTFSC FCD_LCDDis_00066_arg_String+D'1',0
0352  1783  	BSF STATUS,IRP
0353  084C  	MOVF FCD_LCDDis_00066_arg_String, W
0354  0755  	ADDWF FCD_LCDDis_00066_1_idx, W
0355  0084  	MOVWF FSR
0356  0880  	MOVF INDF, F
0357  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
0359  1383  	BCF STATUS,IRP
035A  184D  	BTFSC FCD_LCDDis_00066_arg_String+D'1',0
035B  1783  	BSF STATUS,IRP
035C  084C  	MOVF FCD_LCDDis_00066_arg_String, W
035D  0755  	ADDWF FCD_LCDDis_00066_1_idx, W
035E  0084  	MOVWF FSR
035F  0800  	MOVF INDF, W
0360  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
0361  3010  	MOVLW 0x10
0362  00D7  	MOVWF FCD_LCDDis_0005F_arg_mask
0363  205A  	CALL FCD_LCDDis_0005F

		}

}
034F  0008  	RETURN
0358  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)

{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_4__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_4__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_4__ROWCNT == 4)
			#if (LCD_4__COLCNT == 16)
				rowcount=16;
0333  3010  	MOVLW 0x10
0334  00CE  	MOVWF FCD_LCDDis_00069_1_rowcount

			#endif
			#if (LCD_4__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);
0335  01CF  	CLRF FCD_LCDDis_00064_arg_x
0336  084C  	MOVF FCD_LCDDis_00069_arg_Line, W
0337  00D0  	MOVWF FCD_LCDDis_00064_arg_y
0338  22C7  	CALL FCD_LCDDis_00064


		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
0339  01CD  	CLRF FCD_LCDDis_00069_1_count
033A        label47
033A  084E  	MOVF FCD_LCDDis_00069_1_rowcount, W
033B  024D  	SUBWF FCD_LCDDis_00069_1_count, W
033C  1803  	BTFSC STATUS,C
033D  2B45  	GOTO	label48
0343  0ACD  	INCF FCD_LCDDis_00069_1_count, F
0344  2B3A  	GOTO	label47
0345        label48

			FCD_LCDDisplay0_RawSend(' ', 0x10);
033E  3020  	MOVLW 0x20
033F  00D6  	MOVWF FCD_LCDDis_0005F_arg_in
0340  3010  	MOVLW 0x10
0341  00D7  	MOVWF FCD_LCDDis_0005F_arg_mask
0342  205A  	CALL FCD_LCDDis_0005F


		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);
0345  01CF  	CLRF FCD_LCDDis_00064_arg_x
0346  084C  	MOVF FCD_LCDDis_00069_arg_Line, W
0347  00D0  	MOVWF FCD_LCDDis_00064_arg_y
0348  22C7  	CALL FCD_LCDDis_00064


}
0349  0008  	RETURN


void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_own_spi()

{

	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
0137  30FB  	MOVLW 0xFB
0138  1683  	BSF STATUS, RP0
0139  1303  	BCF STATUS, RP1
013A  0507  	ANDWF gbl_trisc, W
013B  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
013C  30FB  	MOVLW 0xFB
013D  1283  	BCF STATUS, RP0
013E  0507  	ANDWF gbl_portc, W
013F  0087  	MOVWF gbl_portc


	//Output
	//Output: 1 -> C5
	trisc = trisc & 0xDF;
0140  30DF  	MOVLW 0xDF
0141  1683  	BSF STATUS, RP0
0142  0507  	ANDWF gbl_trisc, W
0143  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xDF) | 0x20;
0144  30DF  	MOVLW 0xDF
0145  1283  	BCF STATUS, RP0
0146  0507  	ANDWF gbl_portc, W
0147  00CC  	MOVWF CompTempVar2188
0148  3020  	MOVLW 0x20
0149  044C  	IORWF CompTempVar2188, W
014A  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xDF;

	//clk
	//Output: 0 -> C3
	trisc = trisc & 0xF7;
014B  30F7  	MOVLW 0xF7
014C  1683  	BSF STATUS, RP0
014D  0507  	ANDWF gbl_trisc, W
014E  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xF7) | 0x08;
	else
		portc = portc & 0xF7;
014F  30F7  	MOVLW 0xF7
0150  1283  	BCF STATUS, RP0
0151  0507  	ANDWF gbl_portc, W
0152  0087  	MOVWF gbl_portc


	//Calculation
	//Calculation:
	//  spi_ihap = 0
	FCV_SPI_IHAP = 0;
0153  01C3  	CLRF gbl_FCV_SPI_IHAP


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP2=0; FCLV_LOOP2<8; FCLV_LOOP2++)
0154  01C9  	CLRF gbl_FCLV_LOOP2
0155        label13
0155  3008  	MOVLW 0x08
0156  0249  	SUBWF gbl_FCLV_LOOP2, W
0157  1803  	BTFSC STATUS,C
0158  29D9  	GOTO	label23
01D7  0AC9  	INCF gbl_FCLV_LOOP2, F
01D8  2955  	GOTO	label13
01D9        label23

	{

		//Switch
		//Switch: spi_ihap?
		switch (FCV_SPI_IHAP)
0172  29D2  	GOTO	label22

		{
			case 1:
0159  0843  	MOVF gbl_FCV_SPI_IHAP, W
015A  3A01  	XORLW 0x01
015B  1903  	BTFSC STATUS,Z
015C  2973  	GOTO	label14
0173        label14

			{
				//Calculation
				//Calculation:
				//  spb1 = ospi_dataout AND 1
				FCV_SPB1 = FCV_OSPI_DATAOUT & 1;
0173  3001  	MOVLW 0x01
0174  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
0175  00CC  	MOVWF CompTempVar2189
0176  01CD  	CLRF CompTempVar2190
0177  08CC  	MOVF CompTempVar2189, F
0178  1D03  	BTFSS STATUS,Z
0179  144D  	BSF CompTempVar2190,0
017A  13C2  	BCF gbl_FCV_SPB1,7
017B  084D  	MOVF CompTempVar2190, W
017C  1D03  	BTFSS STATUS,Z
017D  17C2  	BSF gbl_FCV_SPB1,7


				break;
017E  29D2  	GOTO	label22

			}
			case 2:
015D  3A03  	XORLW 0x03
015E  1903  	BTFSC STATUS,Z
015F  297F  	GOTO	label15
017F        label15

			{
				//Calculation
				//Calculation:
				//  spb2 = ospi_dataout AND 1
				FCV_SPB2 = FCV_OSPI_DATAOUT & 1;
017F  3001  	MOVLW 0x01
0180  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
0181  00CC  	MOVWF CompTempVar2191
0182  01CD  	CLRF CompTempVar2192
0183  08CC  	MOVF CompTempVar2191, F
0184  1D03  	BTFSS STATUS,Z
0185  144D  	BSF CompTempVar2192,0
0186  1047  	BCF gbl_FCV_SPB2,0
0187  084D  	MOVF CompTempVar2192, W
0188  1D03  	BTFSS STATUS,Z
0189  1447  	BSF gbl_FCV_SPB2,0


				break;
018A  29D2  	GOTO	label22

			}
			case 3:
0160  3A01  	XORLW 0x01
0161  1903  	BTFSC STATUS,Z
0162  298B  	GOTO	label16
018B        label16

			{
				//Calculation
				//Calculation:
				//  spb3 = ospi_dataout AND 1
				FCV_SPB3 = FCV_OSPI_DATAOUT & 1;
018B  3001  	MOVLW 0x01
018C  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
018D  00CC  	MOVWF CompTempVar2193
018E  01CD  	CLRF CompTempVar2194
018F  08CC  	MOVF CompTempVar2193, F
0190  1D03  	BTFSS STATUS,Z
0191  144D  	BSF CompTempVar2194,0
0192  10C7  	BCF gbl_FCV_SPB3,1
0193  084D  	MOVF CompTempVar2194, W
0194  1D03  	BTFSS STATUS,Z
0195  14C7  	BSF gbl_FCV_SPB3,1


				break;
0196  29D2  	GOTO	label22

			}
			case 4:
0163  3A07  	XORLW 0x07
0164  1903  	BTFSC STATUS,Z
0165  2997  	GOTO	label17
0197        label17

			{
				//Calculation
				//Calculation:
				//  spb4 = ospi_dataout AND 1
				FCV_SPB4 = FCV_OSPI_DATAOUT & 1;
0197  3001  	MOVLW 0x01
0198  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
0199  00CC  	MOVWF CompTempVar2195
019A  01CD  	CLRF CompTempVar2196
019B  08CC  	MOVF CompTempVar2195, F
019C  1D03  	BTFSS STATUS,Z
019D  144D  	BSF CompTempVar2196,0
019E  1042  	BCF gbl_FCV_SPB4,0
019F  084D  	MOVF CompTempVar2196, W
01A0  1D03  	BTFSS STATUS,Z
01A1  1442  	BSF gbl_FCV_SPB4,0


				break;
01A2  29D2  	GOTO	label22

			}
			case 5:
0166  3A01  	XORLW 0x01
0167  1903  	BTFSC STATUS,Z
0168  29A3  	GOTO	label18
01A3        label18

			{
				//Calculation
				//Calculation:
				//  spb5 = ospi_dataout AND 1
				FCV_SPB5 = FCV_OSPI_DATAOUT & 1;
01A3  3001  	MOVLW 0x01
01A4  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
01A5  00CC  	MOVWF CompTempVar2197
01A6  01CD  	CLRF CompTempVar2198
01A7  08CC  	MOVF CompTempVar2197, F
01A8  1D03  	BTFSS STATUS,Z
01A9  144D  	BSF CompTempVar2198,0
01AA  1142  	BCF gbl_FCV_SPB5,2
01AB  084D  	MOVF CompTempVar2198, W
01AC  1D03  	BTFSS STATUS,Z
01AD  1542  	BSF gbl_FCV_SPB5,2


				break;
01AE  29D2  	GOTO	label22

			}
			case 6:
0169  3A03  	XORLW 0x03
016A  1903  	BTFSC STATUS,Z
016B  29AF  	GOTO	label19
01AF        label19

			{
				//Calculation
				//Calculation:
				//  spb6 = ospi_dataout AND 1
				FCV_SPB6 = FCV_OSPI_DATAOUT & 1;
01AF  3001  	MOVLW 0x01
01B0  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
01B1  00CC  	MOVWF CompTempVar2199
01B2  01CD  	CLRF CompTempVar2200
01B3  08CC  	MOVF CompTempVar2199, F
01B4  1D03  	BTFSS STATUS,Z
01B5  144D  	BSF CompTempVar2200,0
01B6  11C2  	BCF gbl_FCV_SPB6,3
01B7  084D  	MOVF CompTempVar2200, W
01B8  1D03  	BTFSS STATUS,Z
01B9  15C2  	BSF gbl_FCV_SPB6,3


				break;
01BA  29D2  	GOTO	label22

			}
			case 7:
016C  3A01  	XORLW 0x01
016D  1903  	BTFSC STATUS,Z
016E  29BB  	GOTO	label20
01BB        label20

			{
				//Calculation
				//Calculation:
				//  spb7 = ospi_dataout AND 1
				FCV_SPB7 = FCV_OSPI_DATAOUT & 1;
01BB  3001  	MOVLW 0x01
01BC  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
01BD  00CC  	MOVWF CompTempVar2201
01BE  01CD  	CLRF CompTempVar2202
01BF  08CC  	MOVF CompTempVar2201, F
01C0  1D03  	BTFSS STATUS,Z
01C1  144D  	BSF CompTempVar2202,0
01C2  1242  	BCF gbl_FCV_SPB7,4
01C3  084D  	MOVF CompTempVar2202, W
01C4  1D03  	BTFSS STATUS,Z
01C5  1642  	BSF gbl_FCV_SPB7,4


				break;
01C6  29D2  	GOTO	label22

			}
			case 0:
016F  3A07  	XORLW 0x07
0170  1903  	BTFSC STATUS,Z
0171  29C7  	GOTO	label21
01C7        label21

			{
				//Calculation
				//Calculation:
				//  spb0 = ospi_dataout AND 1
				FCV_SPB0 = FCV_OSPI_DATAOUT & 1;
01C7  3001  	MOVLW 0x01
01C8  0546  	ANDWF gbl_FCV_OSPI_DATAOUT, W
01C9  00CC  	MOVWF CompTempVar2203
01CA  01CD  	CLRF CompTempVar2204
01CB  08CC  	MOVF CompTempVar2203, F
01CC  1D03  	BTFSS STATUS,Z
01CD  144D  	BSF CompTempVar2204,0
01CE  1342  	BCF gbl_FCV_SPB0,6
01CF  084D  	MOVF CompTempVar2204, W
01D0  1D03  	BTFSS STATUS,Z
01D1  1742  	BSF gbl_FCV_SPB0,6
01D2        label22


				break;

			}
			// default:

		}

		//Calculation
		//Calculation:
		//  ospi_dataout = ospi_dataout >> 1
		//  spi_ihap = spi_ihap + 1
		FCV_OSPI_DATAOUT = FCV_OSPI_DATAOUT >> 1;
01D2  08C6  	MOVF gbl_FCV_OSPI_DATAOUT, F
01D3  1003  	BCF STATUS,C
01D4  0CC6  	RRF gbl_FCV_OSPI_DATAOUT, F

		FCV_SPI_IHAP = FCV_SPI_IHAP + 1;
01D5  0A43  	INCF gbl_FCV_SPI_IHAP, W
01D6  00C3  	MOVWF gbl_FCV_SPI_IHAP



	}

	//Calculation
	//Calculation:
	//  spi_ihap = 0
	FCV_SPI_IHAP = 0;
01D9  01C3  	CLRF gbl_FCV_SPI_IHAP


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP3=0; FCLV_LOOP3<8; FCLV_LOOP3++)
01DA  01CA  	CLRF gbl_FCLV_LOOP3
01DB        label24
01DB  3008  	MOVLW 0x08
01DC  024A  	SUBWF gbl_FCLV_LOOP3, W
01DD  1803  	BTFSC STATUS,C
01DE  2AA5  	GOTO	label42
02A3  0ACA  	INCF gbl_FCLV_LOOP3, F
02A4  29DB  	GOTO	label24
02A5        label42

	{

		//Switch
		//Switch: spi_ihap?
		switch (FCV_SPI_IHAP)
01F8  2A88  	GOTO	label41

		{
			case 1:
01DF  0843  	MOVF gbl_FCV_SPI_IHAP, W
01E0  3A01  	XORLW 0x01
01E1  1903  	BTFSC STATUS,Z
01E2  29F9  	GOTO	label25
01F9        label25

			{
				//Output
				//Output: spb6 -> C5
				trisc = trisc & 0xDF;
01F9  30DF  	MOVLW 0xDF
01FA  1683  	BSF STATUS, RP0
01FB  0507  	ANDWF gbl_trisc, W
01FC  0087  	MOVWF gbl_trisc

				if ((FCV_SPB6))
01FD  1283  	BCF STATUS, RP0
01FE  1DC2  	BTFSS gbl_FCV_SPB6,3
01FF  2A07  	GOTO	label26
0207        label26

					portc = (portc & 0xDF) | 0x20;
0200  30DF  	MOVLW 0xDF
0201  0507  	ANDWF gbl_portc, W
0202  00CC  	MOVWF CompTempVar2206
0203  3020  	MOVLW 0x20
0204  044C  	IORWF CompTempVar2206, W
0205  0087  	MOVWF gbl_portc

				else
0206  2A88  	GOTO	label41

					portc = portc & 0xDF;
0207  30DF  	MOVLW 0xDF
0208  0507  	ANDWF gbl_portc, W
0209  0087  	MOVWF gbl_portc


				break;
020A  2A88  	GOTO	label41

			}
			case 2:
01E3  3A03  	XORLW 0x03
01E4  1903  	BTFSC STATUS,Z
01E5  2A0B  	GOTO	label27
020B        label27

			{
				//Output
				//Output: spb5 -> C5
				trisc = trisc & 0xDF;
020B  30DF  	MOVLW 0xDF
020C  1683  	BSF STATUS, RP0
020D  0507  	ANDWF gbl_trisc, W
020E  0087  	MOVWF gbl_trisc

				if ((FCV_SPB5))
020F  1283  	BCF STATUS, RP0
0210  1D42  	BTFSS gbl_FCV_SPB5,2
0211  2A19  	GOTO	label28
0219        label28

					portc = (portc & 0xDF) | 0x20;
0212  30DF  	MOVLW 0xDF
0213  0507  	ANDWF gbl_portc, W
0214  00CC  	MOVWF CompTempVar2207
0215  3020  	MOVLW 0x20
0216  044C  	IORWF CompTempVar2207, W
0217  0087  	MOVWF gbl_portc

				else
0218  2A88  	GOTO	label41

					portc = portc & 0xDF;
0219  30DF  	MOVLW 0xDF
021A  0507  	ANDWF gbl_portc, W
021B  0087  	MOVWF gbl_portc


				break;
021C  2A88  	GOTO	label41

			}
			case 3:
01E6  3A01  	XORLW 0x01
01E7  1903  	BTFSC STATUS,Z
01E8  2A1D  	GOTO	label29
021D        label29

			{
				//Output
				//Output: spb4 -> C5
				trisc = trisc & 0xDF;
021D  30DF  	MOVLW 0xDF
021E  1683  	BSF STATUS, RP0
021F  0507  	ANDWF gbl_trisc, W
0220  0087  	MOVWF gbl_trisc

				if ((FCV_SPB4))
0221  1283  	BCF STATUS, RP0
0222  1C42  	BTFSS gbl_FCV_SPB4,0
0223  2A2B  	GOTO	label30
022B        label30

					portc = (portc & 0xDF) | 0x20;
0224  30DF  	MOVLW 0xDF
0225  0507  	ANDWF gbl_portc, W
0226  00CC  	MOVWF CompTempVar2208
0227  3020  	MOVLW 0x20
0228  044C  	IORWF CompTempVar2208, W
0229  0087  	MOVWF gbl_portc

				else
022A  2A88  	GOTO	label41

					portc = portc & 0xDF;
022B  30DF  	MOVLW 0xDF
022C  0507  	ANDWF gbl_portc, W
022D  0087  	MOVWF gbl_portc


				break;
022E  2A88  	GOTO	label41

			}
			case 4:
01E9  3A07  	XORLW 0x07
01EA  1903  	BTFSC STATUS,Z
01EB  2A2F  	GOTO	label31
022F        label31

			{
				//Output
				//Output: spb3 -> C5
				trisc = trisc & 0xDF;
022F  30DF  	MOVLW 0xDF
0230  1683  	BSF STATUS, RP0
0231  0507  	ANDWF gbl_trisc, W
0232  0087  	MOVWF gbl_trisc

				if ((FCV_SPB3))
0233  1283  	BCF STATUS, RP0
0234  1CC7  	BTFSS gbl_FCV_SPB3,1
0235  2A3D  	GOTO	label32
023D        label32

					portc = (portc & 0xDF) | 0x20;
0236  30DF  	MOVLW 0xDF
0237  0507  	ANDWF gbl_portc, W
0238  00CC  	MOVWF CompTempVar2209
0239  3020  	MOVLW 0x20
023A  044C  	IORWF CompTempVar2209, W
023B  0087  	MOVWF gbl_portc

				else
023C  2A88  	GOTO	label41

					portc = portc & 0xDF;
023D  30DF  	MOVLW 0xDF
023E  0507  	ANDWF gbl_portc, W
023F  0087  	MOVWF gbl_portc


				break;
0240  2A88  	GOTO	label41

			}
			case 5:
01EC  3A01  	XORLW 0x01
01ED  1903  	BTFSC STATUS,Z
01EE  2A41  	GOTO	label33
0241        label33

			{
				//Output
				//Output: spb2 -> C5
				trisc = trisc & 0xDF;
0241  30DF  	MOVLW 0xDF
0242  1683  	BSF STATUS, RP0
0243  0507  	ANDWF gbl_trisc, W
0244  0087  	MOVWF gbl_trisc

				if ((FCV_SPB2))
0245  1283  	BCF STATUS, RP0
0246  1C47  	BTFSS gbl_FCV_SPB2,0
0247  2A4F  	GOTO	label34
024F        label34

					portc = (portc & 0xDF) | 0x20;
0248  30DF  	MOVLW 0xDF
0249  0507  	ANDWF gbl_portc, W
024A  00CC  	MOVWF CompTempVar2210
024B  3020  	MOVLW 0x20
024C  044C  	IORWF CompTempVar2210, W
024D  0087  	MOVWF gbl_portc

				else
024E  2A88  	GOTO	label41

					portc = portc & 0xDF;
024F  30DF  	MOVLW 0xDF
0250  0507  	ANDWF gbl_portc, W
0251  0087  	MOVWF gbl_portc


				break;
0252  2A88  	GOTO	label41

			}
			case 6:
01EF  3A03  	XORLW 0x03
01F0  1903  	BTFSC STATUS,Z
01F1  2A53  	GOTO	label35
0253        label35

			{
				//Output
				//Output: spb1 -> C5
				trisc = trisc & 0xDF;
0253  30DF  	MOVLW 0xDF
0254  1683  	BSF STATUS, RP0
0255  0507  	ANDWF gbl_trisc, W
0256  0087  	MOVWF gbl_trisc

				if ((FCV_SPB1))
0257  1283  	BCF STATUS, RP0
0258  1FC2  	BTFSS gbl_FCV_SPB1,7
0259  2A61  	GOTO	label36
0261        label36

					portc = (portc & 0xDF) | 0x20;
025A  30DF  	MOVLW 0xDF
025B  0507  	ANDWF gbl_portc, W
025C  00CC  	MOVWF CompTempVar2211
025D  3020  	MOVLW 0x20
025E  044C  	IORWF CompTempVar2211, W
025F  0087  	MOVWF gbl_portc

				else
0260  2A88  	GOTO	label41

					portc = portc & 0xDF;
0261  30DF  	MOVLW 0xDF
0262  0507  	ANDWF gbl_portc, W
0263  0087  	MOVWF gbl_portc


				break;
0264  2A88  	GOTO	label41

			}
			case 7:
01F2  3A01  	XORLW 0x01
01F3  1903  	BTFSC STATUS,Z
01F4  2A65  	GOTO	label37
0265        label37

			{
				//Output
				//Output: spb0 -> C5
				trisc = trisc & 0xDF;
0265  30DF  	MOVLW 0xDF
0266  1683  	BSF STATUS, RP0
0267  0507  	ANDWF gbl_trisc, W
0268  0087  	MOVWF gbl_trisc

				if ((FCV_SPB0))
0269  1283  	BCF STATUS, RP0
026A  1F42  	BTFSS gbl_FCV_SPB0,6
026B  2A73  	GOTO	label38
0273        label38

					portc = (portc & 0xDF) | 0x20;
026C  30DF  	MOVLW 0xDF
026D  0507  	ANDWF gbl_portc, W
026E  00CC  	MOVWF CompTempVar2212
026F  3020  	MOVLW 0x20
0270  044C  	IORWF CompTempVar2212, W
0271  0087  	MOVWF gbl_portc

				else
0272  2A88  	GOTO	label41

					portc = portc & 0xDF;
0273  30DF  	MOVLW 0xDF
0274  0507  	ANDWF gbl_portc, W
0275  0087  	MOVWF gbl_portc


				break;
0276  2A88  	GOTO	label41

			}
			case 0:
01F5  3A07  	XORLW 0x07
01F6  1903  	BTFSC STATUS,Z
01F7  2A77  	GOTO	label39
0277        label39

			{
				//Output
				//Output: spb7 -> C5
				trisc = trisc & 0xDF;
0277  30DF  	MOVLW 0xDF
0278  1683  	BSF STATUS, RP0
0279  0507  	ANDWF gbl_trisc, W
027A  0087  	MOVWF gbl_trisc

				if ((FCV_SPB7))
027B  1283  	BCF STATUS, RP0
027C  1E42  	BTFSS gbl_FCV_SPB7,4
027D  2A85  	GOTO	label40
0285        label40

					portc = (portc & 0xDF) | 0x20;
027E  30DF  	MOVLW 0xDF
027F  0507  	ANDWF gbl_portc, W
0280  00CC  	MOVWF CompTempVar2213
0281  3020  	MOVLW 0x20
0282  044C  	IORWF CompTempVar2213, W
0283  0087  	MOVWF gbl_portc

				else
0284  2A88  	GOTO	label41
0288        label41

					portc = portc & 0xDF;
0285  30DF  	MOVLW 0xDF
0286  0507  	ANDWF gbl_portc, W
0287  0087  	MOVWF gbl_portc


				break;

			}
			// default:

		}

		//clk
		//Output: 1 -> C3
		trisc = trisc & 0xF7;
0288  30F7  	MOVLW 0xF7
0289  1683  	BSF STATUS, RP0
028A  0507  	ANDWF gbl_trisc, W
028B  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xF7) | 0x08;
028C  30F7  	MOVLW 0xF7
028D  1283  	BCF STATUS, RP0
028E  0507  	ANDWF gbl_portc, W
028F  00CC  	MOVWF CompTempVar2214
0290  3008  	MOVLW 0x08
0291  044C  	IORWF CompTempVar2214, W
0292  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xF7;

		//Delay
		//Delay: 5 us
		delay_us(5);
0293  3005  	MOVLW 0x05
0294  00CC  	MOVWF delay_us_00000_arg_del
0295  204A  	CALL delay_us_00000


		//clk
		//Output: 0 -> C3
		trisc = trisc & 0xF7;
0296  30F7  	MOVLW 0xF7
0297  1683  	BSF STATUS, RP0
0298  0507  	ANDWF gbl_trisc, W
0299  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xF7) | 0x08;
		else
			portc = portc & 0xF7;
029A  30F7  	MOVLW 0xF7
029B  1283  	BCF STATUS, RP0
029C  0507  	ANDWF gbl_portc, W
029D  0087  	MOVWF gbl_portc


		//Delay
		//Delay: 5 us
		delay_us(5);
029E  3005  	MOVLW 0x05
029F  00CC  	MOVWF delay_us_00000_arg_del
02A0  204A  	CALL delay_us_00000


		//Calculation
		//Calculation:
		//  spi_ihap = spi_ihap + 1
		FCV_SPI_IHAP = FCV_SPI_IHAP + 1;
02A1  0A43  	INCF gbl_FCV_SPI_IHAP, W
02A2  00C3  	MOVWF gbl_FCV_SPI_IHAP



	}

	//Output
	//Output: 1 -> C5
	trisc = trisc & 0xDF;
02A5  30DF  	MOVLW 0xDF
02A6  1683  	BSF STATUS, RP0
02A7  0507  	ANDWF gbl_trisc, W
02A8  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xDF) | 0x20;
02A9  30DF  	MOVLW 0xDF
02AA  1283  	BCF STATUS, RP0
02AB  0507  	ANDWF gbl_portc, W
02AC  00CC  	MOVWF CompTempVar2215
02AD  3020  	MOVLW 0x20
02AE  044C  	IORWF CompTempVar2215, W
02AF  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xDF;

	//Output
	//Output: 1 -> C3
	trisc = trisc & 0xF7;
02B0  30F7  	MOVLW 0xF7
02B1  1683  	BSF STATUS, RP0
02B2  0507  	ANDWF gbl_trisc, W
02B3  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xF7) | 0x08;
02B4  30F7  	MOVLW 0xF7
02B5  1283  	BCF STATUS, RP0
02B6  0507  	ANDWF gbl_portc, W
02B7  00CC  	MOVWF CompTempVar2216
02B8  3008  	MOVLW 0x08
02B9  044C  	IORWF CompTempVar2216, W
02BA  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xF7;

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
02BB  30FB  	MOVLW 0xFB
02BC  1683  	BSF STATUS, RP0
02BD  0507  	ANDWF gbl_trisc, W
02BE  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
02BF  30FB  	MOVLW 0xFB
02C0  1283  	BCF STATUS, RP0
02C1  0507  	ANDWF gbl_portc, W
02C2  00CC  	MOVWF CompTempVar2217
02C3  3004  	MOVLW 0x04
02C4  044C  	IORWF CompTempVar2217, W
02C5  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

}
02C6  0008  	RETURN



void FCM_rf_begin()

{

	//write on rf_config
	//Calculation:
	//  ospi_dataout = 0b00100000
	FCV_OSPI_DATAOUT = 32;
030A  3020  	MOVLW 0x20
030B  1283  	BCF STATUS, RP0
030C  1303  	BCF STATUS, RP1
030D  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
030E  2137  	CALL FCM_own_sp_00051


	//Calculation
	//Calculation:
	//  rf_config = 0b00001011
	FCV_RF_CONFIG = 11;
030F  300B  	MOVLW 0x0B
0310  00C4  	MOVWF gbl_FCV_RF_CONFIG


	//Calculation
	//Calculation:
	//  ospi_dataout = rf_config
	FCV_OSPI_DATAOUT = FCV_RF_CONFIG;
0311  0844  	MOVF gbl_FCV_RF_CONFIG, W
0312  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0313  2137  	CALL FCM_own_sp_00051


}
0314  0008  	RETURN



void FCM_set_writing_pipe0()
{

	//RF_reg01
	//Calculation:
	//  ospi_dataout = 0b00100001
	FCV_OSPI_DATAOUT = 33;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//data
	//Calculation:
	//  ospi_dataout = 0b00111110
	FCV_OSPI_DATAOUT = 62;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//RF_reg02
	//Calculation:
	//  ospi_dataout = 0b00100010
	FCV_OSPI_DATAOUT = 34;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//data
	//Calculation:
	//  ospi_dataout = 0b00000010
	FCV_OSPI_DATAOUT = 2;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

}


void FCM_rf_setpa()

{

	//RF_reg06
	//Calculation:
	//  ospi_dataout = 0b00100110
	FCV_OSPI_DATAOUT = 38;
0301  3026  	MOVLW 0x26
0302  1283  	BCF STATUS, RP0
0303  1303  	BCF STATUS, RP1
0304  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0305  2137  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0b00001101
	FCV_OSPI_DATAOUT = 13;
0306  300D  	MOVLW 0x0D
0307  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0308  2137  	CALL FCM_own_sp_00051


}
0309  0008  	RETURN



void FCM_open_writing_pipe_address()
{

	//RF_reg10
	//Calculation:
	//  ospi_dataout = 0b00110000
	FCV_OSPI_DATAOUT = 48;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

}


void FCM_radio_writepayload()
{

	//RF_command
	//Calculation:
	//  ospi_dataout = 0b10100000
	FCV_OSPI_DATAOUT = 160;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

	//data
	//Calculation:
	//  ospi_dataout = 0x55
	FCV_OSPI_DATAOUT = 0x55;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

}


void FCM_tx_flush()
{

	//RF_command
	//Calculation:
	//  ospi_dataout = 0b11100001
	FCV_OSPI_DATAOUT = 225;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

}


void FCM_set_reading_pipe0()

{

	//RF_reg01
	//Calculation:
	//  ospi_dataout = 0b00100001
	FCV_OSPI_DATAOUT = 33;
02EC  3021  	MOVLW 0x21
02ED  1283  	BCF STATUS, RP0
02EE  1303  	BCF STATUS, RP1
02EF  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
02F0  2137  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0b00111110
	FCV_OSPI_DATAOUT = 62;
02F1  303E  	MOVLW 0x3E
02F2  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
02F3  2137  	CALL FCM_own_sp_00051


	//RF_reg02
	//Calculation:
	//  ospi_dataout = 0b00100010
	FCV_OSPI_DATAOUT = 34;
02F4  3022  	MOVLW 0x22
02F5  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
02F6  2137  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0b00000010
	FCV_OSPI_DATAOUT = 2;
02F7  3002  	MOVLW 0x02
02F8  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
02F9  2137  	CALL FCM_own_sp_00051


}
02FA  0008  	RETURN



void FCM_open_reading_pipe_address()

{

	//RF_reg10
	//Calculation:
	//  ospi_dataout = 0b00101010
	FCV_OSPI_DATAOUT = 42;
0315  302A  	MOVLW 0x2A
0316  1283  	BCF STATUS, RP0
0317  1303  	BCF STATUS, RP1
0318  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0319  2137  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
031A  30E7  	MOVLW 0xE7
031B  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
031C  2137  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
031D  30E7  	MOVLW 0xE7
031E  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
031F  2137  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
0320  30E7  	MOVLW 0xE7
0321  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0322  2137  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
0323  30E7  	MOVLW 0xE7
0324  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0325  2137  	CALL FCM_own_sp_00051


	//data
	//Calculation:
	//  ospi_dataout = 0xE7
	FCV_OSPI_DATAOUT = 0xE7;
0326  30E7  	MOVLW 0xE7
0327  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0328  2137  	CALL FCM_own_sp_00051


}
0329  0008  	RETURN



void FCM_radio_readpayload()
{

	//RF_command
	//Calculation:
	//  ospi_dataout = 0b01100001
	FCV_OSPI_DATAOUT = 97;

	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();

}


void FCM_rx_flush()

{

	//RF_command
	//Calculation:
	//  ospi_dataout = 0b11100010
	FCV_OSPI_DATAOUT = 226;
02FB  30E2  	MOVLW 0xE2
02FC  1283  	BCF STATUS, RP0
02FD  1303  	BCF STATUS, RP1
02FE  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
02FF  2137  	CALL FCM_own_sp_00051


}
0300  0008  	RETURN



void FCM_own_spi_read()

{

	//Calculation
	//Calculation:
	//  ospi_datain = 0xFF
	FCV_OSPI_DATAIN = 0xFF;
00BA  30FF  	MOVLW 0xFF
00BB  1283  	BCF STATUS, RP0
00BC  1303  	BCF STATUS, RP1
00BD  00C5  	MOVWF gbl_FCV_OSPI_DATAIN


	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
00BE  30FB  	MOVLW 0xFB
00BF  1683  	BSF STATUS, RP0
00C0  0507  	ANDWF gbl_trisc, W
00C1  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
00C2  30FB  	MOVLW 0xFB
00C3  1283  	BCF STATUS, RP0
00C4  0507  	ANDWF gbl_portc, W
00C5  0087  	MOVWF gbl_portc


	//Output
	//Output: 1 -> C5
	trisc = trisc & 0xDF;
00C6  30DF  	MOVLW 0xDF
00C7  1683  	BSF STATUS, RP0
00C8  0507  	ANDWF gbl_trisc, W
00C9  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xDF) | 0x20;
00CA  30DF  	MOVLW 0xDF
00CB  1283  	BCF STATUS, RP0
00CC  0507  	ANDWF gbl_portc, W
00CD  00CC  	MOVWF CompTempVar2218
00CE  3020  	MOVLW 0x20
00CF  044C  	IORWF CompTempVar2218, W
00D0  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xDF;

	//clk
	//Output: 0 -> C3
	trisc = trisc & 0xF7;
00D1  30F7  	MOVLW 0xF7
00D2  1683  	BSF STATUS, RP0
00D3  0507  	ANDWF gbl_trisc, W
00D4  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xF7) | 0x08;
	else
		portc = portc & 0xF7;
00D5  30F7  	MOVLW 0xF7
00D6  1283  	BCF STATUS, RP0
00D7  0507  	ANDWF gbl_portc, W
00D8  0087  	MOVWF gbl_portc


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP4=0; FCLV_LOOP4<8; FCLV_LOOP4++)
00D9  01CB  	CLRF gbl_FCLV_LOOP4
00DA        label10
00DA  3008  	MOVLW 0x08
00DB  024B  	SUBWF gbl_FCLV_LOOP4, W
00DC  1803  	BTFSC STATUS,C
00DD  2915  	GOTO	label12
0113  0ACB  	INCF gbl_FCLV_LOOP4, F
0114  28DA  	GOTO	label10
0115        label12

	{

		//clk
		//Output: 1 -> C3
		trisc = trisc & 0xF7;
00DE  30F7  	MOVLW 0xF7
00DF  1683  	BSF STATUS, RP0
00E0  0507  	ANDWF gbl_trisc, W
00E1  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xF7) | 0x08;
00E2  30F7  	MOVLW 0xF7
00E3  1283  	BCF STATUS, RP0
00E4  0507  	ANDWF gbl_portc, W
00E5  00CC  	MOVWF CompTempVar2219
00E6  3008  	MOVLW 0x08
00E7  044C  	IORWF CompTempVar2219, W
00E8  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xF7;

		//Delay
		//Delay: 5 us
		delay_us(5);
00E9  3005  	MOVLW 0x05
00EA  00CC  	MOVWF delay_us_00000_arg_del
00EB  204A  	CALL delay_us_00000


		//Input
		//Input: C4 -> ospi_in_bit
		trisc = trisc | 0x10;
00EC  3010  	MOVLW 0x10
00ED  1683  	BSF STATUS, RP0
00EE  0407  	IORWF gbl_trisc, W
00EF  0087  	MOVWF gbl_trisc

		FCV_OSPI_IN_BIT = ((portc & 0x10) == 0x10);
00F0  3010  	MOVLW 0x10
00F1  1283  	BCF STATUS, RP0
00F2  0507  	ANDWF gbl_portc, W
00F3  00CC  	MOVWF CompTempVar2220
00F4  01CD  	CLRF CompTempVar2221
00F5  3010  	MOVLW 0x10
00F6  024C  	SUBWF CompTempVar2220, W
00F7  1903  	BTFSC STATUS,Z
00F8  0ACD  	INCF CompTempVar2221, F
00F9  12C2  	BCF gbl_FCV_OSPI_IN_BIT,5
00FA  084D  	MOVF CompTempVar2221, W
00FB  1D03  	BTFSS STATUS,Z
00FC  16C2  	BSF gbl_FCV_OSPI_IN_BIT,5


		//Calculation
		//Calculation:
		//  ospi_datain = ospi_datain AND ospi_in_bit
		FCV_OSPI_DATAIN = FCV_OSPI_DATAIN & FCV_OSPI_IN_BIT;
00FD  01CC  	CLRF CompTempVar2222
00FE  1C45  	BTFSS gbl_FCV_OSPI_DATAIN,0
00FF  2903  	GOTO	label11
0100  1EC2  	BTFSS gbl_FCV_OSPI_IN_BIT,5
0101  2903  	GOTO	label11
0102  0ACC  	INCF CompTempVar2222, F
0103        label11
0103  084C  	MOVF CompTempVar2222, W
0104  00C5  	MOVWF gbl_FCV_OSPI_DATAIN


		//Calculation
		//Calculation:
		//  ospi_datain = ospi_datain << 1
		FCV_OSPI_DATAIN = FCV_OSPI_DATAIN << 1;
0105  08C5  	MOVF gbl_FCV_OSPI_DATAIN, F
0106  1003  	BCF STATUS,C
0107  0DC5  	RLF gbl_FCV_OSPI_DATAIN, F


		//clk
		//Output: 0 -> C3
		trisc = trisc & 0xF7;
0108  30F7  	MOVLW 0xF7
0109  1683  	BSF STATUS, RP0
010A  0507  	ANDWF gbl_trisc, W
010B  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xF7) | 0x08;
		else
			portc = portc & 0xF7;
010C  30F7  	MOVLW 0xF7
010D  1283  	BCF STATUS, RP0
010E  0507  	ANDWF gbl_portc, W
010F  0087  	MOVWF gbl_portc


		//Delay
		//Delay: 5 us
		delay_us(5);
0110  3005  	MOVLW 0x05
0111  00CC  	MOVWF delay_us_00000_arg_del
0112  204A  	CALL delay_us_00000



	}

	//Output
	//Output: 1 -> C5
	trisc = trisc & 0xDF;
0115  30DF  	MOVLW 0xDF
0116  1683  	BSF STATUS, RP0
0117  0507  	ANDWF gbl_trisc, W
0118  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xDF) | 0x20;
0119  30DF  	MOVLW 0xDF
011A  1283  	BCF STATUS, RP0
011B  0507  	ANDWF gbl_portc, W
011C  00CC  	MOVWF CompTempVar2224
011D  3020  	MOVLW 0x20
011E  044C  	IORWF CompTempVar2224, W
011F  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xDF;

	//Output
	//Output: 1 -> C3
	trisc = trisc & 0xF7;
0120  30F7  	MOVLW 0xF7
0121  1683  	BSF STATUS, RP0
0122  0507  	ANDWF gbl_trisc, W
0123  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xF7) | 0x08;
0124  30F7  	MOVLW 0xF7
0125  1283  	BCF STATUS, RP0
0126  0507  	ANDWF gbl_portc, W
0127  00CC  	MOVWF CompTempVar2225
0128  3008  	MOVLW 0x08
0129  044C  	IORWF CompTempVar2225, W
012A  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xF7;

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
012B  30FB  	MOVLW 0xFB
012C  1683  	BSF STATUS, RP0
012D  0507  	ANDWF gbl_trisc, W
012E  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
012F  30FB  	MOVLW 0xFB
0130  1283  	BCF STATUS, RP0
0131  0507  	ANDWF gbl_portc, W
0132  00CC  	MOVWF CompTempVar2226
0133  3004  	MOVLW 0x04
0134  044C  	IORWF CompTempVar2226, W
0135  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

}
0136  0008  	RETURN



void FCM_activate()

{

	//RF_reg10
	//Calculation:
	//  ospi_dataout = 0b01010000
	FCV_OSPI_DATAOUT = 80;
032A  3050  	MOVLW 0x50
032B  1283  	BCF STATUS, RP0
032C  1303  	BCF STATUS, RP1
032D  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
032E  2137  	CALL FCM_own_sp_00051


	//RF_reg10
	//Calculation:
	//  ospi_dataout = 0x73
	FCV_OSPI_DATAOUT = 0x73;
032F  3073  	MOVLW 0x73
0330  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
0331  2137  	CALL FCM_own_sp_00051


}
0332  0008  	RETURN



void FCM_status_read()

{

	//RF_reg06
	//Calculation:
	//  ospi_dataout = 0b00000111
	FCV_OSPI_DATAOUT = 7;
02E5  3007  	MOVLW 0x07
02E6  1283  	BCF STATUS, RP0
02E7  1303  	BCF STATUS, RP1
02E8  00C6  	MOVWF gbl_FCV_OSPI_DATAOUT


	//Call Macro
	//Call Macro: own_spi()
	FCM_own_spi();
02E9  2137  	CALL FCM_own_sp_00051


	//Call Macro
	//Call Macro: own_spi_read()
	FCM_own_spi_read();
02EA  20BA  	CALL FCM_own_sp_0005C


}
02EB  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
04BA  3007  	MOVLW 0x07
04BB  1683  	BSF STATUS, RP0
04BC  1303  	BCF STATUS, RP1
04BD  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
04BE  30C0  	MOVLW 0xC0
04BF  0081  	MOVWF gbl_option_reg



	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
04C0  2465  	CALL FCD_LCDDis_00060


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
04C1  2454  	CALL FCD_LCDDis_00061


	//clk
	//Output: 1 -> C3
	trisc = trisc & 0xF7;
04C2  30F7  	MOVLW 0xF7
04C3  1683  	BSF STATUS, RP0
04C4  0507  	ANDWF gbl_trisc, W
04C5  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xF7) | 0x08;
04C6  30F7  	MOVLW 0xF7
04C7  1283  	BCF STATUS, RP0
04C8  0507  	ANDWF gbl_portc, W
04C9  00CC  	MOVWF CompTempVar2256
04CA  3008  	MOVLW 0x08
04CB  044C  	IORWF CompTempVar2256, W
04CC  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xF7;

	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
04CD  30FB  	MOVLW 0xFB
04CE  1683  	BSF STATUS, RP0
04CF  0507  	ANDWF gbl_trisc, W
04D0  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
04D1  30FB  	MOVLW 0xFB
04D2  1283  	BCF STATUS, RP0
04D3  0507  	ANDWF gbl_portc, W
04D4  00CC  	MOVWF CompTempVar2257
04D5  3004  	MOVLW 0x04
04D6  044C  	IORWF CompTempVar2257, W
04D7  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//ce
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
04D8  30FD  	MOVLW 0xFD
04D9  1683  	BSF STATUS, RP0
04DA  0507  	ANDWF gbl_trisc, W
04DB  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFD) | 0x02;
04DC  30FD  	MOVLW 0xFD
04DD  1283  	BCF STATUS, RP0
04DE  0507  	ANDWF gbl_portc, W
04DF  00CC  	MOVWF CompTempVar2258
04E0  3002  	MOVLW 0x02
04E1  044C  	IORWF CompTempVar2258, W
04E2  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFD;

	//setup
	//Loop: Loop 1 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<1; FCLV_LOOP1++)
04E3  01C8  	CLRF gbl_FCLV_LOOP1
04E4        label71
04E4  3001  	MOVLW 0x01
04E5  0248  	SUBWF gbl_FCLV_LOOP1, W
04E6  1803  	BTFSC STATUS,C
04E7  2CEF  	GOTO	label72
04ED  0AC8  	INCF gbl_FCLV_LOOP1, F
04EE  2CE4  	GOTO	label71
04EF        label72

	{

		//Call Macro
		//Call Macro: rf_begin()
		FCM_rf_begin();
04E8  230A  	CALL FCM_rf_beg_00052


		//Call Macro
		//Call Macro: set_reading_pipe0()
		FCM_set_reading_pipe0();
04E9  22EC  	CALL FCM_set_re_00058


		//Call Macro
		//Call Macro: open_reading_pipe_address()
		FCM_open_reading_pipe_address();
04EA  2315  	CALL FCM_open_r_00059


		//Call Macro
		//Call Macro: rf_setpa()
		FCM_rf_setpa();
04EB  2301  	CALL FCM_rf_set_00054


		//Call Macro
		//Call Macro: activate()
		FCM_activate();
04EC  232A  	CALL FCM_activa_0005D



	}

	//Delay
	//Delay: 1 ms
	delay_ms(1);
04EF  3001  	MOVLW 0x01
04F0  00D3  	MOVWF delay_ms_00000_arg_del
04F1  2010  	CALL delay_ms_00000


	//Loop
	//Loop: While 1
	while (1)
04F2        label73
0512  2CF2  	GOTO	label73

	{

		//Call Macro
		//Call Macro: rx_flush()
		FCM_rx_flush();
04F2  22FB  	CALL FCM_rx_flu_0005B


		//Call Macro
		//Call Macro: status_read()
		FCM_status_read();
04F3  22E5  	CALL FCM_status_0005E


		//Call Component Macro
		//Call Component Macro: ClearLine(0)
		FCD_LCDDisplay0_ClearLine(0);
04F4  01CC  	CLRF FCD_LCDDis_00069_arg_Line
04F5  2333  	CALL FCD_LCDDis_00069


		//Call Component Macro
		//Call Component Macro: Cursor(0, 0)
		FCD_LCDDisplay0_Cursor(0, 0);
04F6  01CF  	CLRF FCD_LCDDis_00064_arg_x
04F7  01D0  	CLRF FCD_LCDDis_00064_arg_y
04F8  22C7  	CALL FCD_LCDDis_00064


		//Call Component Macro
		//Call Component Macro: PrintString("MOSI:")
		FCD_LCDDisplay0_PrintString("MOSI:", 5);
04F9  304D  	MOVLW 0x4D
04FA  00CE  	MOVWF CompTempVar2259
04FB  304F  	MOVLW 0x4F
04FC  00CF  	MOVWF CompTempVar2259+D'1'
04FD  3053  	MOVLW 0x53
04FE  00D0  	MOVWF CompTempVar2259+D'2'
04FF  3049  	MOVLW 0x49
0500  00D1  	MOVWF CompTempVar2259+D'3'
0501  303A  	MOVLW 0x3A
0502  00D2  	MOVWF CompTempVar2259+D'4'
0503  01D3  	CLRF CompTempVar2259+D'5'
0504  3000  	MOVLW HIGH(CompTempVar2259+D'0')
0505  00CD  	MOVWF FCD_LCDDis_00066_arg_String+D'1'
0506  304E  	MOVLW LOW(CompTempVar2259+D'0')
0507  00CC  	MOVWF FCD_LCDDis_00066_arg_String
0508  3005  	MOVLW 0x05
0509  00D4  	MOVWF FCD_LCDDis_00066_arg_MSZ_String
050A  234A  	CALL FCD_LCDDis_00066


		//Call Component Macro
		//Call Component Macro: PrintNumber(ospi_datain)
		FCD_LCDDisplay0_PrintNumber(FCV_OSPI_DATAIN);
050B  0845  	MOVF gbl_FCV_OSPI_DATAIN, W
050C  00CC  	MOVWF FCD_LCDDis_00065_arg_Number
050D  01CD  	CLRF FCD_LCDDis_00065_arg_Number+D'1'
050E  2366  	CALL FCD_LCDDis_00065


		//Delay
		//Delay: 1 ms
		delay_ms(1);
050F  3001  	MOVLW 0x01
0510  00D3  	MOVWF delay_ms_00000_arg_del
0511  2010  	CALL delay_ms_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0549  1283  	BCF STATUS, RP0
054A  1303  	BCF STATUS, RP1
054B  0E36  	SWAPF Int1BContext+D'2', W
054C  0084  	MOVWF FSR
054D  0E35  	SWAPF Int1BContext+D'1', W
054E  008A  	MOVWF PCLATH
054F  0E34  	SWAPF Int1BContext, W
0550  0083  	MOVWF STATUS
0551  0EFF  	SWAPF Int1Context, F
0552  0E7F  	SWAPF Int1Context, W
0553  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2D13  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2D49  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08D3  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  2815  	GOTO	label2
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0BD3  	DECFSZ delay_ms_00000_arg_del, F
003A  2814  	GOTO	label1
003B  0008  	RETURN
003C        ; } delay_ms function end

003C        delay_10us_00000
003C        ; { delay_10us ; function begin
003C  08D9  	MOVF delay_10us_00000_arg_del, F
003D  1D03  	BTFSS STATUS,Z
003E  2840  	GOTO	label3
003F  0008  	RETURN
0040        label3
0040  3009  	MOVLW 0x09
0041        label4
0041  0000  	NOP
0042  3EFF  	ADDLW 0xFF
0043  1D03  	BTFSS STATUS,Z
0044  2841  	GOTO	label4
0045  0000  	NOP
0046  0000  	NOP
0047  0BD9  	DECFSZ delay_10us_00000_arg_del, F
0048  2840  	GOTO	label3
0049  0008  	RETURN
004A        ; } delay_10us function end

004A        delay_us_00000
004A        ; { delay_us ; function begin
004A        label5
004A  0000  	NOP
004B  0000  	NOP
004C  0BCC  	DECFSZ delay_us_00000_arg_del, F
004D  284A  	GOTO	label5
004E  0008  	RETURN
004F        ; } delay_us function end


009B        __div_16_1_00003
009B        ; { __div_16_16 ; function begin
009B  01D7  	CLRF __div_16_1_00003_1_r
009C  01D8  	CLRF __div_16_1_00003_1_r+D'1'
009D  01DA  	CLRF CompTempVarRet214
009E  01DB  	CLRF CompTempVarRet214+D'1'
009F  01D9  	CLRF __div_16_1_00003_1_i
00A0        label7
00A0  1A59  	BTFSC __div_16_1_00003_1_i,4
00A1  0008  	RETURN
00A2  1003  	BCF STATUS,C
00A3  0DDA  	RLF CompTempVarRet214, F
00A4  0DDB  	RLF CompTempVarRet214+D'1', F
00A5  0DD1  	RLF __div_16_1_00003_arg_a, F
00A6  0DD2  	RLF __div_16_1_00003_arg_a+D'1', F
00A7  0DD7  	RLF __div_16_1_00003_1_r, F
00A8  0DD8  	RLF __div_16_1_00003_1_r+D'1', F
00A9  0854  	MOVF __div_16_1_00003_arg_b+D'1', W
00AA  0258  	SUBWF __div_16_1_00003_1_r+D'1', W
00AB  1D03  	BTFSS STATUS,Z
00AC  28AF  	GOTO	label8
00AD  0853  	MOVF __div_16_1_00003_arg_b, W
00AE  0257  	SUBWF __div_16_1_00003_1_r, W
00AF        label8
00AF  1C03  	BTFSS STATUS,C
00B0  28B8  	GOTO	label9
00B1  0853  	MOVF __div_16_1_00003_arg_b, W
00B2  02D7  	SUBWF __div_16_1_00003_1_r, F
00B3  0854  	MOVF __div_16_1_00003_arg_b+D'1', W
00B4  1C03  	BTFSS STATUS,C
00B5  03D8  	DECF __div_16_1_00003_1_r+D'1', F
00B6  02D8  	SUBWF __div_16_1_00003_1_r+D'1', F
00B7  145A  	BSF CompTempVarRet214,0
00B8        label9
00B8  0AD9  	INCF __div_16_1_00003_1_i, F
00B9  28A0  	GOTO	label7
00BA        ; } __div_16_16 function end


0513        _startup
0513  30D5  	MOVLW 0xD5
0514  1283  	BCF STATUS, RP0
0515  1303  	BCF STATUS, RP1
0516  00A0  	MOVWF gbl_14_LSR
0517  30C4  	MOVLW 0xC4
0518  00A1  	MOVWF gbl_14_LSR+D'1'
0519  30BB  	MOVLW 0xBB
051A  00A2  	MOVWF gbl_14_LSR+D'2'
051B  30DC  	MOVLW 0xDC
051C  00A3  	MOVWF gbl_14_LSR+D'3'
051D  01A4  	CLRF gbl_15_gbl_aSig
051E  01A5  	CLRF gbl_15_gbl_aSig+D'1'
051F  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0520  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0521  01A8  	CLRF gbl_15_gbl_bSig
0522  01A9  	CLRF gbl_15_gbl_bSig+D'1'
0523  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0524  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0525  01AC  	CLRF gbl_15_gbl_zSig
0526  01AD  	CLRF gbl_15_gbl_zSig+D'1'
0527  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0528  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0529  01BC  	CLRF gbl_15_gbl_aExp
052A  01BD  	CLRF gbl_15_gbl_bExp
052B  01B7  	CLRF gbl_15_gbl_zExp
052C  01B8  	CLRF gbl_15_gbl_zExp+D'1'
052D  01BE  	CLRF gbl_15_gbl_aSign
052E  01BF  	CLRF gbl_15_gbl_bSign
052F  01C0  	CLRF gbl_15_gbl_zSign
0530  01C1  	CLRF gbl_15_gbl_zSigZero
0531  01B0  	CLRF gbl_15_gbl_ret
0532  01B1  	CLRF gbl_15_gbl_ret+D'1'
0533  01B2  	CLRF gbl_15_gbl_ret+D'2'
0534  01B3  	CLRF gbl_15_gbl_ret+D'3'
0535  01BA  	CLRF gbl_float_rounding_mode
0536  01BB  	CLRF gbl_float_exception_flags
0537  01B9  	CLRF gbl_float_detect_tininess

0546  118A  	BCF PCLATH,3
0547  120A  	BCF PCLATH,4
0548  2CBA  	GOTO	main

2007  3F3A  	DW 0x3F3A
