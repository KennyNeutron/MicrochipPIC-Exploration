;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
004F  01D0  	CLRF Wdt_Delay__0003E_1_i
0050        label6
0050  084F  	MOVF Wdt_Delay__0003E_arg_delay, W
0051  0250  	SUBWF Wdt_Delay__0003E_1_i, W
0052  1803  	BTFSC STATUS,C
0058  0AD0  	INCF Wdt_Delay__0003E_1_i, F
0059  2850  	GOTO	label6

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0054  0064  	CLRWDT

        delay_ms(1);
0055  3001  	MOVLW 0x01
0056  00D1  	MOVWF delay_ms_00000_arg_del
0057  2010  	CALL delay_ms_00000

    }
}
0053  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\RF\RF_flowcode\nrf_873lib_rx.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Thursday, July 30, 2020 15:24:24
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_radio_tx_init();
void FCM_flush_tx_rx();
void FCM_radio_senddata();
void FCM_radio_rx_init();
void FCM_radio_recievedata();
void FCM_display_rxdata();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT8 FCV_RCV_DATA = (0xff);
046D  30FF  	MOVLW 0xFF
046E  00C2  	MOVWF gbl_FCV_RCV_DATA

MX_BOOL FCV_DATAIN_BIT = (1);
046F  1443  	BSF gbl_FCV_DATAIN_BIT,0

MX_UINT8 FCV_CURSORX = (0x0);
0470  01C4  	CLRF gbl_FCV_CURSORX

MX_UINT8 FCV_SPI_MISO = (0xff);
0471  30FF  	MOVLW 0xFF
0472  00C5  	MOVWF gbl_FCV_SPI_MISO

MX_UINT8 FCV_SPI_MOSI = (0xff);
0473  30FF  	MOVLW 0xFF
0474  00C6  	MOVWF gbl_FCV_SPI_MOSI


MX_UINT8 FCLV_LOOP1;
MX_UINT8 FCLV_LOOP2;
MX_UINT8 FCLV_LOOP3;
MX_UINT8 FCLV_LOOP4;
MX_UINT8 FCLV_LOOP5;



//SPI_Legacy(0): //Defines:

/**** Macro Substitutions ****
a = Unique Ref
b = SPI Channel
c = MOSI Pin
d = MOSI Port
e = MISO Pin
f = MISO Port
g = SCK Pin
h = SCK Port
i = Clock Polarity + Clock Phase + Data Sample Phase
j = SPI Prescaler
k = SPI Postscaler
l = DAC Enable Pin
m = DAC Enable Port
n = FRAM Enable Pin
o = FRAM Enable Port
******************************/

//MX_SPI_BMODE - Bus Mode - Bit0=CPOL, Bit1=CPHA, Bit2=CSMP
//CPOL - Clock Polarity - Idle State of the clock 0=0, 1=1
//CPHA - Clock Phase - Clock Edge 0=leading edge, 1=trailing edge
//CSMP - Input Data Bit Sample Phase


//Definitions for CS control lines
#define SPI_1_MX_SPI_LEGACY_DAC_PIN		0
#define SPI_1_MX_SPI_LEGACY_DAC_PORT		porta
#define SPI_1_MX_SPI_LEGACY_DAC_TRIS		trisa
#define SPI_1_MX_SPI_LEGACY_FRAM_PIN		0
#define SPI_1_MX_SPI_LEGACY_FRAM_PORT		porta
#define SPI_1_MX_SPI_LEGACY_FRAM_TRIS		trisa


//Definitions for SPI slot allocation
#ifndef	MX_SPI_REF1
	#define MX_SPI_REF1
	#define SPI_1_MX_SPI_UREF			1
	#define MX_SPI_CHANNEL_1		1
	#define MX_SPI_MOSI_PIN_1		-1
	#define MX_SPI_MOSI_PORT_1		port0
	#define MX_SPI_MOSI_TRIS_1		tris0
	#define MX_SPI_MISO_PIN_1		-1
	#define MX_SPI_MISO_PORT_1		port0
	#define MX_SPI_MISO_TRIS_1		tris0
	#define MX_SPI_SCK_PIN_1		-1
	#define MX_SPI_SCK_PORT_1		port0
	#define MX_SPI_SCK_TRIS_1		tris0
	#define MX_SPI_CS_PIN_1			0
	#define MX_SPI_CS_PORT_1		0
	#define MX_SPI_BMODE_1			6
	#define MX_SPI_PR_SCALE_1		16
	#define MX_SPI_PO_SCALE_1		0
	#define MX_SPI_INT_1			0
#else
 #ifndef	MX_SPI_REF2
	#define MX_SPI_REF2
	#define SPI_1_MX_SPI_UREF			2
	#define MX_SPI_CHANNEL_2		1
	#define MX_SPI_MOSI_PIN_2		-1
	#define MX_SPI_MOSI_PORT_2		port0
	#define MX_SPI_MOSI_TRIS_2		tris0
	#define MX_SPI_MISO_PIN_2		-1
	#define MX_SPI_MISO_PORT_2		port0
	#define MX_SPI_MISO_TRIS_2		tris0
	#define MX_SPI_SCK_PIN_2		-1
	#define MX_SPI_SCK_PORT_2		port0
	#define MX_SPI_SCK_TRIS_2		tris0
	#define MX_SPI_CS_PIN_2			0
	#define MX_SPI_CS_PORT_2		0
	#define MX_SPI_BMODE_2			6
	#define MX_SPI_PR_SCALE_2		16
	#define MX_SPI_PO_SCALE_2		0
	#define MX_SPI_INT_2			0
 #else
  #ifndef	MX_SPI_REF3
	#define MX_SPI_REF3
	#define SPI_1_MX_SPI_UREF			3
	#define MX_SPI_CHANNEL_3		1
	#define MX_SPI_MOSI_PIN_3		-1
	#define MX_SPI_MOSI_PORT_3		port0
	#define MX_SPI_MOSI_TRIS_3		tris0
	#define MX_SPI_MISO_PIN_3		-1
	#define MX_SPI_MISO_PORT_3		port0
	#define MX_SPI_MISO_TRIS_3		tris0
	#define MX_SPI_SCK_PIN_3		-1
	#define MX_SPI_SCK_PORT_3		port0
	#define MX_SPI_SCK_TRIS_3		tris0
	#define MX_SPI_CS_PIN_3			0
	#define MX_SPI_CS_PORT_3		0
	#define MX_SPI_BMODE_3			6
	#define MX_SPI_PR_SCALE_3		16
	#define MX_SPI_PO_SCALE_3		0
	#define MX_SPI_INT_3			0
  #else
   #ifndef	MX_SPI_REF4
	#define MX_SPI_REF4
	#define SPI_1_MX_SPI_UREF			4
	#define MX_SPI_CHANNEL_4		1
	#define MX_SPI_MOSI_PIN_4		-1
	#define MX_SPI_MOSI_PORT_4		port0
	#define MX_SPI_MOSI_TRIS_4		tris0
	#define MX_SPI_MISO_PIN_4		-1
	#define MX_SPI_MISO_PORT_4		port0
	#define MX_SPI_MISO_TRIS_4		tris0
	#define MX_SPI_SCK_PIN_4		-1
	#define MX_SPI_SCK_PORT_4		port0
	#define MX_SPI_SCK_TRIS_4		tris0
	#define MX_SPI_CS_PIN_4			0
	#define MX_SPI_CS_PORT_4		0
	#define MX_SPI_BMODE_4			6
	#define MX_SPI_PR_SCALE_4		16
	#define MX_SPI_PO_SCALE_4		0
	#define MX_SPI_INT_4			0
   #endif
  #endif
 #endif
#endif

#define SPI_1_SPI_Master_Init		CAL_APPEND(FC_CAL_SPI_Master_Init_, SPI_1_MX_SPI_UREF)
#define SPI_1_SPI_Master_Uninit	CAL_APPEND(FC_CAL_SPI_Master_Uninit_, SPI_1_MX_SPI_UREF)
#define SPI_1_SPI_Master_Byte		CAL_APPEND(FC_CAL_SPI_Master_Byte_, SPI_1_MX_SPI_UREF)

extern void SPI_1_SPI_Master_Init ();
extern void SPI_1_SPI_Master_Uninit ();
extern MX_UINT8 SPI_1_SPI_Master_Byte (MX_UINT8 DataOut);

//FRAM commands
#define FRAM_WREN  	6
#define FRAM_WRDI  	4
#define FRAM_RDSR  	5
#define FRAM_WRSR  	1
#define FRAM_READ  	3
#define FRAM_WRITE 	2




//SPI_Legacy(0): //Macro function declarations

void FCD_SPI_Legacy0_SPI_Init();
void FCD_SPI_Legacy0_SPI_Uninit();
void FCD_SPI_Legacy0_SPI_Send_Char(MX_UINT8 Char);
void FCD_SPI_Legacy0_SPI_Send_String(MX_STRING String, MX_UINT8 MSZ_String);
MX_UINT8 FCD_SPI_Legacy0_SPI_Get_Char();
void FCD_SPI_Legacy0_SPI_Get_String(MX_CHAR* FCR_RETVAL, MX_UINT8 FCR_RETVAL_SIZE, MX_UINT8 NumBytes);
void FCD_SPI_Legacy0_DAC_Send_Char(MX_UINT8 Char);
void FCD_SPI_Legacy0_NVM_Send_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr, MX_UINT8 Char);
MX_UINT8 FCD_SPI_Legacy0_NVM_Get_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr);
MX_UINT8 FCD_SPI_Legacy0_FramOutput(MX_UINT8 Char);
void FCD_SPI_Legacy0_EnableFRAM();
void FCD_SPI_Legacy0_DisableFRAM();


//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_2__PORT0    portb
	#define LCD_2__PORT1    portb
	#define LCD_2__PORT2    portb
	#define LCD_2__PORT3    portb
	#define LCD_2__PORT4    portb
	#define LCD_2__PORT5    portb
	#define LCD_2__TRIS0    trisb
	#define LCD_2__TRIS1    trisb
	#define LCD_2__TRIS2    trisb
	#define LCD_2__TRIS3    trisb
	#define LCD_2__TRIS4    trisb
	#define LCD_2__TRIS5    trisb
	#define LCD_2__BIT0    	2
	#define LCD_2__BIT1    	3
	#define LCD_2__BIT2    	4
	#define LCD_2__BIT3    	5
	#define LCD_2__RS      	0
	#define LCD_2__E       	1
	#define LCD_2__ROWCNT	4
	#define LCD_2__COLCNT	20

	#ifdef _BOOSTC
	  #define LCD_2__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_2__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_2__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_2__DELAY
	  #define LCD_2__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);



//SPI_Legacy(0): //Macro implementations


void FCD_SPI_Legacy0_SPI_Init()

{
	
		//Disable SPI Devices
		FC_CAL_Bit_High_DDR(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_TRIS, SPI_1_MX_SPI_LEGACY_DAC_PIN);
0371  1683  	BSF STATUS, RP0
0372  1303  	BCF STATUS, RP1
0373  1005  	BCF gbl_trisa,0
0374  1283  	BCF STATUS, RP0
0375  1405  	BSF gbl_porta,0

		FC_CAL_Bit_High_DDR(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_TRIS, SPI_1_MX_SPI_LEGACY_FRAM_PIN);
0376  1683  	BSF STATUS, RP0
0377  1005  	BCF gbl_trisa,0
0378  1283  	BCF STATUS, RP0
0379  1405  	BSF gbl_porta,0


		//Init SPI
		SPI_1_SPI_Master_Init();		//Call initialise function
037A  20E8  	CALL FC_CAL_SPI_0005D


}
037B  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Uninit()
{
	
		//Convert SPI Device Control Lines To Inputs
		FC_CAL_Bit_In_DDR(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_TRIS, SPI_1_MX_SPI_LEGACY_DAC_PIN);
		FC_CAL_Bit_In_DDR(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_TRIS, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

		//Uninit SPI
		SPI_1_SPI_Master_Uninit();		//Call uninitialise function

}

void FCD_SPI_Legacy0_SPI_Send_Char(MX_UINT8 Char)

{
	
		SPI_1_SPI_Master_Byte(Char);
00C6  084A  	MOVF FCD_SPI_Le_00052_arg_Char, W
00C7  00CB  	MOVWF FC_CAL_SPI_0005F_arg_DataOut
00C8  205A  	CALL FC_CAL_SPI_0005F


}
00C9  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Send_String(MX_STRING String, MX_UINT8 MSZ_String)
{
	
		MX_UINT8 idx;
		for(idx = 0; idx < MSZ_String; idx++)
		{
			if (String[idx] == 0)				//End of string data?
				break;

			SPI_1_SPI_Master_Byte(String[idx]);
		}

}

MX_UINT8 FCD_SPI_Legacy0_SPI_Get_Char()

{
	
		MX_UINT8 retVal = 0;
0120  1283  	BCF STATUS, RP0
0121  1303  	BCF STATUS, RP1
0122  01CA  	CLRF FCD_SPI_Le_00057_1_retVal


		retVal = SPI_1_SPI_Master_Byte(0xFF);
0123  30FF  	MOVLW 0xFF
0124  00CB  	MOVWF FC_CAL_SPI_0005F_arg_DataOut
0125  205A  	CALL FC_CAL_SPI_0005F
0126  084D  	MOVF CompTempVarRet2229, W
0127  00CA  	MOVWF FCD_SPI_Le_00057_1_retVal


		return (retVal);
0128  084A  	MOVF FCD_SPI_Le_00057_1_retVal, W
0129  00CB  	MOVWF CompTempVarRet2196


}
012A  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Get_String(MX_CHAR* FCR_RETVAL, MX_UINT8 FCR_RETVAL_SIZE, MX_UINT8 NumBytes)
{
		MX_UINT8 idx;

		if (NumBytes > FCR_RETVAL_SIZE)
			NumBytes = FCR_RETVAL_SIZE;

		for (idx = 0; idx < NumBytes; idx++)
		{
			FCR_RETVAL[idx] = SPI_1_SPI_Master_Byte(0xFF);		//Collect incoming data byte
		}

		if (idx < FCR_RETVAL_SIZE)
			FCR_RETVAL[idx] = 0;					//Terminate string if string variable is longer then expected data

}

void FCD_SPI_Legacy0_DAC_Send_Char(MX_UINT8 Char)
{
	
		MX_UINT8 dac_val;

		FC_CAL_Bit_Low(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_PIN);		//enable dac

		dac_val = (Char & 0xF0) >> 4;
		SPI_1_SPI_Master_Byte(dac_val);

		dac_val = (Char & 0x0F) << 4;
		SPI_1_SPI_Master_Byte(dac_val);

		FC_CAL_Bit_High(SPI_1_MX_SPI_LEGACY_DAC_PORT, SPI_1_MX_SPI_LEGACY_DAC_PIN);		//disable dac

}

void FCD_SPI_Legacy0_NVM_Send_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr, MX_UINT8 Char)
{
	
		//enable writes
		FCD_SPI_Legacy0_EnableFRAM();
		FCD_SPI_Legacy0_FramOutput(FRAM_WREN);
		FCD_SPI_Legacy0_DisableFRAM();

		//send write-fram command, address and data
		FCD_SPI_Legacy0_EnableFRAM();
		FCD_SPI_Legacy0_FramOutput(FRAM_WRITE);
		FCD_SPI_Legacy0_FramOutput(hi_addr);
		FCD_SPI_Legacy0_FramOutput(lo_addr);
		FCD_SPI_Legacy0_FramOutput(Char);
		FCD_SPI_Legacy0_DisableFRAM();

}

MX_UINT8 FCD_SPI_Legacy0_NVM_Get_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr)
{
	
		MX_UINT8 retVal;

		FCD_SPI_Legacy0_EnableFRAM();

		//send read-fram command and address
		FCD_SPI_Legacy0_FramOutput(FRAM_READ);
		FCD_SPI_Legacy0_FramOutput(hi_addr);
		FCD_SPI_Legacy0_FramOutput(lo_addr);

		//read the data
		retVal = FCD_SPI_Legacy0_FramOutput(0x5A);  	//don't care byte of 0x5A

		FCD_SPI_Legacy0_DisableFRAM();

		return(retVal);

}

MX_UINT8 FCD_SPI_Legacy0_FramOutput(MX_UINT8 Char)
{
	
		MX_UINT8 retVal = 0;
		retVal = SPI_1_SPI_Master_Byte(Char);
		return (retVal);

}

void FCD_SPI_Legacy0_EnableFRAM()
{
	
		FC_CAL_Bit_Low(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

}

void FCD_SPI_Legacy0_DisableFRAM()
{
	
		FC_CAL_Bit_High(SPI_1_MX_SPI_LEGACY_FRAM_PORT, SPI_1_MX_SPI_LEGACY_FRAM_PIN);

}



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_2__PORT0, LCD_2__BIT0);
0066  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_2__PORT1, LCD_2__BIT1);
0067  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_2__PORT2, LCD_2__BIT2);
0068  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_2__PORT3, LCD_2__BIT3);
0069  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_2__PORT4, LCD_2__RS);
006A  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_2__PORT5, LCD_2__E);
006B  1086  	BCF gbl_portb,1

		pt = ((in >> 4) & 0x0f);
006C  0E54  	SWAPF FCD_LCDDis_0006B_arg_in, W
006D  390F  	ANDLW 0x0F
006E  00D6  	MOVWF FCD_LCDDis_0006B_1_pt
006F  300F  	MOVLW 0x0F
0070  05D6  	ANDWF FCD_LCDDis_0006B_1_pt, F

		if (pt & 0x01)
0071  1856  	BTFSC FCD_LCDDis_0006B_1_pt,0

		    FC_CAL_Bit_High(LCD_2__PORT0, LCD_2__BIT0);
0072  1506  	BSF gbl_portb,2

		if (pt & 0x02)
0073  18D6  	BTFSC FCD_LCDDis_0006B_1_pt,1

		    FC_CAL_Bit_High(LCD_2__PORT1, LCD_2__BIT1);
0074  1586  	BSF gbl_portb,3

		if (pt & 0x04)
0075  1956  	BTFSC FCD_LCDDis_0006B_1_pt,2

		    FC_CAL_Bit_High(LCD_2__PORT2, LCD_2__BIT2);
0076  1606  	BSF gbl_portb,4

		if (pt & 0x08)
0077  19D6  	BTFSC FCD_LCDDis_0006B_1_pt,3

		    FC_CAL_Bit_High(LCD_2__PORT3, LCD_2__BIT3);
0078  1686  	BSF gbl_portb,5

		if (mask)
0079  08D5  	MOVF FCD_LCDDis_0006B_arg_mask, F
007A  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_2__PORT4, LCD_2__RS);
007B  1406  	BSF gbl_portb,0

		LCD_2__DELAY;
007C  300A  	MOVLW 0x0A
007D  00D7  	MOVWF delay_10us_00000_arg_del
007E  203C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_2__PORT5, LCD_2__E);
007F  1486  	BSF gbl_portb,1

		LCD_2__DELAY;
0080  300A  	MOVLW 0x0A
0081  00D7  	MOVWF delay_10us_00000_arg_del
0082  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_2__PORT5, LCD_2__E);
0083  1086  	BCF gbl_portb,1

		pt = (in & 0x0f);
0084  300F  	MOVLW 0x0F
0085  0554  	ANDWF FCD_LCDDis_0006B_arg_in, W
0086  00D6  	MOVWF FCD_LCDDis_0006B_1_pt

		LCD_2__DELAY;
0087  300A  	MOVLW 0x0A
0088  00D7  	MOVWF delay_10us_00000_arg_del
0089  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_2__PORT0, LCD_2__BIT0);
008A  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_2__PORT1, LCD_2__BIT1);
008B  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_2__PORT2, LCD_2__BIT2);
008C  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_2__PORT3, LCD_2__BIT3);
008D  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_2__PORT4, LCD_2__RS);
008E  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_2__PORT5, LCD_2__E);
008F  1086  	BCF gbl_portb,1

		if (pt & 0x01)
0090  1856  	BTFSC FCD_LCDDis_0006B_1_pt,0

		    FC_CAL_Bit_High(LCD_2__PORT0, LCD_2__BIT0);
0091  1506  	BSF gbl_portb,2

		if (pt & 0x02)
0092  18D6  	BTFSC FCD_LCDDis_0006B_1_pt,1

		    FC_CAL_Bit_High(LCD_2__PORT1, LCD_2__BIT1);
0093  1586  	BSF gbl_portb,3

		if (pt & 0x04)
0094  1956  	BTFSC FCD_LCDDis_0006B_1_pt,2

		    FC_CAL_Bit_High(LCD_2__PORT2, LCD_2__BIT2);
0095  1606  	BSF gbl_portb,4

		if (pt & 0x08)
0096  19D6  	BTFSC FCD_LCDDis_0006B_1_pt,3

		    FC_CAL_Bit_High(LCD_2__PORT3, LCD_2__BIT3);
0097  1686  	BSF gbl_portb,5

		if (mask)
0098  08D5  	MOVF FCD_LCDDis_0006B_arg_mask, F
0099  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_2__PORT4, LCD_2__RS);
009A  1406  	BSF gbl_portb,0

		LCD_2__DELAY;
009B  300A  	MOVLW 0x0A
009C  00D7  	MOVWF delay_10us_00000_arg_del
009D  203C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_2__PORT5, LCD_2__E);
009E  1486  	BSF gbl_portb,1

		LCD_2__DELAY;
009F  300A  	MOVLW 0x0A
00A0  00D7  	MOVWF delay_10us_00000_arg_del
00A1  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_2__PORT5, LCD_2__E);
00A2  1086  	BCF gbl_portb,1

		LCD_2__DELAY;
00A3  300A  	MOVLW 0x0A
00A4  00D7  	MOVWF delay_10us_00000_arg_del
00A5  203C  	CALL delay_10us_00000


}
00A6  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_2__PORT0, LCD_2__TRIS0, LCD_2__BIT0);
038D  1683  	BSF STATUS, RP0
038E  1303  	BCF STATUS, RP1
038F  1106  	BCF gbl_trisb,2
0390  1283  	BCF STATUS, RP0
0391  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low_DDR(LCD_2__PORT1, LCD_2__TRIS1, LCD_2__BIT1);
0392  1683  	BSF STATUS, RP0
0393  1186  	BCF gbl_trisb,3
0394  1283  	BCF STATUS, RP0
0395  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low_DDR(LCD_2__PORT2, LCD_2__TRIS2, LCD_2__BIT2);
0396  1683  	BSF STATUS, RP0
0397  1206  	BCF gbl_trisb,4
0398  1283  	BCF STATUS, RP0
0399  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_2__PORT3, LCD_2__TRIS3, LCD_2__BIT3);
039A  1683  	BSF STATUS, RP0
039B  1286  	BCF gbl_trisb,5
039C  1283  	BCF STATUS, RP0
039D  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low_DDR(LCD_2__PORT4, LCD_2__TRIS4, LCD_2__RS);
039E  1683  	BSF STATUS, RP0
039F  1006  	BCF gbl_trisb,0
03A0  1283  	BCF STATUS, RP0
03A1  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low_DDR(LCD_2__PORT5, LCD_2__TRIS5, LCD_2__E);
03A2  1683  	BSF STATUS, RP0
03A3  1086  	BCF gbl_trisb,1
03A4  1283  	BCF STATUS, RP0
03A5  1086  	BCF gbl_portb,1


		Wdt_Delay_Ms(12);
03A6  300C  	MOVLW 0x0C
03A7  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03A8  204F  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
03A9  3033  	MOVLW 0x33
03AA  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
03AB  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
03AC  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
03AD  3002  	MOVLW 0x02
03AE  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03AF  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
03B0  3033  	MOVLW 0x33
03B1  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
03B2  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
03B3  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
03B4  3002  	MOVLW 0x02
03B5  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03B6  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
03B7  3032  	MOVLW 0x32
03B8  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
03B9  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
03BA  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
03BB  3002  	MOVLW 0x02
03BC  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03BD  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
03BE  302C  	MOVLW 0x2C
03BF  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
03C0  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
03C1  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
03C2  3002  	MOVLW 0x02
03C3  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03C4  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
03C5  3006  	MOVLW 0x06
03C6  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
03C7  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
03C8  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
03C9  3002  	MOVLW 0x02
03CA  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03CB  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
03CC  300C  	MOVLW 0x0C
03CD  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
03CE  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
03CF  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
03D0  3002  	MOVLW 0x02
03D1  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03D2  204F  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
03D3  3001  	MOVLW 0x01
03D4  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
03D5  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
03D6  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
03D7  3002  	MOVLW 0x02
03D8  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03D9  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
03DA  3002  	MOVLW 0x02
03DB  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
03DC  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
03DD  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
03DE  3002  	MOVLW 0x02
03DF  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
03E0  204F  	CALL Wdt_Delay__0003E


}
03E1  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
037C  3001  	MOVLW 0x01
037D  1283  	BCF STATUS, RP0
037E  1303  	BCF STATUS, RP1
037F  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
0380  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
0381  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
0382  3002  	MOVLW 0x02
0383  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
0384  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0385  3002  	MOVLW 0x02
0386  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
0387  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
0388  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
0389  3002  	MOVLW 0x02
038A  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
038B  204F  	CALL Wdt_Delay__0003E


}
038C  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_2__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_2__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_2__ROWCNT == 4)
		if (y==0)
00CA  08CE  	MOVF FCD_LCDDis_0005A_arg_y, F
00CB  1D03  	BTFSS STATUS,Z
00CC  28D0  	GOTO	label11
00D0        label11

			y=0x80;
00CD  3080  	MOVLW 0x80
00CE  00CE  	MOVWF FCD_LCDDis_0005A_arg_y

		else if (y==1)
00CF  28DF  	GOTO	label14
00D0  034E  	DECF FCD_LCDDis_0005A_arg_y, W
00D1  1D03  	BTFSS STATUS,Z
00D2  28D6  	GOTO	label12
00D6        label12

			y=0xc0;
00D3  30C0  	MOVLW 0xC0
00D4  00CE  	MOVWF FCD_LCDDis_0005A_arg_y


		#if (LCD_2__COLCNT == 16)
			else if (y==2)
				y=0x90;
			else
				y=0xd0;
		#endif

		#if (LCD_2__COLCNT == 20)
			else if (y==2)
00D5  28DF  	GOTO	label14
00D6  084E  	MOVF FCD_LCDDis_0005A_arg_y, W
00D7  3A02  	XORLW 0x02
00D8  1D03  	BTFSS STATUS,Z
00D9  28DD  	GOTO	label13
00DD        label13

				y=0x94;
00DA  3094  	MOVLW 0x94
00DB  00CE  	MOVWF FCD_LCDDis_0005A_arg_y

			else
00DC  28DF  	GOTO	label14
00DF        label14

				y=0xd4;
00DD  30D4  	MOVLW 0xD4
00DE  00CE  	MOVWF FCD_LCDDis_0005A_arg_y

		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
00DF  084D  	MOVF FCD_LCDDis_0005A_arg_x, W
00E0  074E  	ADDWF FCD_LCDDis_0005A_arg_y, W
00E1  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
00E2  01D5  	CLRF FCD_LCDDis_0006B_arg_mask
00E3  2066  	CALL FCD_LCDDis_0006B

		Wdt_Delay_Ms(2);
00E4  3002  	MOVLW 0x02
00E5  00CF  	MOVWF Wdt_Delay__0003E_arg_delay
00E6  204F  	CALL Wdt_Delay__0003E


}
00E7  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)

{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
012B  1FCB  	BTFSS FCD_LCDDis_0005C_arg_Number+D'1',7
012C  293A  	GOTO	label15
013A        label15

		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
012D  302D  	MOVLW 0x2D
012E  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
012F  3010  	MOVLW 0x10
0130  00D5  	MOVWF FCD_LCDDis_0006B_arg_mask
0131  2066  	CALL FCD_LCDDis_0006B

			Number = 0 - Number;
0132  084A  	MOVF FCD_LCDDis_0005C_arg_Number, W
0133  3C00  	SUBLW 0x00
0134  00CF  	MOVWF CompTempVar2209
0135  09CB  	COMF FCD_LCDDis_0005C_arg_Number+D'1', F
0136  1803  	BTFSC STATUS,C
0137  0ACB  	INCF FCD_LCDDis_0005C_arg_Number+D'1', F
0138  084F  	MOVF CompTempVar2209, W
0139  00CA  	MOVWF FCD_LCDDis_0005C_arg_Number

		}

		tmp_int = Number;
013A  084A  	MOVF FCD_LCDDis_0005C_arg_Number, W
013B  00CC  	MOVWF FCD_LCDDis_0005C_1_tmp_int
013C  084B  	MOVF FCD_LCDDis_0005C_arg_Number+D'1', W
013D  00CD  	MOVWF FCD_LCDDis_0005C_1_tmp_int+D'1'

		if (Number >= 10000)
013E  3027  	MOVLW 0x27
013F  024B  	SUBWF FCD_LCDDis_0005C_arg_Number+D'1', W
0140  1D03  	BTFSS STATUS,Z
0141  2944  	GOTO	label16
0142  3010  	MOVLW 0x10
0143  024A  	SUBWF FCD_LCDDis_0005C_arg_Number, W
0144        label16
0144  1C03  	BTFSS STATUS,C
0145  2972  	GOTO	label20
0146  1BCB  	BTFSC FCD_LCDDis_0005C_arg_Number+D'1',7
0147  2972  	GOTO	label20

		{
			tmp_byte = tmp_int / 10000;
0148  01D3  	CLRF CompTempVar2212
0149  084C  	MOVF FCD_LCDDis_0005C_1_tmp_int, W
014A  00CF  	MOVWF __div_16_1_00003_arg_a
014B  084D  	MOVF FCD_LCDDis_0005C_1_tmp_int+D'1', W
014C  00D0  	MOVWF __div_16_1_00003_arg_a+D'1'
014D  1FCD  	BTFSS FCD_LCDDis_0005C_1_tmp_int+D'1',7
014E  2955  	GOTO	label17
014F  09CF  	COMF __div_16_1_00003_arg_a, F
0150  09D0  	COMF __div_16_1_00003_arg_a+D'1', F
0151  0ACF  	INCF __div_16_1_00003_arg_a, F
0152  1903  	BTFSC STATUS,Z
0153  0AD0  	INCF __div_16_1_00003_arg_a+D'1', F
0154  0AD3  	INCF CompTempVar2212, F
0155        label17
0155  3010  	MOVLW 0x10
0156  00D1  	MOVWF __div_16_1_00003_arg_b
0157  3027  	MOVLW 0x27
0158  00D2  	MOVWF __div_16_1_00003_arg_b+D'1'
0159  20A7  	CALL __div_16_1_00003
015A  0858  	MOVF CompTempVarRet214, W
015B  00CE  	MOVWF FCD_LCDDis_0005C_1_tmp_byte
015C  1C53  	BTFSS CompTempVar2212,0
015D  2960  	GOTO	label18
015E  09CE  	COMF FCD_LCDDis_0005C_1_tmp_byte, F
015F  0ACE  	INCF FCD_LCDDis_0005C_1_tmp_byte, F
0160        label18

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0160  084E  	MOVF FCD_LCDDis_0005C_1_tmp_byte, W
0161  3E30  	ADDLW 0x30
0162  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
0163  3010  	MOVLW 0x10
0164  00D5  	MOVWF FCD_LCDDis_0006B_arg_mask
0165  2066  	CALL FCD_LCDDis_0006B


			while (tmp_byte > 0)
0166        label19
0166  084E  	MOVF FCD_LCDDis_0005C_1_tmp_byte, W
0167  3C00  	SUBLW 0x00
0168  1803  	BTFSC STATUS,C
0169  2972  	GOTO	label20
0171  2966  	GOTO	label19
0172        label20

			{
				tmp_int = tmp_int - 10000;
016A  3010  	MOVLW 0x10
016B  02CC  	SUBWF FCD_LCDDis_0005C_1_tmp_int, F
016C  3027  	MOVLW 0x27
016D  1C03  	BTFSS STATUS,C
016E  3028  	MOVLW 0x28
016F  02CD  	SUBWF FCD_LCDDis_0005C_1_tmp_int+D'1', F

				tmp_byte--;
0170  03CE  	DECF FCD_LCDDis_0005C_1_tmp_byte, F

			}
		}
		if (Number >= 1000)
0172  3003  	MOVLW 0x03
0173  024B  	SUBWF FCD_LCDDis_0005C_arg_Number+D'1', W
0174  1D03  	BTFSS STATUS,Z
0175  2978  	GOTO	label21
0176  30E8  	MOVLW 0xE8
0177  024A  	SUBWF FCD_LCDDis_0005C_arg_Number, W
0178        label21
0178  1C03  	BTFSS STATUS,C
0179  29A8  	GOTO	label25
017A  1BCB  	BTFSC FCD_LCDDis_0005C_arg_Number+D'1',7
017B  29A8  	GOTO	label25

		{
			tmp_byte = tmp_int / 1000;
017C  01D4  	CLRF CompTempVar2216
017D  084C  	MOVF FCD_LCDDis_0005C_1_tmp_int, W
017E  00CF  	MOVWF __div_16_1_00003_arg_a
017F  084D  	MOVF FCD_LCDDis_0005C_1_tmp_int+D'1', W
0180  00D0  	MOVWF __div_16_1_00003_arg_a+D'1'
0181  1FCD  	BTFSS FCD_LCDDis_0005C_1_tmp_int+D'1',7
0182  2989  	GOTO	label22
0183  09CF  	COMF __div_16_1_00003_arg_a, F
0184  09D0  	COMF __div_16_1_00003_arg_a+D'1', F
0185  0ACF  	INCF __div_16_1_00003_arg_a, F
0186  1903  	BTFSC STATUS,Z
0187  0AD0  	INCF __div_16_1_00003_arg_a+D'1', F
0188  0AD4  	INCF CompTempVar2216, F
0189        label22
0189  30E8  	MOVLW 0xE8
018A  00D1  	MOVWF __div_16_1_00003_arg_b
018B  3003  	MOVLW 0x03
018C  00D2  	MOVWF __div_16_1_00003_arg_b+D'1'
018D  20A7  	CALL __div_16_1_00003
018E  0858  	MOVF CompTempVarRet214, W
018F  00D3  	MOVWF CompTempVar2215
0190  1C54  	BTFSS CompTempVar2216,0
0191  2994  	GOTO	label23
0192  09D3  	COMF CompTempVar2215, F
0193  0AD3  	INCF CompTempVar2215, F
0194        label23
0194  0853  	MOVF CompTempVar2215, W
0195  00CE  	MOVWF FCD_LCDDis_0005C_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0196  084E  	MOVF FCD_LCDDis_0005C_1_tmp_byte, W
0197  3E30  	ADDLW 0x30
0198  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
0199  3010  	MOVLW 0x10
019A  00D5  	MOVWF FCD_LCDDis_0006B_arg_mask
019B  2066  	CALL FCD_LCDDis_0006B


			while (tmp_byte > 0)
019C        label24
019C  084E  	MOVF FCD_LCDDis_0005C_1_tmp_byte, W
019D  3C00  	SUBLW 0x00
019E  1803  	BTFSC STATUS,C
019F  29A8  	GOTO	label25
01A7  299C  	GOTO	label24
01A8        label25

			{
				tmp_int = tmp_int - 1000;
01A0  30E8  	MOVLW 0xE8
01A1  02CC  	SUBWF FCD_LCDDis_0005C_1_tmp_int, F
01A2  3003  	MOVLW 0x03
01A3  1C03  	BTFSS STATUS,C
01A4  3004  	MOVLW 0x04
01A5  02CD  	SUBWF FCD_LCDDis_0005C_1_tmp_int+D'1', F

				tmp_byte--;
01A6  03CE  	DECF FCD_LCDDis_0005C_1_tmp_byte, F

			}
		}
		if (Number >= 100)
01A8  084B  	MOVF FCD_LCDDis_0005C_arg_Number+D'1', W
01A9  3A80  	XORLW 0x80
01AA  00CF  	MOVWF CompTempVar2219
01AB  3080  	MOVLW 0x80
01AC  024F  	SUBWF CompTempVar2219, W
01AD  1D03  	BTFSS STATUS,Z
01AE  29B1  	GOTO	label26
01AF  3064  	MOVLW 0x64
01B0  024A  	SUBWF FCD_LCDDis_0005C_arg_Number, W
01B1        label26
01B1  1C03  	BTFSS STATUS,C
01B2  29DD  	GOTO	label30

		{
			tmp_byte = tmp_int / 100;
01B3  01D4  	CLRF CompTempVar2221
01B4  084C  	MOVF FCD_LCDDis_0005C_1_tmp_int, W
01B5  00CF  	MOVWF __div_16_1_00003_arg_a
01B6  084D  	MOVF FCD_LCDDis_0005C_1_tmp_int+D'1', W
01B7  00D0  	MOVWF __div_16_1_00003_arg_a+D'1'
01B8  1FCD  	BTFSS FCD_LCDDis_0005C_1_tmp_int+D'1',7
01B9  29C0  	GOTO	label27
01BA  09CF  	COMF __div_16_1_00003_arg_a, F
01BB  09D0  	COMF __div_16_1_00003_arg_a+D'1', F
01BC  0ACF  	INCF __div_16_1_00003_arg_a, F
01BD  1903  	BTFSC STATUS,Z
01BE  0AD0  	INCF __div_16_1_00003_arg_a+D'1', F
01BF  0AD4  	INCF CompTempVar2221, F
01C0        label27
01C0  3064  	MOVLW 0x64
01C1  00D1  	MOVWF __div_16_1_00003_arg_b
01C2  01D2  	CLRF __div_16_1_00003_arg_b+D'1'
01C3  20A7  	CALL __div_16_1_00003
01C4  0858  	MOVF CompTempVarRet214, W
01C5  00D3  	MOVWF CompTempVar2220
01C6  1C54  	BTFSS CompTempVar2221,0
01C7  29CA  	GOTO	label28
01C8  09D3  	COMF CompTempVar2220, F
01C9  0AD3  	INCF CompTempVar2220, F
01CA        label28
01CA  0853  	MOVF CompTempVar2220, W
01CB  00CE  	MOVWF FCD_LCDDis_0005C_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
01CC  084E  	MOVF FCD_LCDDis_0005C_1_tmp_byte, W
01CD  3E30  	ADDLW 0x30
01CE  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
01CF  3010  	MOVLW 0x10
01D0  00D5  	MOVWF FCD_LCDDis_0006B_arg_mask
01D1  2066  	CALL FCD_LCDDis_0006B


			while (tmp_byte > 0)
01D2        label29
01D2  084E  	MOVF FCD_LCDDis_0005C_1_tmp_byte, W
01D3  3C00  	SUBLW 0x00
01D4  1803  	BTFSC STATUS,C
01D5  29DD  	GOTO	label30
01DC  29D2  	GOTO	label29
01DD        label30

			{
				tmp_int = tmp_int - 100;
01D6  3064  	MOVLW 0x64
01D7  02CC  	SUBWF FCD_LCDDis_0005C_1_tmp_int, F
01D8  08CD  	MOVF FCD_LCDDis_0005C_1_tmp_int+D'1', F
01D9  1C03  	BTFSS STATUS,C
01DA  03CD  	DECF FCD_LCDDis_0005C_1_tmp_int+D'1', F

				tmp_byte--;
01DB  03CE  	DECF FCD_LCDDis_0005C_1_tmp_byte, F

			}
		}
		if (Number >= 10)
01DD  084B  	MOVF FCD_LCDDis_0005C_arg_Number+D'1', W
01DE  3A80  	XORLW 0x80
01DF  00CF  	MOVWF CompTempVar2224
01E0  3080  	MOVLW 0x80
01E1  024F  	SUBWF CompTempVar2224, W
01E2  1D03  	BTFSS STATUS,Z
01E3  29E6  	GOTO	label31
01E4  300A  	MOVLW 0x0A
01E5  024A  	SUBWF FCD_LCDDis_0005C_arg_Number, W
01E6        label31
01E6  1C03  	BTFSS STATUS,C
01E7  2A12  	GOTO	label35

		{
			tmp_byte = tmp_int / 10;
01E8  01D4  	CLRF CompTempVar2226
01E9  084C  	MOVF FCD_LCDDis_0005C_1_tmp_int, W
01EA  00CF  	MOVWF __div_16_1_00003_arg_a
01EB  084D  	MOVF FCD_LCDDis_0005C_1_tmp_int+D'1', W
01EC  00D0  	MOVWF __div_16_1_00003_arg_a+D'1'
01ED  1FCD  	BTFSS FCD_LCDDis_0005C_1_tmp_int+D'1',7
01EE  29F5  	GOTO	label32
01EF  09CF  	COMF __div_16_1_00003_arg_a, F
01F0  09D0  	COMF __div_16_1_00003_arg_a+D'1', F
01F1  0ACF  	INCF __div_16_1_00003_arg_a, F
01F2  1903  	BTFSC STATUS,Z
01F3  0AD0  	INCF __div_16_1_00003_arg_a+D'1', F
01F4  0AD4  	INCF CompTempVar2226, F
01F5        label32
01F5  300A  	MOVLW 0x0A
01F6  00D1  	MOVWF __div_16_1_00003_arg_b
01F7  01D2  	CLRF __div_16_1_00003_arg_b+D'1'
01F8  20A7  	CALL __div_16_1_00003
01F9  0858  	MOVF CompTempVarRet214, W
01FA  00D3  	MOVWF CompTempVar2225
01FB  1C54  	BTFSS CompTempVar2226,0
01FC  29FF  	GOTO	label33
01FD  09D3  	COMF CompTempVar2225, F
01FE  0AD3  	INCF CompTempVar2225, F
01FF        label33
01FF  0853  	MOVF CompTempVar2225, W
0200  00CE  	MOVWF FCD_LCDDis_0005C_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0201  084E  	MOVF FCD_LCDDis_0005C_1_tmp_byte, W
0202  3E30  	ADDLW 0x30
0203  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
0204  3010  	MOVLW 0x10
0205  00D5  	MOVWF FCD_LCDDis_0006B_arg_mask
0206  2066  	CALL FCD_LCDDis_0006B


			while (tmp_byte > 0)
0207        label34
0207  084E  	MOVF FCD_LCDDis_0005C_1_tmp_byte, W
0208  3C00  	SUBLW 0x00
0209  1803  	BTFSC STATUS,C
020A  2A12  	GOTO	label35
0211  2A07  	GOTO	label34
0212        label35

			{
				tmp_int = tmp_int - 10;
020B  300A  	MOVLW 0x0A
020C  02CC  	SUBWF FCD_LCDDis_0005C_1_tmp_int, F
020D  08CD  	MOVF FCD_LCDDis_0005C_1_tmp_int+D'1', F
020E  1C03  	BTFSS STATUS,C
020F  03CD  	DECF FCD_LCDDis_0005C_1_tmp_int+D'1', F

				tmp_byte--;
0210  03CE  	DECF FCD_LCDDis_0005C_1_tmp_byte, F

			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);
0212  084C  	MOVF FCD_LCDDis_0005C_1_tmp_int, W
0213  3E30  	ADDLW 0x30
0214  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
0215  3010  	MOVLW 0x10
0216  00D5  	MOVWF FCD_LCDDis_0006B_arg_mask
0217  2066  	CALL FCD_LCDDis_0006B


}
0218  0008  	RETURN


void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
0219  01D3  	CLRF FCD_LCDDis_0005B_1_idx


		for (idx=0; idx<MSZ_String; idx++)
021A  01D3  	CLRF FCD_LCDDis_0005B_1_idx
021B        label36
021B  0852  	MOVF FCD_LCDDis_0005B_arg_MSZ_String, W
021C  0253  	SUBWF FCD_LCDDis_0005B_1_idx, W
021D  1803  	BTFSC STATUS,C
0233  0AD3  	INCF FCD_LCDDis_0005B_1_idx, F
0234  2A1B  	GOTO	label36

		{
			if (String[idx] == 0)
021F  1383  	BCF STATUS,IRP
0220  184B  	BTFSC FCD_LCDDis_0005B_arg_String+D'1',0
0221  1783  	BSF STATUS,IRP
0222  084A  	MOVF FCD_LCDDis_0005B_arg_String, W
0223  0753  	ADDWF FCD_LCDDis_0005B_1_idx, W
0224  0084  	MOVWF FSR
0225  0880  	MOVF INDF, F
0226  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
0228  1383  	BCF STATUS,IRP
0229  184B  	BTFSC FCD_LCDDis_0005B_arg_String+D'1',0
022A  1783  	BSF STATUS,IRP
022B  084A  	MOVF FCD_LCDDis_0005B_arg_String, W
022C  0753  	ADDWF FCD_LCDDis_0005B_1_idx, W
022D  0084  	MOVWF FSR
022E  0800  	MOVF INDF, W
022F  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
0230  3010  	MOVLW 0x10
0231  00D5  	MOVWF FCD_LCDDis_0006B_arg_mask
0232  2066  	CALL FCD_LCDDis_0006B

		}

}
021E  0008  	RETURN
0227  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)

{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_2__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_2__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_2__ROWCNT == 4)
			#if (LCD_2__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_2__COLCNT == 20)
				rowcount=20;
0235  3014  	MOVLW 0x14
0236  00CC  	MOVWF FCD_LCDDis_00059_1_rowcount

			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);
0237  01CD  	CLRF FCD_LCDDis_0005A_arg_x
0238  084A  	MOVF FCD_LCDDis_00059_arg_Line, W
0239  00CE  	MOVWF FCD_LCDDis_0005A_arg_y
023A  20CA  	CALL FCD_LCDDis_0005A


		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
023B  01CB  	CLRF FCD_LCDDis_00059_1_count
023C        label37
023C  084C  	MOVF FCD_LCDDis_00059_1_rowcount, W
023D  024B  	SUBWF FCD_LCDDis_00059_1_count, W
023E  1803  	BTFSC STATUS,C
023F  2A47  	GOTO	label38
0245  0ACB  	INCF FCD_LCDDis_00059_1_count, F
0246  2A3C  	GOTO	label37
0247        label38

			FCD_LCDDisplay0_RawSend(' ', 0x10);
0240  3020  	MOVLW 0x20
0241  00D4  	MOVWF FCD_LCDDis_0006B_arg_in
0242  3010  	MOVLW 0x10
0243  00D5  	MOVWF FCD_LCDDis_0006B_arg_mask
0244  2066  	CALL FCD_LCDDis_0006B


		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);
0247  01CD  	CLRF FCD_LCDDis_0005A_arg_x
0248  084A  	MOVF FCD_LCDDis_00059_arg_Line, W
0249  00CE  	MOVWF FCD_LCDDis_0005A_arg_y
024A  20CA  	CALL FCD_LCDDis_0005A


}
024B  0008  	RETURN


void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_radio_tx_init()
{

	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);

	//Comment:
	//setup_retr_reg(0x04)=0x00

	//W_setup_retr_reg
	//Calculation:
	//  spi_mosi = 0b00100100
	FCV_SPI_MOSI = 36;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x00
	FCV_SPI_MOSI = 0x00;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//setup_aw_reg(0x03)=0x03

	//W_setup_aw_reg
	//Calculation:
	//  spi_mosi = 0b00100011
	FCV_SPI_MOSI = 35;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x03
	FCV_SPI_MOSI = 0x03;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//rf_setup_reg(0x06)=0E

	//W_rf_setup_reg
	//Calculation:
	//  spi_mosi = 0b00100110
	FCV_SPI_MOSI = 38;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x0E
	FCV_SPI_MOSI = 0x0E;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//rf_ch_reg(0x05)=09

	//W_rf_ch_reg
	//Calculation:
	//  spi_mosi = 0b00100101
	FCV_SPI_MOSI = 37;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x09
	FCV_SPI_MOSI = 0x09;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//en_aa_reg(0x01)=00

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100001
	FCV_SPI_MOSI = 33;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x00
	FCV_SPI_MOSI = 0x00;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//config_reg(0x00)=0x38

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x38
	FCV_SPI_MOSI = 0x38;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//set_txrx_add
	//tx_addr_reg(0x10)

	//W_tx_addr_reg
	//Calculation:
	//  spi_mosi = 0b00110000
	FCV_SPI_MOSI = 48;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Loop
	//Loop: Loop 5 times
	for (FCLV_LOOP1=0; FCLV_LOOP1<5; FCLV_LOOP1++)
	{

		//data
		//Calculation:
		//  spi_mosi = 0xE7
		FCV_SPI_MOSI = 0xE7;

		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);


	}

	//Comment:
	//set_txrx_add
	//rx_addr_p0_reg(0x0A)

	//W_tx_addr_reg
	//Calculation:
	//  spi_mosi = 0b00101010
	FCV_SPI_MOSI = 42;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Loop
	//Loop: Loop 5 times
	for (FCLV_LOOP2=0; FCLV_LOOP2<5; FCLV_LOOP2++)
	{

		//data
		//Calculation:
		//  spi_mosi = 0xE7
		FCV_SPI_MOSI = 0xE7;

		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);


	}

	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);

	//Call Macro
	//Call Macro: flush_tx_rx()
	FCM_flush_tx_rx();

}


void FCM_flush_tx_rx()

{

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
00FB  30FB  	MOVLW 0xFB
00FC  1683  	BSF STATUS, RP0
00FD  1303  	BCF STATUS, RP1
00FE  0507  	ANDWF gbl_trisc, W
00FF  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
0100  30FB  	MOVLW 0xFB
0101  1283  	BCF STATUS, RP0
0102  0507  	ANDWF gbl_portc, W
0103  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 8 us
	delay_us(8);
0104  3008  	MOVLW 0x08
0105  00CA  	MOVWF delay_us_00000_arg_del
0106  204A  	CALL delay_us_00000


	//Comment:
	//flush_tx

	//command
	//Calculation:
	//  spi_mosi = 0xE1
	FCV_SPI_MOSI = 0xE1;
0107  30E1  	MOVLW 0xE1
0108  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0109  0846  	MOVF gbl_FCV_SPI_MOSI, W
010A  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
010B  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//flush_rx

	//command
	//Calculation:
	//  spi_mosi = 0xE2
	FCV_SPI_MOSI = 0xE2;
010C  30E2  	MOVLW 0xE2
010D  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
010E  0846  	MOVF gbl_FCV_SPI_MOSI, W
010F  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
0110  20C6  	CALL FCD_SPI_Le_00052


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0111  30FB  	MOVLW 0xFB
0112  1683  	BSF STATUS, RP0
0113  0507  	ANDWF gbl_trisc, W
0114  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0115  30FB  	MOVLW 0xFB
0116  1283  	BCF STATUS, RP0
0117  0507  	ANDWF gbl_portc, W
0118  00CA  	MOVWF CompTempVar2189
0119  3004  	MOVLW 0x04
011A  044A  	IORWF CompTempVar2189, W
011B  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);
011C  3008  	MOVLW 0x08
011D  00CA  	MOVWF delay_us_00000_arg_del
011E  204A  	CALL delay_us_00000


}
011F  0008  	RETURN



void FCM_radio_senddata()
{

	//Call Macro
	//Call Macro: flush_tx_rx()
	FCM_flush_tx_rx();

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);

	//Comment:
	//config_reg(0x00)=0x3A

	//W_setup_retr_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x3A
	FCV_SPI_MOSI = 0x3A;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//Comment:
	//write_tx_payload

	//command
	//Calculation:
	//  spi_mosi = 0xA0
	FCV_SPI_MOSI = 0xA0;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0xAA
	FCV_SPI_MOSI = 0xAA;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);

	//CE
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
	if ((1))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;

	//Delay
	//Delay: 60 us
	delay_us(60);

	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;

	//Comment:
	//config_reg(0x00)=0x38

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);

	//W_setup_retr_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//data
	//Calculation:
	//  spi_mosi = 0x38
	FCV_SPI_MOSI = 0x38;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);

	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);

}


void FCM_radio_rx_init()

{

	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
0271  30FD  	MOVLW 0xFD
0272  1683  	BSF STATUS, RP0
0273  1303  	BCF STATUS, RP1
0274  0507  	ANDWF gbl_trisc, W
0275  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
0276  30FD  	MOVLW 0xFD
0277  1283  	BCF STATUS, RP0
0278  0507  	ANDWF gbl_portc, W
0279  0087  	MOVWF gbl_portc


	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
027A  30FB  	MOVLW 0xFB
027B  1683  	BSF STATUS, RP0
027C  0507  	ANDWF gbl_trisc, W
027D  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
027E  30FB  	MOVLW 0xFB
027F  1283  	BCF STATUS, RP0
0280  0507  	ANDWF gbl_portc, W
0281  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 8 us
	delay_us(8);
0282  3008  	MOVLW 0x08
0283  00CA  	MOVWF delay_us_00000_arg_del
0284  204A  	CALL delay_us_00000


	//Comment:
	//config_reg(0x00)=0x38

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;
0285  3020  	MOVLW 0x20
0286  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0287  0846  	MOVF gbl_FCV_SPI_MOSI, W
0288  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
0289  20C6  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x38
	FCV_SPI_MOSI = 0x38;
028A  3038  	MOVLW 0x38
028B  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
028C  0846  	MOVF gbl_FCV_SPI_MOSI, W
028D  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
028E  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//setup_retr_reg(0x04)=0x00

	//W_setup_retr_reg
	//Calculation:
	//  spi_mosi = 0b00100100
	FCV_SPI_MOSI = 36;
028F  3024  	MOVLW 0x24
0290  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0291  0846  	MOVF gbl_FCV_SPI_MOSI, W
0292  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
0293  20C6  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x00
	FCV_SPI_MOSI = 0x00;
0294  01C6  	CLRF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0295  0846  	MOVF gbl_FCV_SPI_MOSI, W
0296  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
0297  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//setup_aw_reg(0x03)=0x03

	//W_setup_aw_reg
	//Calculation:
	//  spi_mosi = 0b00100011
	FCV_SPI_MOSI = 35;
0298  3023  	MOVLW 0x23
0299  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
029A  0846  	MOVF gbl_FCV_SPI_MOSI, W
029B  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
029C  20C6  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x03
	FCV_SPI_MOSI = 0x03;
029D  3003  	MOVLW 0x03
029E  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
029F  0846  	MOVF gbl_FCV_SPI_MOSI, W
02A0  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02A1  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//rf_setup_reg(0x06)=0E

	//W_rf_setup_reg
	//Calculation:
	//  spi_mosi = 0b00100110
	FCV_SPI_MOSI = 38;
02A2  3026  	MOVLW 0x26
02A3  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02A4  0846  	MOVF gbl_FCV_SPI_MOSI, W
02A5  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02A6  20C6  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x0E
	FCV_SPI_MOSI = 0x0E;
02A7  300E  	MOVLW 0x0E
02A8  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02A9  0846  	MOVF gbl_FCV_SPI_MOSI, W
02AA  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02AB  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//rf_ch_reg(0x05)=09

	//W_rf_ch_reg
	//Calculation:
	//  spi_mosi = 0b00100101
	FCV_SPI_MOSI = 37;
02AC  3025  	MOVLW 0x25
02AD  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02AE  0846  	MOVF gbl_FCV_SPI_MOSI, W
02AF  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02B0  20C6  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x09
	FCV_SPI_MOSI = 0x09;
02B1  3009  	MOVLW 0x09
02B2  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02B3  0846  	MOVF gbl_FCV_SPI_MOSI, W
02B4  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02B5  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//en_aa_reg(0x01)=00

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100001
	FCV_SPI_MOSI = 33;
02B6  3021  	MOVLW 0x21
02B7  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02B8  0846  	MOVF gbl_FCV_SPI_MOSI, W
02B9  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02BA  20C6  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x00
	FCV_SPI_MOSI = 0x00;
02BB  01C6  	CLRF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02BC  0846  	MOVF gbl_FCV_SPI_MOSI, W
02BD  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02BE  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//rx_pw_p0_reg(0x11)=01

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00110001
	FCV_SPI_MOSI = 49;
02BF  3031  	MOVLW 0x31
02C0  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02C1  0846  	MOVF gbl_FCV_SPI_MOSI, W
02C2  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02C3  20C6  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x01
	FCV_SPI_MOSI = 0x01;
02C4  3001  	MOVLW 0x01
02C5  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02C6  0846  	MOVF gbl_FCV_SPI_MOSI, W
02C7  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02C8  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//config_reg(0x00)=0x3B

	//W_en_aa_reg
	//Calculation:
	//  spi_mosi = 0b00100000
	FCV_SPI_MOSI = 32;
02C9  3020  	MOVLW 0x20
02CA  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02CB  0846  	MOVF gbl_FCV_SPI_MOSI, W
02CC  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02CD  20C6  	CALL FCD_SPI_Le_00052


	//data
	//Calculation:
	//  spi_mosi = 0x3B
	FCV_SPI_MOSI = 0x3B;
02CE  303B  	MOVLW 0x3B
02CF  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02D0  0846  	MOVF gbl_FCV_SPI_MOSI, W
02D1  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02D2  20C6  	CALL FCD_SPI_Le_00052


	//Comment:
	//set_txrx_add
	//tx_addr_reg(0x10)

	//W_tx_addr_reg
	//Calculation:
	//  spi_mosi = 0b00110000
	FCV_SPI_MOSI = 48;
02D3  3030  	MOVLW 0x30
02D4  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02D5  0846  	MOVF gbl_FCV_SPI_MOSI, W
02D6  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02D7  20C6  	CALL FCD_SPI_Le_00052


	//Loop
	//Loop: Loop 5 times
	for (FCLV_LOOP3=0; FCLV_LOOP3<5; FCLV_LOOP3++)
02D8  01C7  	CLRF gbl_FCLV_LOOP3
02D9        label39
02D9  3005  	MOVLW 0x05
02DA  0247  	SUBWF gbl_FCLV_LOOP3, W
02DB  1803  	BTFSC STATUS,C
02DC  2AE4  	GOTO	label40
02E2  0AC7  	INCF gbl_FCLV_LOOP3, F
02E3  2AD9  	GOTO	label39
02E4        label40

	{

		//data
		//Calculation:
		//  spi_mosi = 0xE7
		FCV_SPI_MOSI = 0xE7;
02DD  30E7  	MOVLW 0xE7
02DE  00C6  	MOVWF gbl_FCV_SPI_MOSI


		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02DF  0846  	MOVF gbl_FCV_SPI_MOSI, W
02E0  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02E1  20C6  	CALL FCD_SPI_Le_00052



	}

	//Comment:
	//set_txrx_add
	//rx_addr_p0_reg(0x0A)

	//W_tx_addr_reg
	//Calculation:
	//  spi_mosi = 0b00101010
	FCV_SPI_MOSI = 42;
02E4  302A  	MOVLW 0x2A
02E5  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02E6  0846  	MOVF gbl_FCV_SPI_MOSI, W
02E7  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02E8  20C6  	CALL FCD_SPI_Le_00052


	//Loop
	//Loop: Loop 5 times
	for (FCLV_LOOP4=0; FCLV_LOOP4<5; FCLV_LOOP4++)
02E9  01C8  	CLRF gbl_FCLV_LOOP4
02EA        label41
02EA  3005  	MOVLW 0x05
02EB  0248  	SUBWF gbl_FCLV_LOOP4, W
02EC  1803  	BTFSC STATUS,C
02ED  2AF5  	GOTO	label42
02F3  0AC8  	INCF gbl_FCLV_LOOP4, F
02F4  2AEA  	GOTO	label41
02F5        label42

	{

		//data
		//Calculation:
		//  spi_mosi = 0xE7
		FCV_SPI_MOSI = 0xE7;
02EE  30E7  	MOVLW 0xE7
02EF  00C6  	MOVWF gbl_FCV_SPI_MOSI


		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
02F0  0846  	MOVF gbl_FCV_SPI_MOSI, W
02F1  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
02F2  20C6  	CALL FCD_SPI_Le_00052



	}

	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
02F5  30FB  	MOVLW 0xFB
02F6  1683  	BSF STATUS, RP0
02F7  0507  	ANDWF gbl_trisc, W
02F8  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
02F9  30FB  	MOVLW 0xFB
02FA  1283  	BCF STATUS, RP0
02FB  0507  	ANDWF gbl_portc, W
02FC  00CA  	MOVWF CompTempVar2193
02FD  3004  	MOVLW 0x04
02FE  044A  	IORWF CompTempVar2193, W
02FF  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);
0300  3008  	MOVLW 0x08
0301  00CA  	MOVWF delay_us_00000_arg_del
0302  204A  	CALL delay_us_00000


	//Call Macro
	//Call Macro: flush_tx_rx()
	FCM_flush_tx_rx();
0303  20FB  	CALL FCM_flush__00053


	//CE
	//Output: 1 -> C1
	trisc = trisc & 0xFD;
0304  30FD  	MOVLW 0xFD
0305  1683  	BSF STATUS, RP0
0306  0507  	ANDWF gbl_trisc, W
0307  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFD) | 0x02;
0308  30FD  	MOVLW 0xFD
0309  1283  	BCF STATUS, RP0
030A  0507  	ANDWF gbl_portc, W
030B  00CA  	MOVWF CompTempVar2194
030C  3002  	MOVLW 0x02
030D  044A  	IORWF CompTempVar2194, W
030E  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFD;

}
030F  0008  	RETURN



void FCM_radio_recievedata()

{

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
024C  30FB  	MOVLW 0xFB
024D  1683  	BSF STATUS, RP0
024E  1303  	BCF STATUS, RP1
024F  0507  	ANDWF gbl_trisc, W
0250  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
0251  30FB  	MOVLW 0xFB
0252  1283  	BCF STATUS, RP0
0253  0507  	ANDWF gbl_portc, W
0254  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 8 us
	delay_us(8);
0255  3008  	MOVLW 0x08
0256  00CA  	MOVWF delay_us_00000_arg_del
0257  204A  	CALL delay_us_00000


	//Comment:
	//read_rx_payload

	//command
	//Calculation:
	//  spi_mosi = 0x61
	FCV_SPI_MOSI = 0x61;
0258  3061  	MOVLW 0x61
0259  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
025A  0846  	MOVF gbl_FCV_SPI_MOSI, W
025B  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
025C  20C6  	CALL FCD_SPI_Le_00052


	//Call Component Macro
	//Call Component Macro: spi_miso=SPI_Get_Char()
	FCV_SPI_MISO = FCD_SPI_Legacy0_SPI_Get_Char();
025D  2120  	CALL FCD_SPI_Le_00057
025E  084B  	MOVF CompTempVarRet2196, W
025F  00C5  	MOVWF gbl_FCV_SPI_MISO


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0260  30FB  	MOVLW 0xFB
0261  1683  	BSF STATUS, RP0
0262  0507  	ANDWF gbl_trisc, W
0263  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0264  30FB  	MOVLW 0xFB
0265  1283  	BCF STATUS, RP0
0266  0507  	ANDWF gbl_portc, W
0267  00CA  	MOVWF CompTempVar2195
0268  3004  	MOVLW 0x04
0269  044A  	IORWF CompTempVar2195, W
026A  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 8 us
	delay_us(8);
026B  3008  	MOVLW 0x08
026C  00CA  	MOVWF delay_us_00000_arg_del
026D  204A  	CALL delay_us_00000


	//Calculation
	//Calculation:
	//  rcv_data = spi_miso
	FCV_RCV_DATA = FCV_SPI_MISO;
026E  0845  	MOVF gbl_FCV_SPI_MISO, W
026F  00C2  	MOVWF gbl_FCV_RCV_DATA


}
0270  0008  	RETURN



void FCM_display_rxdata()

{

	//Calculation
	//Calculation:
	//  spi_mosi = 0b00110111
	FCV_SPI_MOSI = 55;
0310  3037  	MOVLW 0x37
0311  1283  	BCF STATUS, RP0
0312  1303  	BCF STATUS, RP1
0313  00C6  	MOVWF gbl_FCV_SPI_MOSI


	//csn
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
0314  30FB  	MOVLW 0xFB
0315  1683  	BSF STATUS, RP0
0316  0507  	ANDWF gbl_trisc, W
0317  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
0318  30FB  	MOVLW 0xFB
0319  1283  	BCF STATUS, RP0
031A  0507  	ANDWF gbl_portc, W
031B  0087  	MOVWF gbl_portc


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_mosi)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
031C  0846  	MOVF gbl_FCV_SPI_MOSI, W
031D  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
031E  20C6  	CALL FCD_SPI_Le_00052


	//Call Component Macro
	//Call Component Macro: spi_miso=SPI_Get_Char()
	FCV_SPI_MISO = FCD_SPI_Legacy0_SPI_Get_Char();
031F  2120  	CALL FCD_SPI_Le_00057
0320  084B  	MOVF CompTempVarRet2196, W
0321  00C5  	MOVWF gbl_FCV_SPI_MISO


	//csn
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0322  30FB  	MOVLW 0xFB
0323  1683  	BSF STATUS, RP0
0324  0507  	ANDWF gbl_trisc, W
0325  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0326  30FB  	MOVLW 0xFB
0327  1283  	BCF STATUS, RP0
0328  0507  	ANDWF gbl_portc, W
0329  00CA  	MOVWF CompTempVar2197
032A  3004  	MOVLW 0x04
032B  044A  	IORWF CompTempVar2197, W
032C  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Call Component Macro
	//Call Component Macro: ClearLine(0)
	FCD_LCDDisplay0_ClearLine(0);
032D  01CA  	CLRF FCD_LCDDis_00059_arg_Line
032E  2235  	CALL FCD_LCDDis_00059


	//Call Component Macro
	//Call Component Macro: Cursor(0, 0)
	FCD_LCDDisplay0_Cursor(0, 0);
032F  01CD  	CLRF FCD_LCDDis_0005A_arg_x
0330  01CE  	CLRF FCD_LCDDis_0005A_arg_y
0331  20CA  	CALL FCD_LCDDis_0005A


	//Call Component Macro
	//Call Component Macro: PrintString("MISO:")
	FCD_LCDDisplay0_PrintString("MISO:", 5);
0332  304D  	MOVLW 0x4D
0333  00CC  	MOVWF CompTempVar2198
0334  3049  	MOVLW 0x49
0335  00CD  	MOVWF CompTempVar2198+D'1'
0336  3053  	MOVLW 0x53
0337  00CE  	MOVWF CompTempVar2198+D'2'
0338  304F  	MOVLW 0x4F
0339  00CF  	MOVWF CompTempVar2198+D'3'
033A  303A  	MOVLW 0x3A
033B  00D0  	MOVWF CompTempVar2198+D'4'
033C  01D1  	CLRF CompTempVar2198+D'5'
033D  3000  	MOVLW HIGH(CompTempVar2198+D'0')
033E  00CB  	MOVWF FCD_LCDDis_0005B_arg_String+D'1'
033F  304C  	MOVLW LOW(CompTempVar2198+D'0')
0340  00CA  	MOVWF FCD_LCDDis_0005B_arg_String
0341  3005  	MOVLW 0x05
0342  00D2  	MOVWF FCD_LCDDis_0005B_arg_MSZ_String
0343  2219  	CALL FCD_LCDDis_0005B


	//Calculation
	//Calculation:
	//  cursorx = 12
	FCV_CURSORX = 12;
0344  300C  	MOVLW 0x0C
0345  00C4  	MOVWF gbl_FCV_CURSORX


	//Loop
	//Loop: Loop 8 times
	for (FCLV_LOOP5=0; FCLV_LOOP5<8; FCLV_LOOP5++)
0346  01C9  	CLRF gbl_FCLV_LOOP5
0347        label43
0347  3008  	MOVLW 0x08
0348  0249  	SUBWF gbl_FCLV_LOOP5, W
0349  1803  	BTFSC STATUS,C
036F  0AC9  	INCF gbl_FCLV_LOOP5, F
0370  2B47  	GOTO	label43

	{

		//Calculation
		//Calculation:
		//  datain_bit = spi_miso AND 1
		FCV_DATAIN_BIT = FCV_SPI_MISO & 1;
034B  3001  	MOVLW 0x01
034C  0545  	ANDWF gbl_FCV_SPI_MISO, W
034D  00CA  	MOVWF CompTempVar2200
034E  01CB  	CLRF CompTempVar2201
034F  08CA  	MOVF CompTempVar2200, F
0350  1D03  	BTFSS STATUS,Z
0351  144B  	BSF CompTempVar2201,0
0352  1043  	BCF gbl_FCV_DATAIN_BIT,0
0353  084B  	MOVF CompTempVar2201, W
0354  1D03  	BTFSS STATUS,Z
0355  1443  	BSF gbl_FCV_DATAIN_BIT,0


		//Call Component Macro
		//Call Component Macro: Cursor(cursorx, 0)
		FCD_LCDDisplay0_Cursor(FCV_CURSORX, 0);
0356  0844  	MOVF gbl_FCV_CURSORX, W
0357  00CD  	MOVWF FCD_LCDDis_0005A_arg_x
0358  01CE  	CLRF FCD_LCDDis_0005A_arg_y
0359  20CA  	CALL FCD_LCDDis_0005A


		//Calculation
		//Calculation:
		//  datain_bit = spi_miso AND 1
		//  cursorx = cursorx - 1
		FCV_DATAIN_BIT = FCV_SPI_MISO & 1;
035A  3001  	MOVLW 0x01
035B  0545  	ANDWF gbl_FCV_SPI_MISO, W
035C  00CA  	MOVWF CompTempVar2202
035D  01CB  	CLRF CompTempVar2203
035E  08CA  	MOVF CompTempVar2202, F
035F  1D03  	BTFSS STATUS,Z
0360  144B  	BSF CompTempVar2203,0
0361  1043  	BCF gbl_FCV_DATAIN_BIT,0
0362  084B  	MOVF CompTempVar2203, W
0363  1D03  	BTFSS STATUS,Z
0364  1443  	BSF gbl_FCV_DATAIN_BIT,0

		FCV_CURSORX = FCV_CURSORX - 1;
0365  0344  	DECF gbl_FCV_CURSORX, W
0366  00C4  	MOVWF gbl_FCV_CURSORX


		//Call Component Macro
		//Call Component Macro: PrintNumber(datain_bit)
		FCD_LCDDisplay0_PrintNumber(FCV_DATAIN_BIT);
0367  01CB  	CLRF FCD_LCDDis_0005C_arg_Number+D'1'
0368  01CA  	CLRF FCD_LCDDis_0005C_arg_Number
0369  1843  	BTFSC gbl_FCV_DATAIN_BIT,0
036A  0ACA  	INCF FCD_LCDDis_0005C_arg_Number, F
036B  212B  	CALL FCD_LCDDis_0005C


		//Calculation
		//Calculation:
		//  spi_miso = spi_miso >> 1
		FCV_SPI_MISO = FCV_SPI_MISO >> 1;
036C  08C5  	MOVF gbl_FCV_SPI_MISO, F
036D  1003  	BCF STATUS,C
036E  0CC5  	RRF gbl_FCV_SPI_MISO, F



	}

}
034A  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
03E2  3007  	MOVLW 0x07
03E3  1683  	BSF STATUS, RP0
03E4  1303  	BCF STATUS, RP1
03E5  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
03E6  30C0  	MOVLW 0xC0
03E7  0081  	MOVWF gbl_option_reg



	//Input
	//Input: C4 -> datain_bit
	trisc = trisc | 0x10;
03E8  3010  	MOVLW 0x10
03E9  0407  	IORWF gbl_trisc, W
03EA  0087  	MOVWF gbl_trisc

	FCV_DATAIN_BIT = ((portc & 0x10) == 0x10);
03EB  3010  	MOVLW 0x10
03EC  1283  	BCF STATUS, RP0
03ED  0507  	ANDWF gbl_portc, W
03EE  00CA  	MOVWF CompTempVar2246
03EF  01CB  	CLRF CompTempVar2247
03F0  3010  	MOVLW 0x10
03F1  024A  	SUBWF CompTempVar2246, W
03F2  1903  	BTFSC STATUS,Z
03F3  0ACB  	INCF CompTempVar2247, F
03F4  1043  	BCF gbl_FCV_DATAIN_BIT,0
03F5  084B  	MOVF CompTempVar2247, W
03F6  1D03  	BTFSS STATUS,Z
03F7  1443  	BSF gbl_FCV_DATAIN_BIT,0


	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
03F8  238D  	CALL FCD_LCDDis_0006C


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
03F9  237C  	CALL FCD_LCDDis_0006D


	//Call Component Macro
	//Call Component Macro: SPI_Init()
	FCD_SPI_Legacy0_SPI_Init();
03FA  2371  	CALL FCD_SPI_Le_00060


	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
03FB  30FD  	MOVLW 0xFD
03FC  1683  	BSF STATUS, RP0
03FD  0507  	ANDWF gbl_trisc, W
03FE  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
03FF  30FD  	MOVLW 0xFD
0400  1283  	BCF STATUS, RP0
0401  0507  	ANDWF gbl_portc, W
0402  0087  	MOVWF gbl_portc


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0403  30FB  	MOVLW 0xFB
0404  1683  	BSF STATUS, RP0
0405  0507  	ANDWF gbl_trisc, W
0406  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0407  30FB  	MOVLW 0xFB
0408  1283  	BCF STATUS, RP0
0409  0507  	ANDWF gbl_portc, W
040A  00CA  	MOVWF CompTempVar2248
040B  3004  	MOVLW 0x04
040C  044A  	IORWF CompTempVar2248, W
040D  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Call Macro
	//Call Macro: radio_rx_init()
	FCM_radio_rx_init();
040E  2271  	CALL FCM_radio__00055


	//Loop
	//Loop: While 1
	while (1)
040F        label44
0447  2C0F  	GOTO	label44

	{

		//CSN
		//Output: 0 -> C2
		trisc = trisc & 0xFB;
040F  30FB  	MOVLW 0xFB
0410  1683  	BSF STATUS, RP0
0411  0507  	ANDWF gbl_trisc, W
0412  0087  	MOVWF gbl_trisc

		if ((0))
			portc = (portc & 0xFB) | 0x04;
		else
			portc = portc & 0xFB;
0413  30FB  	MOVLW 0xFB
0414  1283  	BCF STATUS, RP0
0415  0507  	ANDWF gbl_portc, W
0416  0087  	MOVWF gbl_portc


		//Delay
		//Delay: 8 us
		delay_us(8);
0417  3008  	MOVLW 0x08
0418  00CA  	MOVWF delay_us_00000_arg_del
0419  204A  	CALL delay_us_00000


		//Comment:
		//config_reg(0x00)=0x3B

		//W_en_aa_reg
		//Calculation:
		//  spi_mosi = 0b00100000
		FCV_SPI_MOSI = 32;
041A  3020  	MOVLW 0x20
041B  00C6  	MOVWF gbl_FCV_SPI_MOSI


		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
041C  0846  	MOVF gbl_FCV_SPI_MOSI, W
041D  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
041E  20C6  	CALL FCD_SPI_Le_00052


		//data
		//Calculation:
		//  spi_mosi = 0x3B
		FCV_SPI_MOSI = 0x3B;
041F  303B  	MOVLW 0x3B
0420  00C6  	MOVWF gbl_FCV_SPI_MOSI


		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0421  0846  	MOVF gbl_FCV_SPI_MOSI, W
0422  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
0423  20C6  	CALL FCD_SPI_Le_00052


		//Comment:
		//num bytes to rcv

		//W_en_aa_reg
		//Calculation:
		//  spi_mosi = 0b00110001
		FCV_SPI_MOSI = 49;
0424  3031  	MOVLW 0x31
0425  00C6  	MOVWF gbl_FCV_SPI_MOSI


		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
0426  0846  	MOVF gbl_FCV_SPI_MOSI, W
0427  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
0428  20C6  	CALL FCD_SPI_Le_00052


		//data
		//Calculation:
		//  spi_mosi = 0x01
		FCV_SPI_MOSI = 0x01;
0429  3001  	MOVLW 0x01
042A  00C6  	MOVWF gbl_FCV_SPI_MOSI


		//Call Component Macro
		//Call Component Macro: SPI_Send_Char(spi_mosi)
		FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_MOSI);
042B  0846  	MOVF gbl_FCV_SPI_MOSI, W
042C  00CA  	MOVWF FCD_SPI_Le_00052_arg_Char
042D  20C6  	CALL FCD_SPI_Le_00052


		//CSN
		//Output: 1 -> C2
		trisc = trisc & 0xFB;
042E  30FB  	MOVLW 0xFB
042F  1683  	BSF STATUS, RP0
0430  0507  	ANDWF gbl_trisc, W
0431  0087  	MOVWF gbl_trisc

		if ((1))
			portc = (portc & 0xFB) | 0x04;
0432  30FB  	MOVLW 0xFB
0433  1283  	BCF STATUS, RP0
0434  0507  	ANDWF gbl_portc, W
0435  00CA  	MOVWF CompTempVar2249
0436  3004  	MOVLW 0x04
0437  044A  	IORWF CompTempVar2249, W
0438  0087  	MOVWF gbl_portc

		else
			portc = portc & 0xFB;

		//Delay
		//Delay: 8 us
		delay_us(8);
0439  3008  	MOVLW 0x08
043A  00CA  	MOVWF delay_us_00000_arg_del
043B  204A  	CALL delay_us_00000


		//Call Macro
		//Call Macro: flush_tx_rx()
		FCM_flush_tx_rx();
043C  20FB  	CALL FCM_flush__00053


		//Call Macro
		//Call Macro: radio_recievedata()
		FCM_radio_recievedata();
043D  224C  	CALL FCM_radio__00056


		//Call Macro
		//Call Macro: display_rxdata()
		FCM_display_rxdata();
043E  2310  	CALL FCM_displa_00058


		//Call Component Macro
		//Call Component Macro: Cursor(0, 1)
		FCD_LCDDisplay0_Cursor(0, 1);
043F  01CD  	CLRF FCD_LCDDis_0005A_arg_x
0440  3001  	MOVLW 0x01
0441  00CE  	MOVWF FCD_LCDDis_0005A_arg_y
0442  20CA  	CALL FCD_LCDDis_0005A


		//Call Component Macro
		//Call Component Macro: PrintNumber(rcv_data)
		FCD_LCDDisplay0_PrintNumber(FCV_RCV_DATA);
0443  0842  	MOVF gbl_FCV_RCV_DATA, W
0444  00CA  	MOVWF FCD_LCDDis_0005C_arg_Number
0445  01CB  	CLRF FCD_LCDDis_0005C_arg_Number+D'1'
0446  212B  	CALL FCD_LCDDis_0005C



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0478  1283  	BCF STATUS, RP0
0479  1303  	BCF STATUS, RP1
047A  0E36  	SWAPF Int1BContext+D'2', W
047B  0084  	MOVWF FSR
047C  0E35  	SWAPF Int1BContext+D'1', W
047D  008A  	MOVWF PCLATH
047E  0E34  	SWAPF Int1BContext, W
047F  0083  	MOVWF STATUS
0480  0EFF  	SWAPF Int1Context, F
0481  0E7F  	SWAPF Int1Context, W
0482  0009  	RETFIE





/*********************************************************************
 *                  Flowcode CAL SPI File
 *
 * File: PIC_CAL_SPI.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 * 150911 | BR | Updated variables with typedef alternatives
 * 011211 | BR | Converted to new dynamic defines mechanism
 *
 */


//When using hardware SPI channels override port and pin conns with FCD conn definitions
//Only overwrite CS pin defines when using SPI in slave mode on a hardware channel
//Also sort out postscale and prescale options for hardware channels
#ifdef MX_SPI_REF1
	#if MX_SPI_CHANNEL_1 > 0
		#undef MX_SPI_MOSI_PIN_1
		#undef MX_SPI_MOSI_PORT_1
		#undef MX_SPI_MOSI_TRIS_1
		#undef MX_SPI_MISO_PIN_1
		#undef MX_SPI_MISO_PORT_1
		#undef MX_SPI_MISO_TRIS_1
		#undef MX_SPI_SCK_PIN_1
		#undef MX_SPI_SCK_PORT_1
		#undef MX_SPI_SCK_TRIS_1
		#undef MX_SPI_CS_PIN_1
		#undef MX_SPI_CS_PORT_1
		#undef MX_SPI_CS_TRIS_1

		#if MX_SPI_PR_SCALE_1 == 4
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	0
		#endif
		#if MX_SPI_PR_SCALE_1 == 16
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	1
		#endif
		#if MX_SPI_PR_SCALE_1 == 64
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_1 == 1
		#define MX_SPI_MOSI_PIN_1		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 2
		#define MX_SPI_MOSI_PIN_1		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 3
		#define MX_SPI_MOSI_PIN_1		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 4
		#define MX_SPI_MOSI_PIN_1		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF2
	#if MX_SPI_CHANNEL_2 > 0
		#undef MX_SPI_MOSI_PIN_2
		#undef MX_SPI_MOSI_PORT_2
		#undef MX_SPI_MOSI_TRIS_2
		#undef MX_SPI_MISO_PIN_2
		#undef MX_SPI_MISO_PORT_2
		#undef MX_SPI_MISO_TRIS_2
		#undef MX_SPI_SCK_PIN_2
		#undef MX_SPI_SCK_PORT_2
		#undef MX_SPI_SCK_TRIS_2
		#undef MX_SPI_CS_PIN_2
		#undef MX_SPI_CS_PORT_2
		#undef MX_SPI_CS_TRIS_2

		#if MX_SPI_PR_SCALE_2 == 4
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	0
		#endif
		#if MX_SPI_PR_SCALE_2 == 16
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	1
		#endif
		#if MX_SPI_PR_SCALE_2 == 64
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_2 == 1
		#define MX_SPI_MOSI_PIN_2		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 2
		#define MX_SPI_MOSI_PIN_2		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 3
		#define MX_SPI_MOSI_PIN_2		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 4
		#define MX_SPI_MOSI_PIN_2		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF3
	#if MX_SPI_CHANNEL_3 > 0
		#undef MX_SPI_MOSI_PIN_3
		#undef MX_SPI_MOSI_PORT_3
		#undef MX_SPI_MOSI_TRIS_3
		#undef MX_SPI_MISO_PIN_3
		#undef MX_SPI_MISO_PORT_3
		#undef MX_SPI_MISO_TRIS_3
		#undef MX_SPI_SCK_PIN_3
		#undef MX_SPI_SCK_PORT_3
		#undef MX_SPI_SCK_TRIS_3
		#undef MX_SPI_CS_PIN_3
		#undef MX_SPI_CS_PORT_3
		#undef MX_SPI_CS_TRIS_3

		#if MX_SPI_PR_SCALE_3 == 4
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	0
		#endif
		#if MX_SPI_PR_SCALE_3 == 16
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	1
		#endif
		#if MX_SPI_PR_SCALE_3 == 64
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_3 == 1
		#define MX_SPI_MOSI_PIN_3		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 2
		#define MX_SPI_MOSI_PIN_3		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 3
		#define MX_SPI_MOSI_PIN_3		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 4
		#define MX_SPI_MOSI_PIN_3		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF4
	#if MX_SPI_CHANNEL_4 > 0
		#undef MX_SPI_MOSI_PIN_4
		#undef MX_SPI_MOSI_PORT_4
		#undef MX_SPI_MOSI_TRIS_4
		#undef MX_SPI_MISO_PIN_4
		#undef MX_SPI_MISO_PORT_4
		#undef MX_SPI_MISO_TRIS_4
		#undef MX_SPI_SCK_PIN_4
		#undef MX_SPI_SCK_PORT_4
		#undef MX_SPI_SCK_TRIS_4
		#undef MX_SPI_CS_PIN_4
		#undef MX_SPI_CS_PORT_4
		#undef MX_SPI_CS_TRIS_4

		#if MX_SPI_PR_SCALE_4 == 4
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	0
		#endif
		#if MX_SPI_PR_SCALE_4 == 16
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	1
		#endif
		#if MX_SPI_PR_SCALE_4 == 64
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_4 == 1
		#define MX_SPI_MOSI_PIN_4		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 2
		#define MX_SPI_MOSI_PIN_4		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 3
		#define MX_SPI_MOSI_PIN_4		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 4
		#define MX_SPI_MOSI_PIN_4		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_4_SS_TRIS
	#endif
#endif

#define MX_SPI_CHANNEL_X		CAL_APPEND(MX_SPI_CHANNEL_, MX_SPI_NUM)
#define MX_SPI_MOSI_PIN_X		CAL_APPEND(MX_SPI_MOSI_PIN_, MX_SPI_NUM)
#define MX_SPI_MOSI_PORT_X		CAL_APPEND(MX_SPI_MOSI_PORT_, MX_SPI_NUM)
#define MX_SPI_MOSI_TRIS_X		CAL_APPEND(MX_SPI_MOSI_TRIS_, MX_SPI_NUM)
#define MX_SPI_MISO_PIN_X		CAL_APPEND(MX_SPI_MISO_PIN_, MX_SPI_NUM)
#define MX_SPI_MISO_PORT_X		CAL_APPEND(MX_SPI_MISO_PORT_, MX_SPI_NUM)
#define MX_SPI_MISO_TRIS_X		CAL_APPEND(MX_SPI_MISO_TRIS_, MX_SPI_NUM)
#define MX_SPI_SCK_PIN_X		CAL_APPEND(MX_SPI_SCK_PIN_, MX_SPI_NUM)
#define MX_SPI_SCK_PORT_X		CAL_APPEND(MX_SPI_SCK_PORT_, MX_SPI_NUM)
#define MX_SPI_SCK_TRIS_X		CAL_APPEND(MX_SPI_SCK_TRIS_, MX_SPI_NUM)
#define MX_SPI_CS_PIN_X			CAL_APPEND(MX_SPI_CS_PIN_, MX_SPI_NUM)
#define MX_SPI_CS_PORT_X		CAL_APPEND(MX_SPI_CS_PORT_, MX_SPI_NUM)
#define MX_SPI_CS_TRIS_X		CAL_APPEND(MX_SPI_CS_TRIS_, MX_SPI_NUM)
#define MX_SPI_BMODE_X			CAL_APPEND(MX_SPI_BMODE_, MX_SPI_NUM)
#define MX_SPI_PR_SCALE_X		CAL_APPEND(MX_SPI_PR_SCALE_, MX_SPI_NUM)
#define MX_SPI_PO_SCALE_X		CAL_APPEND(MX_SPI_PO_SCALE_, MX_SPI_NUM)
#define MX_SPI_INT_X			CAL_APPEND(MX_SPI_INT_, MX_SPI_NUM)


//Function Prototypes
CALFUNCTION(void, FC_CAL_SPI_Master_Init_, (void));
CALFUNCTION(void, FC_CAL_SPI_Master_Uninit_, (void));
CALFUNCTION(MX_UINT8, FC_CAL_SPI_Master_Byte_, (MX_UINT8 DataOut));

CALFUNCTION(void, FC_CAL_SPI_Slave_Init_, (void));
CALFUNCTION(void, FC_CAL_SPI_Slave_Uninit_, (void));
CALFUNCTION(void, FC_CAL_SPI_Slave_SetTxData_, (MX_UINT8 Data));
CALFUNCTION(MX_UINT8, FC_CAL_SPI_Slave_GetRxData_, (void));


#if (MX_SPI_CHANNEL_X == 0)
  #ifndef MX_SPI_SW_DEL
    #define MX_SPI_SW_DEL
	MX_UINT8 SPI_SW_DELAY = 1;
  #endif
#endif


//Bus Mode - Bit0=CPOL, Bit1=CPHA, Bit2=CSMP
//CPOL - Clock Polarity - Idle State of the clock 0=0, 1=1
//CPHA - Clock Phase - Clock Edge 0=leading edge, 1=trailing edge
//CSMP - Input Data Bit Sample Phase
//CRAT - SPI Clock Rate 0=1/4, 1=1/16, 2=1/64


//Ensure SSPCON register is defined correctly
#ifndef SSPCON
  #ifdef SSPCON1
	#define sspcon	sspcon1
  #else
	#ifdef SSP1CON1
		#define sspcon	ssp1con1
	#endif
  #endif
#endif
#ifndef SSPBUF
  #ifdef SSP1BUF
	#define sspbuf	ssp1buf
  #endif
#endif

#ifndef SSP2CON
	#ifdef SSP2CON1
		#define ssp2con	ssp2con1
	#endif
#endif




CALFUNCTION(void, FC_CAL_SPI_Master_Init_, (void))

{
	FC_CAL_Bit_High_DDR (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_TRIS_X, MX_SPI_MOSI_PIN_X);		// MOSI pin is default high
00E8  1683  	BSF STATUS, RP0
00E9  1303  	BCF STATUS, RP1
00EA  1287  	BCF gbl_trisc,5
00EB  1283  	BCF STATUS, RP0
00EC  1687  	BSF gbl_portc,5

	FC_CAL_Bit_In_DDR   (MX_SPI_MISO_PORT_X, MX_SPI_MISO_TRIS_X, MX_SPI_MISO_PIN_X);		// MISO pin is a input
00ED  1683  	BSF STATUS, RP0
00EE  1607  	BSF gbl_trisc,4


	#if (MX_SPI_BMODE_X & 0x02)
		FC_CAL_Bit_Low_DDR  (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);		// Clock pin is default low
00EF  1187  	BCF gbl_trisc,3
00F0  1283  	BCF STATUS, RP0
00F1  1187  	BCF gbl_portc,3

	#else
		FC_CAL_Bit_High_DDR (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);		// Clock pin is default high
	#endif

	#if (MX_SPI_CHANNEL_X == 1)
	 #ifndef MX_SPI_1
	 	#error "SPI channel 1 not available on this device"
	 #else
		sspcon 		 = MX_SPI_PR_SCALE_X & 0x03;			//Assign Clock Prescaler
00F2  3001  	MOVLW 0x01
00F3  0094  	MOVWF gbl_sspcon

		sspcon.CKP 	 = MX_SPI_BMODE_X & 0x01;				//Assign Clock Polarity
00F4  1214  	BCF gbl_sspcon,4

		sspstat.CKE  = (MX_SPI_BMODE_X & 0x02) >> 1;		//Assign Clock Phase
00F5  1683  	BSF STATUS, RP0
00F6  1714  	BSF gbl_sspstat,6

		sspstat.SMP  = (MX_SPI_BMODE_X & 0x04) >> 2;		//Assign Input Data Phase
00F7  1794  	BSF gbl_sspstat,7

		sspcon.SSPEN = 1;									//Activate SPI Peripheral
00F8  1283  	BCF STATUS, RP0
00F9  1694  	BSF gbl_sspcon,5

	 #endif
	#endif

	#if (MX_SPI_CHANNEL_X == 2)
	 #ifndef MX_SPI_2
	 	#error "SPI channel 2 not available on this device"
	 #else

	  #ifdef MX_SPI_2_REMAPPABLE
		RPINR21 = 3; 										//MISO - RB0 - RP3
		RPOR4 = 9;											//MOSI - RB1 - RP4
		RPOR5 = 10;											//SCK  - RB2 - RP5
	  #endif

		ssp2con 	  = MX_SPI_PR_SCALE_X & 0x03;		//Assign Clock Prescaler
		ssp2con.CKP   = MX_SPI_BMODE_X & 0x01;			//Assign Clock Polarity
		ssp2stat.CKE  = (MX_SPI_BMODE_X & 0x02) >> 1;	//Assign Clock Phase
		ssp2stat.SMP  = (MX_SPI_BMODE_X & 0x04) >> 2;	//Assign Input Data Phase
		ssp2con.SSPEN = 1;									//Activate SPI Peripheral
	 #endif
	#endif
}
00FA  0008  	RETURN



CALFUNCTION(void, FC_CAL_SPI_Master_Uninit_, (void))
{
	#if (MX_SPI_CHANNEL_X == 1)
		sspcon = 0;
	#endif

	#if (MX_SPI_CHANNEL_X == 2)
		ssp2con = 0;
    #endif

	//Reset Pins to Inputs
	FC_CAL_Bit_In_DDR (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_TRIS_X, MX_SPI_MOSI_PIN_X);
	FC_CAL_Bit_In_DDR (MX_SPI_MISO_PORT_X, MX_SPI_MISO_TRIS_X, MX_SPI_MISO_PIN_X);
	FC_CAL_Bit_In_DDR (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);
}


CALFUNCTION(MX_UINT8, FC_CAL_SPI_Master_Byte_, (MX_UINT8 DataOut))

{
	MX_UINT8 retVal = 0;
005A  01CC  	CLRF FC_CAL_SPI_0005F_1_retVal


	#if (MX_SPI_CHANNEL_X == 0)
		SPI_SW_DELAY = MX_SPI_PR_SCALE_X;

		MX_UINT8 idx;
		for (idx = 0; idx < 8; idx++)
		{
			retVal = retVal << 1;

			#if ((MX_SPI_BMODE_X & 0x02) == 0x00)									//CKE = 0; Set SCK active before data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			if (DataOut & 0x80)														//Test Data bit
				FC_CAL_Bit_High(MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_PIN_X);				//Set SDO bit
			else
				FC_CAL_Bit_Low (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_PIN_X);				//Clear SDO bit

			delay_us(SPI_SW_DELAY);

			#if ((MX_SPI_BMODE_X & 0x02) == 0x02)									//CKE = 1; Set SCK active after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#else																	//CKE = 0; Set SCK idle after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			#if ((MX_SPI_BMODE_X & 0x04) == 0)										//Sample at the middle of period
				if(FC_CAL_Bit_In(MX_SPI_MISO_PORT_X, MX_SPI_MISO_PIN_X))
					retVal = retVal | 0x01;
				else
					retVal = retVal & 0xFE;
			#endif

			delay_us(SPI_SW_DELAY);

			#if ((MX_SPI_BMODE_X & 0x02) == 0x02)									//CKE = 1; Set SCK idle to complete cycle																	//CKE = 0; Set SCK idle after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			#if ((MX_SPI_BMODE_X & 0x04) == 0x04)									//Sample at the end of period
				if(FC_CAL_Bit_In(MX_SPI_MISO_PORT_X, MX_SPI_MISO_PIN_X))
					retVal = retVal | 0x01;
				else
					retVal = retVal & 0xFE;
			#endif

			DataOut = DataOut << 1;							//Move to next data bit
		}
    #endif

	#if (MX_SPI_CHANNEL_X == 1)
		sspbuf = DataOut;					//Send outgoing byte
005B  084B  	MOVF FC_CAL_SPI_0005F_arg_DataOut, W
005C  0093  	MOVWF gbl_sspbuf

		while ((sspstat & 0x01) == 0);		//Wait until sspbuf is empty
005D        label7
005D  1683  	BSF STATUS, RP0
005E  1C14  	BTFSS gbl_sspstat,0
005F  285D  	GOTO	label7

		retVal = sspbuf;					//Collect incoming byte
0060  1283  	BCF STATUS, RP0
0061  0813  	MOVF gbl_sspbuf, W
0062  00CC  	MOVWF FC_CAL_SPI_0005F_1_retVal

	#endif

	#if (MX_SPI_CHANNEL_X == 2)
		ssp2buf = DataOut;					//Send outgoing byte
		while ((ssp2stat & 0x01) == 0);		//Wait until sspbuf is empty
		retVal = ssp2buf;					//Collect incoming byte
	#endif

	return (retVal);
0063  084C  	MOVF FC_CAL_SPI_0005F_1_retVal, W
0064  00CD  	MOVWF CompTempVarRet2229

}
0065  0008  	RETURN






CALFUNCTION(void, FC_CAL_SPI_Slave_Init_, (void))
{

}

CALFUNCTION(void, FC_CAL_SPI_Slave_Uninit_, (void))
{

}

CALFUNCTION(void, FC_CAL_SPI_Slave_SetTxData_, (MX_UINT8 Data))
{

}

CALFUNCTION(MX_UINT8, FC_CAL_SPI_Slave_GetRxData_, (void))
{

}



////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2C48  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2C78  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08D1  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  2815  	GOTO	label2
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0BD1  	DECFSZ delay_ms_00000_arg_del, F
003A  2814  	GOTO	label1
003B  0008  	RETURN
003C        ; } delay_ms function end

003C        delay_10us_00000
003C        ; { delay_10us ; function begin
003C  08D7  	MOVF delay_10us_00000_arg_del, F
003D  1D03  	BTFSS STATUS,Z
003E  2840  	GOTO	label3
003F  0008  	RETURN
0040        label3
0040  3009  	MOVLW 0x09
0041        label4
0041  0000  	NOP
0042  3EFF  	ADDLW 0xFF
0043  1D03  	BTFSS STATUS,Z
0044  2841  	GOTO	label4
0045  0000  	NOP
0046  0000  	NOP
0047  0BD7  	DECFSZ delay_10us_00000_arg_del, F
0048  2840  	GOTO	label3
0049  0008  	RETURN
004A        ; } delay_10us function end

004A        delay_us_00000
004A        ; { delay_us ; function begin
004A        label5
004A  0000  	NOP
004B  0000  	NOP
004C  0BCA  	DECFSZ delay_us_00000_arg_del, F
004D  284A  	GOTO	label5
004E  0008  	RETURN
004F        ; } delay_us function end


00A7        __div_16_1_00003
00A7        ; { __div_16_16 ; function begin
00A7  01D5  	CLRF __div_16_1_00003_1_r
00A8  01D6  	CLRF __div_16_1_00003_1_r+D'1'
00A9  01D8  	CLRF CompTempVarRet214
00AA  01D9  	CLRF CompTempVarRet214+D'1'
00AB  01D7  	CLRF __div_16_1_00003_1_i
00AC        label8
00AC  1A57  	BTFSC __div_16_1_00003_1_i,4
00AD  0008  	RETURN
00AE  1003  	BCF STATUS,C
00AF  0DD8  	RLF CompTempVarRet214, F
00B0  0DD9  	RLF CompTempVarRet214+D'1', F
00B1  0DCF  	RLF __div_16_1_00003_arg_a, F
00B2  0DD0  	RLF __div_16_1_00003_arg_a+D'1', F
00B3  0DD5  	RLF __div_16_1_00003_1_r, F
00B4  0DD6  	RLF __div_16_1_00003_1_r+D'1', F
00B5  0852  	MOVF __div_16_1_00003_arg_b+D'1', W
00B6  0256  	SUBWF __div_16_1_00003_1_r+D'1', W
00B7  1D03  	BTFSS STATUS,Z
00B8  28BB  	GOTO	label9
00B9  0851  	MOVF __div_16_1_00003_arg_b, W
00BA  0255  	SUBWF __div_16_1_00003_1_r, W
00BB        label9
00BB  1C03  	BTFSS STATUS,C
00BC  28C4  	GOTO	label10
00BD  0851  	MOVF __div_16_1_00003_arg_b, W
00BE  02D5  	SUBWF __div_16_1_00003_1_r, F
00BF  0852  	MOVF __div_16_1_00003_arg_b+D'1', W
00C0  1C03  	BTFSS STATUS,C
00C1  03D6  	DECF __div_16_1_00003_1_r+D'1', F
00C2  02D6  	SUBWF __div_16_1_00003_1_r+D'1', F
00C3  1458  	BSF CompTempVarRet214,0
00C4        label10
00C4  0AD7  	INCF __div_16_1_00003_1_i, F
00C5  28AC  	GOTO	label8
00C6        ; } __div_16_16 function end


0448        _startup
0448  30D5  	MOVLW 0xD5
0449  1283  	BCF STATUS, RP0
044A  1303  	BCF STATUS, RP1
044B  00A0  	MOVWF gbl_14_LSR
044C  30C4  	MOVLW 0xC4
044D  00A1  	MOVWF gbl_14_LSR+D'1'
044E  30BB  	MOVLW 0xBB
044F  00A2  	MOVWF gbl_14_LSR+D'2'
0450  30DC  	MOVLW 0xDC
0451  00A3  	MOVWF gbl_14_LSR+D'3'
0452  01A4  	CLRF gbl_15_gbl_aSig
0453  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0454  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0455  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0456  01A8  	CLRF gbl_15_gbl_bSig
0457  01A9  	CLRF gbl_15_gbl_bSig+D'1'
0458  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0459  01AB  	CLRF gbl_15_gbl_bSig+D'3'
045A  01AC  	CLRF gbl_15_gbl_zSig
045B  01AD  	CLRF gbl_15_gbl_zSig+D'1'
045C  01AE  	CLRF gbl_15_gbl_zSig+D'2'
045D  01AF  	CLRF gbl_15_gbl_zSig+D'3'
045E  01BC  	CLRF gbl_15_gbl_aExp
045F  01BD  	CLRF gbl_15_gbl_bExp
0460  01B7  	CLRF gbl_15_gbl_zExp
0461  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0462  01BE  	CLRF gbl_15_gbl_aSign
0463  01BF  	CLRF gbl_15_gbl_bSign
0464  01C0  	CLRF gbl_15_gbl_zSign
0465  01C1  	CLRF gbl_15_gbl_zSigZero
0466  01B0  	CLRF gbl_15_gbl_ret
0467  01B1  	CLRF gbl_15_gbl_ret+D'1'
0468  01B2  	CLRF gbl_15_gbl_ret+D'2'
0469  01B3  	CLRF gbl_15_gbl_ret+D'3'
046A  01BA  	CLRF gbl_float_rounding_mode
046B  01BB  	CLRF gbl_float_exception_flags
046C  01B9  	CLRF gbl_float_detect_tininess

0475  118A  	BCF PCLATH,3
0476  120A  	BCF PCLATH,4
0477  2BE2  	GOTO	main

2007  3F3A  	DW 0x3F3A
