;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
0089  01EA  	CLRF Wdt_Delay__0003E_1_i
008A        label11
008A  0869  	MOVF Wdt_Delay__0003E_arg_delay, W
008B  026A  	SUBWF Wdt_Delay__0003E_1_i, W
008C  1803  	BTFSC STATUS,C
0092  0AEA  	INCF Wdt_Delay__0003E_1_i, F
0093  288A  	GOTO	label11

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
008E  0064  	CLRWDT

        delay_ms(1);
008F  3001  	MOVLW 0x01
0090  00EB  	MOVWF delay_ms_00000_arg_del
0091  2010  	CALL delay_ms_00000

    }
}
008D  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\gerpe\OneDrive\GER-PER 2016\Documents\KennyNeutron\2020\RF\NRF_test2\NRF_Lib_reader.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Tuesday, August 04, 2020 20:44:23
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F873A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 128
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 20000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f3a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f3a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_spi_nrf_reg_read();
void FCM_cmd_read_reg();
void FCM_lcd_line0();
void FCM_lcd_line1();
void FCM_lcd_line2();
void FCM_cmd_read_rx_addr();
void FCM_cmd_read_tx_addr();
void FCM_lcd_line3();
void FCM_nrf_tx_init();
void FCM_cmd_write_reg();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT8 FCV_REG12_RX_PW_P1 = (0x0);
045D  01C2  	CLRF gbl_FCV_REG12_RX_PW_P1

MX_UINT8 FCV_REG00_CONFIG = (0x0);
045E  01C3  	CLRF gbl_FCV_REG00_CONFIG

MX_UINT8 FCV_REG10_TX_ADDR_BYTE1 = (0x0);
045F  01C4  	CLRF gbl_FCV_REG10_TX_ADDR_BYTE1

MX_UINT8 FCV_DATA_TO_WRITE = (0xff);
0460  30FF  	MOVLW 0xFF
0461  00C5  	MOVWF gbl_FCV_DATA_TO_WRITE

MX_UINT8 FCV_REG15_RX_PW_P4 = (0x0);
0462  01C6  	CLRF gbl_FCV_REG15_RX_PW_P4

MX_UINT8 FCV_REG09_CD = (0x0);
0463  01C7  	CLRF gbl_FCV_REG09_CD

MX_UINT8 FCV_REG10_TX_ADDR_BYTE2 = (0x0);
0464  01C8  	CLRF gbl_FCV_REG10_TX_ADDR_BYTE2

MX_UINT8 FCV_REG10_TX_ADDR_BYTE3 = (0x0);
0465  01C9  	CLRF gbl_FCV_REG10_TX_ADDR_BYTE3

MX_UINT8 FCV_REG0F_RX_ADDR_P5 = (0x0);
0466  01CA  	CLRF gbl_FCV_REG0F_RX_ADDR_P5

MX_UINT8 FCV_REG0C_RX_ADDR_P2 = (0x0);
0467  01CB  	CLRF gbl_FCV_REG0C_RX_ADDR_P2

MX_UINT8 FCV_REG10_TX_ADDR_BYTE4 = (0x0);
0468  01CC  	CLRF gbl_FCV_REG10_TX_ADDR_BYTE4

MX_UINT8 FCV_SPI_DATA0 = (0xff);
0469  30FF  	MOVLW 0xFF
046A  00CD  	MOVWF gbl_FCV_SPI_DATA0

MX_UINT8 FCV_REG17_FIFO_STATUS = (0x0);
046B  01CE  	CLRF gbl_FCV_REG17_FIFO_STATUS

MX_UINT8 FCV_SPI_DATA1 = (0xff);
046C  30FF  	MOVLW 0xFF
046D  00CF  	MOVWF gbl_FCV_SPI_DATA1

MX_UINT8 FCV_REG13_RX_PW_P2 = (0x0);
046E  01D0  	CLRF gbl_FCV_REG13_RX_PW_P2

MX_UINT8 FCV_REG16_RX_PW_P5 = (0x0);
046F  01D1  	CLRF gbl_FCV_REG16_RX_PW_P5

MX_UINT8 FCV_REG0A_RX_ADDR_P0_BYTE0 = (0x0);
0470  01D2  	CLRF gbl_FCV_REG0A_RX_ADDR_P0_BYTE0

MX_UINT8 FCV_REG07_STATUS = (0x0);
0471  01D3  	CLRF gbl_FCV_REG07_STATUS

MX_UINT8 FCV_REG05_RF_CH = (0x0);
0472  01D4  	CLRF gbl_FCV_REG05_RF_CH

MX_UINT8 FCV_REG0A_RX_ADDR_P0_BYTE1 = (0x0);
0473  01D5  	CLRF gbl_FCV_REG0A_RX_ADDR_P0_BYTE1

MX_UINT8 FCV_REG0D_RX_ADDR_P3 = (0x0);
0474  01D6  	CLRF gbl_FCV_REG0D_RX_ADDR_P3

MX_UINT8 FCV_REG02_EN_RXADDR = (0x0);
0475  01D7  	CLRF gbl_FCV_REG02_EN_RXADDR

MX_UINT8 FCV_REG0A_RX_ADDR_P0_BYTE2 = (0x0);
0476  01D8  	CLRF gbl_FCV_REG0A_RX_ADDR_P0_BYTE2

MX_UINT8 FCV_REG08_OBSERVE = (0x0);
0477  01D9  	CLRF gbl_FCV_REG08_OBSERVE

MX_UINT8 FCV_REG01_ENAA = (0x0);
0478  01DA  	CLRF gbl_FCV_REG01_ENAA

MX_UINT8 FCV_REG0A_RX_ADDR_P0_BYTE3 = (0x0);
0479  01DB  	CLRF gbl_FCV_REG0A_RX_ADDR_P0_BYTE3

MX_UINT8 FCV_REG11_RX_PW_P0 = (0x0);
047A  01DC  	CLRF gbl_FCV_REG11_RX_PW_P0

MX_UINT8 FCV_REG03_SETUP_AW = (0x0);
047B  01DD  	CLRF gbl_FCV_REG03_SETUP_AW

MX_UINT8 FCV_REG0A_RX_ADDR_P0_BYTE4 = (0x0);
047C  01DE  	CLRF gbl_FCV_REG0A_RX_ADDR_P0_BYTE4

MX_UINT8 FCV_REG_TO_WRITE = (0x0);
047D  01DF  	CLRF gbl_FCV_REG_TO_WRITE

MX_UINT8 FCV_CURSORX = (0x0);
047E  01E0  	CLRF gbl_FCV_CURSORX

MX_UINT8 FCV_REG14_RX_PW_P3 = (0x0);
047F  01E1  	CLRF gbl_FCV_REG14_RX_PW_P3

MX_UINT8 FCV_REG0E_RX_ADDR_P4 = (0x0);
0480  01E2  	CLRF gbl_FCV_REG0E_RX_ADDR_P4

MX_UINT8 FCV_REG0B_RX_ADDR_P1 = (0x0);
0481  01E3  	CLRF gbl_FCV_REG0B_RX_ADDR_P1

MX_UINT8 FCV_REG06_RF_SETUP = (0x0);
0482  01E4  	CLRF gbl_FCV_REG06_RF_SETUP

MX_UINT8 FCV_REG04_SETUP_RETR = (0x0);
0483  01E5  	CLRF gbl_FCV_REG04_SETUP_RETR

MX_UINT8 FCV_REG10_TX_ADDR_BYTE0 = (0x0);
0484  01E6  	CLRF gbl_FCV_REG10_TX_ADDR_BYTE0





//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    portb
	#define LCD_1__PORT1    portb
	#define LCD_1__PORT2    portb
	#define LCD_1__PORT3    portb
	#define LCD_1__PORT4    portb
	#define LCD_1__PORT5    portb
	#define LCD_1__TRIS0    trisb
	#define LCD_1__TRIS1    trisb
	#define LCD_1__TRIS2    trisb
	#define LCD_1__TRIS3    trisb
	#define LCD_1__TRIS4    trisb
	#define LCD_1__TRIS5    trisb
	#define LCD_1__BIT0    	2
	#define LCD_1__BIT1    	3
	#define LCD_1__BIT2    	4
	#define LCD_1__BIT3    	5
	#define LCD_1__RS      	0
	#define LCD_1__E       	1
	#define LCD_1__ROWCNT	4
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);


//SPI_Legacy(0): //Defines:

/**** Macro Substitutions ****
a = Unique Ref
b = SPI Channel
c = MOSI Pin
d = MOSI Port
e = MISO Pin
f = MISO Port
g = SCK Pin
h = SCK Port
i = Clock Polarity + Clock Phase + Data Sample Phase
j = SPI Prescaler
k = SPI Postscaler
l = DAC Enable Pin
m = DAC Enable Port
n = FRAM Enable Pin
o = FRAM Enable Port
******************************/

//MX_SPI_BMODE - Bus Mode - Bit0=CPOL, Bit1=CPHA, Bit2=CSMP
//CPOL - Clock Polarity - Idle State of the clock 0=0, 1=1
//CPHA - Clock Phase - Clock Edge 0=leading edge, 1=trailing edge
//CSMP - Input Data Bit Sample Phase


//Definitions for CS control lines
#define SPI_2_MX_SPI_LEGACY_DAC_PIN		0
#define SPI_2_MX_SPI_LEGACY_DAC_PORT		porta
#define SPI_2_MX_SPI_LEGACY_DAC_TRIS		trisa
#define SPI_2_MX_SPI_LEGACY_FRAM_PIN		0
#define SPI_2_MX_SPI_LEGACY_FRAM_PORT		porta
#define SPI_2_MX_SPI_LEGACY_FRAM_TRIS		trisa


//Definitions for SPI slot allocation
#ifndef	MX_SPI_REF1
	#define MX_SPI_REF1
	#define SPI_2_MX_SPI_UREF			1
	#define MX_SPI_CHANNEL_1		1
	#define MX_SPI_MOSI_PIN_1		-1
	#define MX_SPI_MOSI_PORT_1		port0
	#define MX_SPI_MOSI_TRIS_1		tris0
	#define MX_SPI_MISO_PIN_1		-1
	#define MX_SPI_MISO_PORT_1		port0
	#define MX_SPI_MISO_TRIS_1		tris0
	#define MX_SPI_SCK_PIN_1		-1
	#define MX_SPI_SCK_PORT_1		port0
	#define MX_SPI_SCK_TRIS_1		tris0
	#define MX_SPI_CS_PIN_1			0
	#define MX_SPI_CS_PORT_1		0
	#define MX_SPI_BMODE_1			6
	#define MX_SPI_PR_SCALE_1		64
	#define MX_SPI_PO_SCALE_1		0
	#define MX_SPI_INT_1			0
#else
 #ifndef	MX_SPI_REF2
	#define MX_SPI_REF2
	#define SPI_2_MX_SPI_UREF			2
	#define MX_SPI_CHANNEL_2		1
	#define MX_SPI_MOSI_PIN_2		-1
	#define MX_SPI_MOSI_PORT_2		port0
	#define MX_SPI_MOSI_TRIS_2		tris0
	#define MX_SPI_MISO_PIN_2		-1
	#define MX_SPI_MISO_PORT_2		port0
	#define MX_SPI_MISO_TRIS_2		tris0
	#define MX_SPI_SCK_PIN_2		-1
	#define MX_SPI_SCK_PORT_2		port0
	#define MX_SPI_SCK_TRIS_2		tris0
	#define MX_SPI_CS_PIN_2			0
	#define MX_SPI_CS_PORT_2		0
	#define MX_SPI_BMODE_2			6
	#define MX_SPI_PR_SCALE_2		64
	#define MX_SPI_PO_SCALE_2		0
	#define MX_SPI_INT_2			0
 #else
  #ifndef	MX_SPI_REF3
	#define MX_SPI_REF3
	#define SPI_2_MX_SPI_UREF			3
	#define MX_SPI_CHANNEL_3		1
	#define MX_SPI_MOSI_PIN_3		-1
	#define MX_SPI_MOSI_PORT_3		port0
	#define MX_SPI_MOSI_TRIS_3		tris0
	#define MX_SPI_MISO_PIN_3		-1
	#define MX_SPI_MISO_PORT_3		port0
	#define MX_SPI_MISO_TRIS_3		tris0
	#define MX_SPI_SCK_PIN_3		-1
	#define MX_SPI_SCK_PORT_3		port0
	#define MX_SPI_SCK_TRIS_3		tris0
	#define MX_SPI_CS_PIN_3			0
	#define MX_SPI_CS_PORT_3		0
	#define MX_SPI_BMODE_3			6
	#define MX_SPI_PR_SCALE_3		64
	#define MX_SPI_PO_SCALE_3		0
	#define MX_SPI_INT_3			0
  #else
   #ifndef	MX_SPI_REF4
	#define MX_SPI_REF4
	#define SPI_2_MX_SPI_UREF			4
	#define MX_SPI_CHANNEL_4		1
	#define MX_SPI_MOSI_PIN_4		-1
	#define MX_SPI_MOSI_PORT_4		port0
	#define MX_SPI_MOSI_TRIS_4		tris0
	#define MX_SPI_MISO_PIN_4		-1
	#define MX_SPI_MISO_PORT_4		port0
	#define MX_SPI_MISO_TRIS_4		tris0
	#define MX_SPI_SCK_PIN_4		-1
	#define MX_SPI_SCK_PORT_4		port0
	#define MX_SPI_SCK_TRIS_4		tris0
	#define MX_SPI_CS_PIN_4			0
	#define MX_SPI_CS_PORT_4		0
	#define MX_SPI_BMODE_4			6
	#define MX_SPI_PR_SCALE_4		64
	#define MX_SPI_PO_SCALE_4		0
	#define MX_SPI_INT_4			0
   #endif
  #endif
 #endif
#endif

#define SPI_2_SPI_Master_Init		CAL_APPEND(FC_CAL_SPI_Master_Init_, SPI_2_MX_SPI_UREF)
#define SPI_2_SPI_Master_Uninit	CAL_APPEND(FC_CAL_SPI_Master_Uninit_, SPI_2_MX_SPI_UREF)
#define SPI_2_SPI_Master_Byte		CAL_APPEND(FC_CAL_SPI_Master_Byte_, SPI_2_MX_SPI_UREF)

extern void SPI_2_SPI_Master_Init ();
extern void SPI_2_SPI_Master_Uninit ();
extern MX_UINT8 SPI_2_SPI_Master_Byte (MX_UINT8 DataOut);

//FRAM commands
#define FRAM_WREN  	6
#define FRAM_WRDI  	4
#define FRAM_RDSR  	5
#define FRAM_WRSR  	1
#define FRAM_READ  	3
#define FRAM_WRITE 	2




//SPI_Legacy(0): //Macro function declarations

void FCD_SPI_Legacy0_SPI_Init();
void FCD_SPI_Legacy0_SPI_Uninit();
void FCD_SPI_Legacy0_SPI_Send_Char(MX_UINT8 Char);
void FCD_SPI_Legacy0_SPI_Send_String(MX_STRING String, MX_UINT8 MSZ_String);
MX_UINT8 FCD_SPI_Legacy0_SPI_Get_Char();
void FCD_SPI_Legacy0_SPI_Get_String(MX_CHAR* FCR_RETVAL, MX_UINT8 FCR_RETVAL_SIZE, MX_UINT8 NumBytes);
void FCD_SPI_Legacy0_DAC_Send_Char(MX_UINT8 Char);
void FCD_SPI_Legacy0_NVM_Send_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr, MX_UINT8 Char);
MX_UINT8 FCD_SPI_Legacy0_NVM_Get_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr);
MX_UINT8 FCD_SPI_Legacy0_FramOutput(MX_UINT8 Char);
void FCD_SPI_Legacy0_EnableFRAM();
void FCD_SPI_Legacy0_DisableFRAM();



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
00A3  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
00A4  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
00A5  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
00A6  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
00A7  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
00A8  1086  	BCF gbl_portb,1

		pt = ((in >> 4) & 0x0f);
00A9  0E6C  	SWAPF FCD_LCDDis_0005F_arg_in, W
00AA  390F  	ANDLW 0x0F
00AB  00EE  	MOVWF FCD_LCDDis_0005F_1_pt
00AC  300F  	MOVLW 0x0F
00AD  05EE  	ANDWF FCD_LCDDis_0005F_1_pt, F

		if (pt & 0x01)
00AE  186E  	BTFSC FCD_LCDDis_0005F_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
00AF  1506  	BSF gbl_portb,2

		if (pt & 0x02)
00B0  18EE  	BTFSC FCD_LCDDis_0005F_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
00B1  1586  	BSF gbl_portb,3

		if (pt & 0x04)
00B2  196E  	BTFSC FCD_LCDDis_0005F_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
00B3  1606  	BSF gbl_portb,4

		if (pt & 0x08)
00B4  19EE  	BTFSC FCD_LCDDis_0005F_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
00B5  1686  	BSF gbl_portb,5

		if (mask)
00B6  08ED  	MOVF FCD_LCDDis_0005F_arg_mask, F
00B7  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
00B8  1406  	BSF gbl_portb,0

		LCD_1__DELAY;
00B9  300A  	MOVLW 0x0A
00BA  00EF  	MOVWF delay_10us_00000_arg_del
00BB  203C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
00BC  1486  	BSF gbl_portb,1

		LCD_1__DELAY;
00BD  300A  	MOVLW 0x0A
00BE  00EF  	MOVWF delay_10us_00000_arg_del
00BF  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
00C0  1086  	BCF gbl_portb,1

		pt = (in & 0x0f);
00C1  300F  	MOVLW 0x0F
00C2  056C  	ANDWF FCD_LCDDis_0005F_arg_in, W
00C3  00EE  	MOVWF FCD_LCDDis_0005F_1_pt

		LCD_1__DELAY;
00C4  300A  	MOVLW 0x0A
00C5  00EF  	MOVWF delay_10us_00000_arg_del
00C6  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
00C7  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
00C8  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
00C9  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
00CA  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
00CB  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
00CC  1086  	BCF gbl_portb,1

		if (pt & 0x01)
00CD  186E  	BTFSC FCD_LCDDis_0005F_1_pt,0

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
00CE  1506  	BSF gbl_portb,2

		if (pt & 0x02)
00CF  18EE  	BTFSC FCD_LCDDis_0005F_1_pt,1

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
00D0  1586  	BSF gbl_portb,3

		if (pt & 0x04)
00D1  196E  	BTFSC FCD_LCDDis_0005F_1_pt,2

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
00D2  1606  	BSF gbl_portb,4

		if (pt & 0x08)
00D3  19EE  	BTFSC FCD_LCDDis_0005F_1_pt,3

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
00D4  1686  	BSF gbl_portb,5

		if (mask)
00D5  08ED  	MOVF FCD_LCDDis_0005F_arg_mask, F
00D6  1D03  	BTFSS STATUS,Z

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
00D7  1406  	BSF gbl_portb,0

		LCD_1__DELAY;
00D8  300A  	MOVLW 0x0A
00D9  00EF  	MOVWF delay_10us_00000_arg_del
00DA  203C  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
00DB  1486  	BSF gbl_portb,1

		LCD_1__DELAY;
00DC  300A  	MOVLW 0x0A
00DD  00EF  	MOVWF delay_10us_00000_arg_del
00DE  203C  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
00DF  1086  	BCF gbl_portb,1

		LCD_1__DELAY;
00E0  300A  	MOVLW 0x0A
00E1  00EF  	MOVWF delay_10us_00000_arg_del
00E2  203C  	CALL delay_10us_00000


}
00E3  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
03BD  1683  	BSF STATUS, RP0
03BE  1303  	BCF STATUS, RP1
03BF  1106  	BCF gbl_trisb,2
03C0  1283  	BCF STATUS, RP0
03C1  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
03C2  1683  	BSF STATUS, RP0
03C3  1186  	BCF gbl_trisb,3
03C4  1283  	BCF STATUS, RP0
03C5  1186  	BCF gbl_portb,3

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
03C6  1683  	BSF STATUS, RP0
03C7  1206  	BCF gbl_trisb,4
03C8  1283  	BCF STATUS, RP0
03C9  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
03CA  1683  	BSF STATUS, RP0
03CB  1286  	BCF gbl_trisb,5
03CC  1283  	BCF STATUS, RP0
03CD  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
03CE  1683  	BSF STATUS, RP0
03CF  1006  	BCF gbl_trisb,0
03D0  1283  	BCF STATUS, RP0
03D1  1006  	BCF gbl_portb,0

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
03D2  1683  	BSF STATUS, RP0
03D3  1086  	BCF gbl_trisb,1
03D4  1283  	BCF STATUS, RP0
03D5  1086  	BCF gbl_portb,1


		Wdt_Delay_Ms(12);
03D6  300C  	MOVLW 0x0C
03D7  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
03D8  2089  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
03D9  3033  	MOVLW 0x33
03DA  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
03DB  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
03DC  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
03DD  3002  	MOVLW 0x02
03DE  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
03DF  2089  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
03E0  3033  	MOVLW 0x33
03E1  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
03E2  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
03E3  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
03E4  3002  	MOVLW 0x02
03E5  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
03E6  2089  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
03E7  3032  	MOVLW 0x32
03E8  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
03E9  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
03EA  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
03EB  3002  	MOVLW 0x02
03EC  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
03ED  2089  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
03EE  302C  	MOVLW 0x2C
03EF  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
03F0  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
03F1  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
03F2  3002  	MOVLW 0x02
03F3  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
03F4  2089  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
03F5  3006  	MOVLW 0x06
03F6  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
03F7  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
03F8  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
03F9  3002  	MOVLW 0x02
03FA  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
03FB  2089  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
03FC  300C  	MOVLW 0x0C
03FD  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
03FE  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
03FF  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0400  3002  	MOVLW 0x02
0401  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
0402  2089  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
0403  3001  	MOVLW 0x01
0404  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
0405  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
0406  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0407  3002  	MOVLW 0x02
0408  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
0409  2089  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
040A  3002  	MOVLW 0x02
040B  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
040C  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
040D  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
040E  3002  	MOVLW 0x02
040F  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
0410  2089  	CALL Wdt_Delay__0003E


}
0411  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
03AC  3001  	MOVLW 0x01
03AD  1283  	BCF STATUS, RP0
03AE  1303  	BCF STATUS, RP1
03AF  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
03B0  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
03B1  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
03B2  3002  	MOVLW 0x02
03B3  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
03B4  2089  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
03B5  3002  	MOVLW 0x02
03B6  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
03B7  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
03B8  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
03B9  3002  	MOVLW 0x02
03BA  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
03BB  2089  	CALL Wdt_Delay__0003E


}
03BC  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)
{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);

}

void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
			y=0x80;
		else
			y=0xc0;
	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
027A  08E8  	MOVF FCD_LCDDis_00056_arg_y, F
027B  1D03  	BTFSS STATUS,Z
027C  2A80  	GOTO	label33
0280        label33

			y=0x80;
027D  3080  	MOVLW 0x80
027E  00E8  	MOVWF FCD_LCDDis_00056_arg_y

		else if (y==1)
027F  2A8F  	GOTO	label36
0280  0368  	DECF FCD_LCDDis_00056_arg_y, W
0281  1D03  	BTFSS STATUS,Z
0282  2A86  	GOTO	label34
0286        label34

			y=0xc0;
0283  30C0  	MOVLW 0xC0
0284  00E8  	MOVWF FCD_LCDDis_00056_arg_y


		#if (LCD_1__COLCNT == 16)
			else if (y==2)
0285  2A8F  	GOTO	label36
0286  0868  	MOVF FCD_LCDDis_00056_arg_y, W
0287  3A02  	XORLW 0x02
0288  1D03  	BTFSS STATUS,Z
0289  2A8D  	GOTO	label35
028D        label35

				y=0x90;
028A  3090  	MOVLW 0x90
028B  00E8  	MOVWF FCD_LCDDis_00056_arg_y

			else
028C  2A8F  	GOTO	label36
028F        label36

				y=0xd0;
028D  30D0  	MOVLW 0xD0
028E  00E8  	MOVWF FCD_LCDDis_00056_arg_y

		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
028F  0867  	MOVF FCD_LCDDis_00056_arg_x, W
0290  0768  	ADDWF FCD_LCDDis_00056_arg_y, W
0291  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
0292  01ED  	CLRF FCD_LCDDis_0005F_arg_mask
0293  20A3  	CALL FCD_LCDDis_0005F

		Wdt_Delay_Ms(2);
0294  3002  	MOVLW 0x02
0295  00E9  	MOVWF Wdt_Delay__0003E_arg_delay
0296  2089  	CALL Wdt_Delay__0003E


}
0297  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)

{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
018C  1FE8  	BTFSS FCD_LCDDis_00057_arg_Number+D'1',7
018D  299B  	GOTO	label12
019B        label12

		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
018E  302D  	MOVLW 0x2D
018F  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
0190  3010  	MOVLW 0x10
0191  00ED  	MOVWF FCD_LCDDis_0005F_arg_mask
0192  20A3  	CALL FCD_LCDDis_0005F

			Number = 0 - Number;
0193  0867  	MOVF FCD_LCDDis_00057_arg_Number, W
0194  3C00  	SUBLW 0x00
0195  00EC  	MOVWF CompTempVar2190
0196  09E8  	COMF FCD_LCDDis_00057_arg_Number+D'1', F
0197  1803  	BTFSC STATUS,C
0198  0AE8  	INCF FCD_LCDDis_00057_arg_Number+D'1', F
0199  086C  	MOVF CompTempVar2190, W
019A  00E7  	MOVWF FCD_LCDDis_00057_arg_Number

		}

		tmp_int = Number;
019B  0867  	MOVF FCD_LCDDis_00057_arg_Number, W
019C  00E9  	MOVWF FCD_LCDDis_00057_1_tmp_int
019D  0868  	MOVF FCD_LCDDis_00057_arg_Number+D'1', W
019E  00EA  	MOVWF FCD_LCDDis_00057_1_tmp_int+D'1'

		if (Number >= 10000)
019F  3027  	MOVLW 0x27
01A0  0268  	SUBWF FCD_LCDDis_00057_arg_Number+D'1', W
01A1  1D03  	BTFSS STATUS,Z
01A2  29A5  	GOTO	label13
01A3  3010  	MOVLW 0x10
01A4  0267  	SUBWF FCD_LCDDis_00057_arg_Number, W
01A5        label13
01A5  1C03  	BTFSS STATUS,C
01A6  29D3  	GOTO	label17
01A7  1BE8  	BTFSC FCD_LCDDis_00057_arg_Number+D'1',7
01A8  29D3  	GOTO	label17

		{
			tmp_byte = tmp_int / 10000;
01A9  01F0  	CLRF CompTempVar2193
01AA  0869  	MOVF FCD_LCDDis_00057_1_tmp_int, W
01AB  00EC  	MOVWF __div_16_1_00003_arg_a
01AC  086A  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', W
01AD  00ED  	MOVWF __div_16_1_00003_arg_a+D'1'
01AE  1FEA  	BTFSS FCD_LCDDis_00057_1_tmp_int+D'1',7
01AF  29B6  	GOTO	label14
01B0  09EC  	COMF __div_16_1_00003_arg_a, F
01B1  09ED  	COMF __div_16_1_00003_arg_a+D'1', F
01B2  0AEC  	INCF __div_16_1_00003_arg_a, F
01B3  1903  	BTFSC STATUS,Z
01B4  0AED  	INCF __div_16_1_00003_arg_a+D'1', F
01B5  0AF0  	INCF CompTempVar2193, F
01B6        label14
01B6  3010  	MOVLW 0x10
01B7  00EE  	MOVWF __div_16_1_00003_arg_b
01B8  3027  	MOVLW 0x27
01B9  00EF  	MOVWF __div_16_1_00003_arg_b+D'1'
01BA  206A  	CALL __div_16_1_00003
01BB  0875  	MOVF CompTempVarRet214, W
01BC  00EB  	MOVWF FCD_LCDDis_00057_1_tmp_byte
01BD  1C70  	BTFSS CompTempVar2193,0
01BE  29C1  	GOTO	label15
01BF  09EB  	COMF FCD_LCDDis_00057_1_tmp_byte, F
01C0  0AEB  	INCF FCD_LCDDis_00057_1_tmp_byte, F
01C1        label15

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
01C1  086B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
01C2  3E30  	ADDLW 0x30
01C3  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
01C4  3010  	MOVLW 0x10
01C5  00ED  	MOVWF FCD_LCDDis_0005F_arg_mask
01C6  20A3  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
01C7        label16
01C7  086B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
01C8  3C00  	SUBLW 0x00
01C9  1803  	BTFSC STATUS,C
01CA  29D3  	GOTO	label17
01D2  29C7  	GOTO	label16
01D3        label17

			{
				tmp_int = tmp_int - 10000;
01CB  3010  	MOVLW 0x10
01CC  02E9  	SUBWF FCD_LCDDis_00057_1_tmp_int, F
01CD  3027  	MOVLW 0x27
01CE  1C03  	BTFSS STATUS,C
01CF  3028  	MOVLW 0x28
01D0  02EA  	SUBWF FCD_LCDDis_00057_1_tmp_int+D'1', F

				tmp_byte--;
01D1  03EB  	DECF FCD_LCDDis_00057_1_tmp_byte, F

			}
		}
		if (Number >= 1000)
01D3  3003  	MOVLW 0x03
01D4  0268  	SUBWF FCD_LCDDis_00057_arg_Number+D'1', W
01D5  1D03  	BTFSS STATUS,Z
01D6  29D9  	GOTO	label18
01D7  30E8  	MOVLW 0xE8
01D8  0267  	SUBWF FCD_LCDDis_00057_arg_Number, W
01D9        label18
01D9  1C03  	BTFSS STATUS,C
01DA  2A09  	GOTO	label22
01DB  1BE8  	BTFSC FCD_LCDDis_00057_arg_Number+D'1',7
01DC  2A09  	GOTO	label22

		{
			tmp_byte = tmp_int / 1000;
01DD  01F1  	CLRF CompTempVar2197
01DE  0869  	MOVF FCD_LCDDis_00057_1_tmp_int, W
01DF  00EC  	MOVWF __div_16_1_00003_arg_a
01E0  086A  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', W
01E1  00ED  	MOVWF __div_16_1_00003_arg_a+D'1'
01E2  1FEA  	BTFSS FCD_LCDDis_00057_1_tmp_int+D'1',7
01E3  29EA  	GOTO	label19
01E4  09EC  	COMF __div_16_1_00003_arg_a, F
01E5  09ED  	COMF __div_16_1_00003_arg_a+D'1', F
01E6  0AEC  	INCF __div_16_1_00003_arg_a, F
01E7  1903  	BTFSC STATUS,Z
01E8  0AED  	INCF __div_16_1_00003_arg_a+D'1', F
01E9  0AF1  	INCF CompTempVar2197, F
01EA        label19
01EA  30E8  	MOVLW 0xE8
01EB  00EE  	MOVWF __div_16_1_00003_arg_b
01EC  3003  	MOVLW 0x03
01ED  00EF  	MOVWF __div_16_1_00003_arg_b+D'1'
01EE  206A  	CALL __div_16_1_00003
01EF  0875  	MOVF CompTempVarRet214, W
01F0  00F0  	MOVWF CompTempVar2196
01F1  1C71  	BTFSS CompTempVar2197,0
01F2  29F5  	GOTO	label20
01F3  09F0  	COMF CompTempVar2196, F
01F4  0AF0  	INCF CompTempVar2196, F
01F5        label20
01F5  0870  	MOVF CompTempVar2196, W
01F6  00EB  	MOVWF FCD_LCDDis_00057_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
01F7  086B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
01F8  3E30  	ADDLW 0x30
01F9  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
01FA  3010  	MOVLW 0x10
01FB  00ED  	MOVWF FCD_LCDDis_0005F_arg_mask
01FC  20A3  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
01FD        label21
01FD  086B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
01FE  3C00  	SUBLW 0x00
01FF  1803  	BTFSC STATUS,C
0200  2A09  	GOTO	label22
0208  29FD  	GOTO	label21
0209        label22

			{
				tmp_int = tmp_int - 1000;
0201  30E8  	MOVLW 0xE8
0202  02E9  	SUBWF FCD_LCDDis_00057_1_tmp_int, F
0203  3003  	MOVLW 0x03
0204  1C03  	BTFSS STATUS,C
0205  3004  	MOVLW 0x04
0206  02EA  	SUBWF FCD_LCDDis_00057_1_tmp_int+D'1', F

				tmp_byte--;
0207  03EB  	DECF FCD_LCDDis_00057_1_tmp_byte, F

			}
		}
		if (Number >= 100)
0209  0868  	MOVF FCD_LCDDis_00057_arg_Number+D'1', W
020A  3A80  	XORLW 0x80
020B  00EC  	MOVWF CompTempVar2200
020C  3080  	MOVLW 0x80
020D  026C  	SUBWF CompTempVar2200, W
020E  1D03  	BTFSS STATUS,Z
020F  2A12  	GOTO	label23
0210  3064  	MOVLW 0x64
0211  0267  	SUBWF FCD_LCDDis_00057_arg_Number, W
0212        label23
0212  1C03  	BTFSS STATUS,C
0213  2A3E  	GOTO	label27

		{
			tmp_byte = tmp_int / 100;
0214  01F1  	CLRF CompTempVar2202
0215  0869  	MOVF FCD_LCDDis_00057_1_tmp_int, W
0216  00EC  	MOVWF __div_16_1_00003_arg_a
0217  086A  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', W
0218  00ED  	MOVWF __div_16_1_00003_arg_a+D'1'
0219  1FEA  	BTFSS FCD_LCDDis_00057_1_tmp_int+D'1',7
021A  2A21  	GOTO	label24
021B  09EC  	COMF __div_16_1_00003_arg_a, F
021C  09ED  	COMF __div_16_1_00003_arg_a+D'1', F
021D  0AEC  	INCF __div_16_1_00003_arg_a, F
021E  1903  	BTFSC STATUS,Z
021F  0AED  	INCF __div_16_1_00003_arg_a+D'1', F
0220  0AF1  	INCF CompTempVar2202, F
0221        label24
0221  3064  	MOVLW 0x64
0222  00EE  	MOVWF __div_16_1_00003_arg_b
0223  01EF  	CLRF __div_16_1_00003_arg_b+D'1'
0224  206A  	CALL __div_16_1_00003
0225  0875  	MOVF CompTempVarRet214, W
0226  00F0  	MOVWF CompTempVar2201
0227  1C71  	BTFSS CompTempVar2202,0
0228  2A2B  	GOTO	label25
0229  09F0  	COMF CompTempVar2201, F
022A  0AF0  	INCF CompTempVar2201, F
022B        label25
022B  0870  	MOVF CompTempVar2201, W
022C  00EB  	MOVWF FCD_LCDDis_00057_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
022D  086B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
022E  3E30  	ADDLW 0x30
022F  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
0230  3010  	MOVLW 0x10
0231  00ED  	MOVWF FCD_LCDDis_0005F_arg_mask
0232  20A3  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
0233        label26
0233  086B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
0234  3C00  	SUBLW 0x00
0235  1803  	BTFSC STATUS,C
0236  2A3E  	GOTO	label27
023D  2A33  	GOTO	label26
023E        label27

			{
				tmp_int = tmp_int - 100;
0237  3064  	MOVLW 0x64
0238  02E9  	SUBWF FCD_LCDDis_00057_1_tmp_int, F
0239  08EA  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', F
023A  1C03  	BTFSS STATUS,C
023B  03EA  	DECF FCD_LCDDis_00057_1_tmp_int+D'1', F

				tmp_byte--;
023C  03EB  	DECF FCD_LCDDis_00057_1_tmp_byte, F

			}
		}
		if (Number >= 10)
023E  0868  	MOVF FCD_LCDDis_00057_arg_Number+D'1', W
023F  3A80  	XORLW 0x80
0240  00EC  	MOVWF CompTempVar2205
0241  3080  	MOVLW 0x80
0242  026C  	SUBWF CompTempVar2205, W
0243  1D03  	BTFSS STATUS,Z
0244  2A47  	GOTO	label28
0245  300A  	MOVLW 0x0A
0246  0267  	SUBWF FCD_LCDDis_00057_arg_Number, W
0247        label28
0247  1C03  	BTFSS STATUS,C
0248  2A73  	GOTO	label32

		{
			tmp_byte = tmp_int / 10;
0249  01F1  	CLRF CompTempVar2207
024A  0869  	MOVF FCD_LCDDis_00057_1_tmp_int, W
024B  00EC  	MOVWF __div_16_1_00003_arg_a
024C  086A  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', W
024D  00ED  	MOVWF __div_16_1_00003_arg_a+D'1'
024E  1FEA  	BTFSS FCD_LCDDis_00057_1_tmp_int+D'1',7
024F  2A56  	GOTO	label29
0250  09EC  	COMF __div_16_1_00003_arg_a, F
0251  09ED  	COMF __div_16_1_00003_arg_a+D'1', F
0252  0AEC  	INCF __div_16_1_00003_arg_a, F
0253  1903  	BTFSC STATUS,Z
0254  0AED  	INCF __div_16_1_00003_arg_a+D'1', F
0255  0AF1  	INCF CompTempVar2207, F
0256        label29
0256  300A  	MOVLW 0x0A
0257  00EE  	MOVWF __div_16_1_00003_arg_b
0258  01EF  	CLRF __div_16_1_00003_arg_b+D'1'
0259  206A  	CALL __div_16_1_00003
025A  0875  	MOVF CompTempVarRet214, W
025B  00F0  	MOVWF CompTempVar2206
025C  1C71  	BTFSS CompTempVar2207,0
025D  2A60  	GOTO	label30
025E  09F0  	COMF CompTempVar2206, F
025F  0AF0  	INCF CompTempVar2206, F
0260        label30
0260  0870  	MOVF CompTempVar2206, W
0261  00EB  	MOVWF FCD_LCDDis_00057_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0262  086B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
0263  3E30  	ADDLW 0x30
0264  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
0265  3010  	MOVLW 0x10
0266  00ED  	MOVWF FCD_LCDDis_0005F_arg_mask
0267  20A3  	CALL FCD_LCDDis_0005F


			while (tmp_byte > 0)
0268        label31
0268  086B  	MOVF FCD_LCDDis_00057_1_tmp_byte, W
0269  3C00  	SUBLW 0x00
026A  1803  	BTFSC STATUS,C
026B  2A73  	GOTO	label32
0272  2A68  	GOTO	label31
0273        label32

			{
				tmp_int = tmp_int - 10;
026C  300A  	MOVLW 0x0A
026D  02E9  	SUBWF FCD_LCDDis_00057_1_tmp_int, F
026E  08EA  	MOVF FCD_LCDDis_00057_1_tmp_int+D'1', F
026F  1C03  	BTFSS STATUS,C
0270  03EA  	DECF FCD_LCDDis_00057_1_tmp_int+D'1', F

				tmp_byte--;
0271  03EB  	DECF FCD_LCDDis_00057_1_tmp_byte, F

			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);
0273  0869  	MOVF FCD_LCDDis_00057_1_tmp_int, W
0274  3E30  	ADDLW 0x30
0275  00EC  	MOVWF FCD_LCDDis_0005F_arg_in
0276  3010  	MOVLW 0x10
0277  00ED  	MOVWF FCD_LCDDis_0005F_arg_mask
0278  20A3  	CALL FCD_LCDDis_0005F


}
0279  0008  	RETURN


void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)
{
	
		MX_UINT8 idx = 0;

		for (idx=0; idx<MSZ_String; idx++)
		{
			if (String[idx] == 0)
			{
				break;
			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
		}

}

void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}



//SPI_Legacy(0): //Macro implementations


void FCD_SPI_Legacy0_SPI_Init()

{
	
		//Disable SPI Devices
		FC_CAL_Bit_High_DDR(SPI_2_MX_SPI_LEGACY_DAC_PORT, SPI_2_MX_SPI_LEGACY_DAC_TRIS, SPI_2_MX_SPI_LEGACY_DAC_PIN);
03A1  1683  	BSF STATUS, RP0
03A2  1303  	BCF STATUS, RP1
03A3  1005  	BCF gbl_trisa,0
03A4  1283  	BCF STATUS, RP0
03A5  1405  	BSF gbl_porta,0

		FC_CAL_Bit_High_DDR(SPI_2_MX_SPI_LEGACY_FRAM_PORT, SPI_2_MX_SPI_LEGACY_FRAM_TRIS, SPI_2_MX_SPI_LEGACY_FRAM_PIN);
03A6  1683  	BSF STATUS, RP0
03A7  1005  	BCF gbl_trisa,0
03A8  1283  	BCF STATUS, RP0
03A9  1405  	BSF gbl_porta,0


		//Init SPI
		SPI_2_SPI_Master_Init();		//Call initialise function
03AA  20E4  	CALL FC_CAL_SPI_00069


}
03AB  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Uninit()
{
	
		//Convert SPI Device Control Lines To Inputs
		FC_CAL_Bit_In_DDR(SPI_2_MX_SPI_LEGACY_DAC_PORT, SPI_2_MX_SPI_LEGACY_DAC_TRIS, SPI_2_MX_SPI_LEGACY_DAC_PIN);
		FC_CAL_Bit_In_DDR(SPI_2_MX_SPI_LEGACY_FRAM_PORT, SPI_2_MX_SPI_LEGACY_FRAM_TRIS, SPI_2_MX_SPI_LEGACY_FRAM_PIN);

		//Uninit SPI
		SPI_2_SPI_Master_Uninit();		//Call uninitialise function

}

void FCD_SPI_Legacy0_SPI_Send_Char(MX_UINT8 Char)

{
	
		SPI_2_SPI_Master_Byte(Char);
009F  0867  	MOVF FCD_SPI_Le_00053_arg_Char, W
00A0  00E8  	MOVWF FC_CAL_SPI_0006B_arg_DataOut
00A1  205E  	CALL FC_CAL_SPI_0006B


}
00A2  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Send_String(MX_STRING String, MX_UINT8 MSZ_String)
{
	
		MX_UINT8 idx;
		for(idx = 0; idx < MSZ_String; idx++)
		{
			if (String[idx] == 0)				//End of string data?
				break;

			SPI_2_SPI_Master_Byte(String[idx]);
		}

}

MX_UINT8 FCD_SPI_Legacy0_SPI_Get_Char()

{
	
		MX_UINT8 retVal = 0;
0094  1283  	BCF STATUS, RP0
0095  1303  	BCF STATUS, RP1
0096  01E7  	CLRF FCD_SPI_Le_00054_1_retVal


		retVal = SPI_2_SPI_Master_Byte(0xFF);
0097  30FF  	MOVLW 0xFF
0098  00E8  	MOVWF FC_CAL_SPI_0006B_arg_DataOut
0099  205E  	CALL FC_CAL_SPI_0006B
009A  086A  	MOVF CompTempVarRet2222, W
009B  00E7  	MOVWF FCD_SPI_Le_00054_1_retVal


		return (retVal);
009C  0867  	MOVF FCD_SPI_Le_00054_1_retVal, W
009D  00E8  	MOVWF CompTempVarRet2189


}
009E  0008  	RETURN


void FCD_SPI_Legacy0_SPI_Get_String(MX_CHAR* FCR_RETVAL, MX_UINT8 FCR_RETVAL_SIZE, MX_UINT8 NumBytes)
{
		MX_UINT8 idx;

		if (NumBytes > FCR_RETVAL_SIZE)
			NumBytes = FCR_RETVAL_SIZE;

		for (idx = 0; idx < NumBytes; idx++)
		{
			FCR_RETVAL[idx] = SPI_2_SPI_Master_Byte(0xFF);		//Collect incoming data byte
		}

		if (idx < FCR_RETVAL_SIZE)
			FCR_RETVAL[idx] = 0;					//Terminate string if string variable is longer then expected data

}

void FCD_SPI_Legacy0_DAC_Send_Char(MX_UINT8 Char)
{
	
		MX_UINT8 dac_val;

		FC_CAL_Bit_Low(SPI_2_MX_SPI_LEGACY_DAC_PORT, SPI_2_MX_SPI_LEGACY_DAC_PIN);		//enable dac

		dac_val = (Char & 0xF0) >> 4;
		SPI_2_SPI_Master_Byte(dac_val);

		dac_val = (Char & 0x0F) << 4;
		SPI_2_SPI_Master_Byte(dac_val);

		FC_CAL_Bit_High(SPI_2_MX_SPI_LEGACY_DAC_PORT, SPI_2_MX_SPI_LEGACY_DAC_PIN);		//disable dac

}

void FCD_SPI_Legacy0_NVM_Send_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr, MX_UINT8 Char)
{
	
		//enable writes
		FCD_SPI_Legacy0_EnableFRAM();
		FCD_SPI_Legacy0_FramOutput(FRAM_WREN);
		FCD_SPI_Legacy0_DisableFRAM();

		//send write-fram command, address and data
		FCD_SPI_Legacy0_EnableFRAM();
		FCD_SPI_Legacy0_FramOutput(FRAM_WRITE);
		FCD_SPI_Legacy0_FramOutput(hi_addr);
		FCD_SPI_Legacy0_FramOutput(lo_addr);
		FCD_SPI_Legacy0_FramOutput(Char);
		FCD_SPI_Legacy0_DisableFRAM();

}

MX_UINT8 FCD_SPI_Legacy0_NVM_Get_Char(MX_UINT8 hi_addr, MX_UINT8 lo_addr)
{
	
		MX_UINT8 retVal;

		FCD_SPI_Legacy0_EnableFRAM();

		//send read-fram command and address
		FCD_SPI_Legacy0_FramOutput(FRAM_READ);
		FCD_SPI_Legacy0_FramOutput(hi_addr);
		FCD_SPI_Legacy0_FramOutput(lo_addr);

		//read the data
		retVal = FCD_SPI_Legacy0_FramOutput(0x5A);  	//don't care byte of 0x5A

		FCD_SPI_Legacy0_DisableFRAM();

		return(retVal);

}

MX_UINT8 FCD_SPI_Legacy0_FramOutput(MX_UINT8 Char)
{
	
		MX_UINT8 retVal = 0;
		retVal = SPI_2_SPI_Master_Byte(Char);
		return (retVal);

}

void FCD_SPI_Legacy0_EnableFRAM()
{
	
		FC_CAL_Bit_Low(SPI_2_MX_SPI_LEGACY_FRAM_PORT, SPI_2_MX_SPI_LEGACY_FRAM_PIN);

}

void FCD_SPI_Legacy0_DisableFRAM()
{
	
		FC_CAL_Bit_High(SPI_2_MX_SPI_LEGACY_FRAM_PORT, SPI_2_MX_SPI_LEGACY_FRAM_PIN);

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_spi_nrf_reg_read()

{

	//Comment:
	//read reg00

	//Calculation
	//Calculation:
	//  spi_data0 = 0x00
	FCV_SPI_DATA0 = 0x00;
0298  1283  	BCF STATUS, RP0
0299  1303  	BCF STATUS, RP1
029A  01CD  	CLRF gbl_FCV_SPI_DATA0


	//Call Macro
	//Call Macro: cmd_read_reg()
	FCM_cmd_read_reg();
029B  216B  	CALL FCM_cmd_re_00052


	//Calculation
	//Calculation:
	//  reg00_config = spi_data1
	FCV_REG00_CONFIG = FCV_SPI_DATA1;
029C  084F  	MOVF gbl_FCV_SPI_DATA1, W
029D  00C3  	MOVWF gbl_FCV_REG00_CONFIG


	//Comment:
	//read reg01

	//Calculation
	//Calculation:
	//  spi_data0 = 0x01
	FCV_SPI_DATA0 = 0x01;
029E  3001  	MOVLW 0x01
029F  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//Call Macro
	//Call Macro: cmd_read_reg()
	FCM_cmd_read_reg();
02A0  216B  	CALL FCM_cmd_re_00052


	//Calculation
	//Calculation:
	//  reg01_enaa = spi_data1
	FCV_REG01_ENAA = FCV_SPI_DATA1;
02A1  084F  	MOVF gbl_FCV_SPI_DATA1, W
02A2  00DA  	MOVWF gbl_FCV_REG01_ENAA


	//Comment:
	//read reg02

	//Calculation
	//Calculation:
	//  spi_data0 = 0x02
	FCV_SPI_DATA0 = 0x02;
02A3  3002  	MOVLW 0x02
02A4  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//Call Macro
	//Call Macro: cmd_read_reg()
	FCM_cmd_read_reg();
02A5  216B  	CALL FCM_cmd_re_00052


	//Calculation
	//Calculation:
	//  reg02_en_rxaddr = spi_data1
	FCV_REG02_EN_RXADDR = FCV_SPI_DATA1;
02A6  084F  	MOVF gbl_FCV_SPI_DATA1, W
02A7  00D7  	MOVWF gbl_FCV_REG02_EN_RXADDR


	//Comment:
	//read reg03

	//Calculation
	//Calculation:
	//  spi_data0 = 0x03
	FCV_SPI_DATA0 = 0x03;
02A8  3003  	MOVLW 0x03
02A9  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//Call Macro
	//Call Macro: cmd_read_reg()
	FCM_cmd_read_reg();
02AA  216B  	CALL FCM_cmd_re_00052


	//Calculation
	//Calculation:
	//  reg03_setup_aw = spi_data1
	FCV_REG03_SETUP_AW = FCV_SPI_DATA1;
02AB  084F  	MOVF gbl_FCV_SPI_DATA1, W
02AC  00DD  	MOVWF gbl_FCV_REG03_SETUP_AW


	//Comment:
	//read reg04

	//Calculation
	//Calculation:
	//  spi_data0 = 0x04
	FCV_SPI_DATA0 = 0x04;
02AD  3004  	MOVLW 0x04
02AE  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//Call Macro
	//Call Macro: cmd_read_reg()
	FCM_cmd_read_reg();
02AF  216B  	CALL FCM_cmd_re_00052


	//Calculation
	//Calculation:
	//  reg04_setup_retr = spi_data1
	FCV_REG04_SETUP_RETR = FCV_SPI_DATA1;
02B0  084F  	MOVF gbl_FCV_SPI_DATA1, W
02B1  00E5  	MOVWF gbl_FCV_REG04_SETUP_RETR


	//Comment:
	//read reg05

	//Calculation
	//Calculation:
	//  spi_data0 = 0x05
	FCV_SPI_DATA0 = 0x05;
02B2  3005  	MOVLW 0x05
02B3  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//Call Macro
	//Call Macro: cmd_read_reg()
	FCM_cmd_read_reg();
02B4  216B  	CALL FCM_cmd_re_00052


	//Calculation
	//Calculation:
	//  reg05_rf_ch = spi_data1
	FCV_REG05_RF_CH = FCV_SPI_DATA1;
02B5  084F  	MOVF gbl_FCV_SPI_DATA1, W
02B6  00D4  	MOVWF gbl_FCV_REG05_RF_CH


	//Comment:
	//read reg06

	//Calculation
	//Calculation:
	//  spi_data0 = 0x06
	FCV_SPI_DATA0 = 0x06;
02B7  3006  	MOVLW 0x06
02B8  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//Call Macro
	//Call Macro: cmd_read_reg()
	FCM_cmd_read_reg();
02B9  216B  	CALL FCM_cmd_re_00052


	//Calculation
	//Calculation:
	//  reg06_rf_setup = spi_data1
	FCV_REG06_RF_SETUP = FCV_SPI_DATA1;
02BA  084F  	MOVF gbl_FCV_SPI_DATA1, W
02BB  00E4  	MOVWF gbl_FCV_REG06_RF_SETUP


	//Comment:
	//read reg07

	//Calculation
	//Calculation:
	//  spi_data0 = 0x07
	FCV_SPI_DATA0 = 0x07;
02BC  3007  	MOVLW 0x07
02BD  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//Call Macro
	//Call Macro: cmd_read_reg()
	FCM_cmd_read_reg();
02BE  216B  	CALL FCM_cmd_re_00052


	//Calculation
	//Calculation:
	//  reg07_status = spi_data1
	FCV_REG07_STATUS = FCV_SPI_DATA1;
02BF  084F  	MOVF gbl_FCV_SPI_DATA1, W
02C0  00D3  	MOVWF gbl_FCV_REG07_STATUS


}
02C1  0008  	RETURN



void FCM_cmd_read_reg()

{

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
016B  30FB  	MOVLW 0xFB
016C  1683  	BSF STATUS, RP0
016D  1303  	BCF STATUS, RP1
016E  0507  	ANDWF gbl_trisc, W
016F  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
0170  30FB  	MOVLW 0xFB
0171  1283  	BCF STATUS, RP0
0172  0507  	ANDWF gbl_portc, W
0173  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 5 us
	delay_us(5);
0174  3005  	MOVLW 0x05
0175  00E7  	MOVWF delay_us_00000_arg_del
0176  204A  	CALL delay_us_00000


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_data0)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_DATA0);
0177  084D  	MOVF gbl_FCV_SPI_DATA0, W
0178  00E7  	MOVWF FCD_SPI_Le_00053_arg_Char
0179  209F  	CALL FCD_SPI_Le_00053


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
017A  2094  	CALL FCD_SPI_Le_00054
017B  0868  	MOVF CompTempVarRet2189, W
017C  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
017D  30FB  	MOVLW 0xFB
017E  1683  	BSF STATUS, RP0
017F  0507  	ANDWF gbl_trisc, W
0180  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0181  30FB  	MOVLW 0xFB
0182  1283  	BCF STATUS, RP0
0183  0507  	ANDWF gbl_portc, W
0184  00E7  	MOVWF CompTempVar2188
0185  3004  	MOVLW 0x04
0186  0467  	IORWF CompTempVar2188, W
0187  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 5 us
	delay_us(5);
0188  3005  	MOVLW 0x05
0189  00E7  	MOVWF delay_us_00000_arg_del
018A  204A  	CALL delay_us_00000


}
018B  0008  	RETURN



void FCM_lcd_line0()

{

	//Calculation
	//Calculation:
	//  cursorx = 0
	FCV_CURSORX = 0;
0374  1283  	BCF STATUS, RP0
0375  1303  	BCF STATUS, RP1
0376  01E0  	CLRF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 0)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 0);
0377  0860  	MOVF gbl_FCV_CURSORX, W
0378  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0379  01E8  	CLRF FCD_LCDDis_00056_arg_y
037A  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg00_config)
	FCD_LCDDisplay0_PrintNumber(FCV_REG00_CONFIG);
037B  0843  	MOVF gbl_FCV_REG00_CONFIG, W
037C  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
037D  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
037E  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 4
	FCV_CURSORX = FCV_CURSORX + 4;
037F  3004  	MOVLW 0x04
0380  0760  	ADDWF gbl_FCV_CURSORX, W
0381  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 0)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 0);
0382  0860  	MOVF gbl_FCV_CURSORX, W
0383  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0384  01E8  	CLRF FCD_LCDDis_00056_arg_y
0385  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg01_enaa)
	FCD_LCDDisplay0_PrintNumber(FCV_REG01_ENAA);
0386  085A  	MOVF gbl_FCV_REG01_ENAA, W
0387  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
0388  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
0389  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 4
	FCV_CURSORX = FCV_CURSORX + 4;
038A  3004  	MOVLW 0x04
038B  0760  	ADDWF gbl_FCV_CURSORX, W
038C  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 0)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 0);
038D  0860  	MOVF gbl_FCV_CURSORX, W
038E  00E7  	MOVWF FCD_LCDDis_00056_arg_x
038F  01E8  	CLRF FCD_LCDDis_00056_arg_y
0390  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg02_en_rxaddr)
	FCD_LCDDisplay0_PrintNumber(FCV_REG02_EN_RXADDR);
0391  0857  	MOVF gbl_FCV_REG02_EN_RXADDR, W
0392  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
0393  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
0394  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 4
	FCV_CURSORX = FCV_CURSORX + 4;
0395  3004  	MOVLW 0x04
0396  0760  	ADDWF gbl_FCV_CURSORX, W
0397  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 0)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 0);
0398  0860  	MOVF gbl_FCV_CURSORX, W
0399  00E7  	MOVWF FCD_LCDDis_00056_arg_x
039A  01E8  	CLRF FCD_LCDDis_00056_arg_y
039B  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg03_setup_aw)
	FCD_LCDDisplay0_PrintNumber(FCV_REG03_SETUP_AW);
039C  085D  	MOVF gbl_FCV_REG03_SETUP_AW, W
039D  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
039E  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
039F  218C  	CALL FCD_LCDDis_00057


}
03A0  0008  	RETURN



void FCM_lcd_line1()

{

	//Calculation
	//Calculation:
	//  cursorx = 0
	FCV_CURSORX = 0;
0340  1283  	BCF STATUS, RP0
0341  1303  	BCF STATUS, RP1
0342  01E0  	CLRF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 1)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 1);
0343  0860  	MOVF gbl_FCV_CURSORX, W
0344  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0345  3001  	MOVLW 0x01
0346  00E8  	MOVWF FCD_LCDDis_00056_arg_y
0347  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg04_setup_retr)
	FCD_LCDDisplay0_PrintNumber(FCV_REG04_SETUP_RETR);
0348  0865  	MOVF gbl_FCV_REG04_SETUP_RETR, W
0349  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
034A  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
034B  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 4
	FCV_CURSORX = FCV_CURSORX + 4;
034C  3004  	MOVLW 0x04
034D  0760  	ADDWF gbl_FCV_CURSORX, W
034E  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 1)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 1);
034F  0860  	MOVF gbl_FCV_CURSORX, W
0350  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0351  3001  	MOVLW 0x01
0352  00E8  	MOVWF FCD_LCDDis_00056_arg_y
0353  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg05_rf_ch)
	FCD_LCDDisplay0_PrintNumber(FCV_REG05_RF_CH);
0354  0854  	MOVF gbl_FCV_REG05_RF_CH, W
0355  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
0356  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
0357  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 4
	FCV_CURSORX = FCV_CURSORX + 4;
0358  3004  	MOVLW 0x04
0359  0760  	ADDWF gbl_FCV_CURSORX, W
035A  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 1)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 1);
035B  0860  	MOVF gbl_FCV_CURSORX, W
035C  00E7  	MOVWF FCD_LCDDis_00056_arg_x
035D  3001  	MOVLW 0x01
035E  00E8  	MOVWF FCD_LCDDis_00056_arg_y
035F  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg06_rf_setup)
	FCD_LCDDisplay0_PrintNumber(FCV_REG06_RF_SETUP);
0360  0864  	MOVF gbl_FCV_REG06_RF_SETUP, W
0361  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
0362  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
0363  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 4
	FCV_CURSORX = FCV_CURSORX + 4;
0364  3004  	MOVLW 0x04
0365  0760  	ADDWF gbl_FCV_CURSORX, W
0366  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 1)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 1);
0367  0860  	MOVF gbl_FCV_CURSORX, W
0368  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0369  3001  	MOVLW 0x01
036A  00E8  	MOVWF FCD_LCDDis_00056_arg_y
036B  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg07_status)
	FCD_LCDDisplay0_PrintNumber(FCV_REG07_STATUS);
036C  0853  	MOVF gbl_FCV_REG07_STATUS, W
036D  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
036E  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
036F  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 4
	FCV_CURSORX = FCV_CURSORX + 4;
0370  3004  	MOVLW 0x04
0371  0760  	ADDWF gbl_FCV_CURSORX, W
0372  00E0  	MOVWF gbl_FCV_CURSORX


}
0373  0008  	RETURN



void FCM_lcd_line2()

{

	//Call Macro
	//Call Macro: cmd_read_rx_addr()
	FCM_cmd_read_rx_addr();
0301  2131  	CALL FCM_cmd_re_0005A


	//Calculation
	//Calculation:
	//  cursorx = 0
	FCV_CURSORX = 0;
0302  01E0  	CLRF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 2)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 2);
0303  0860  	MOVF gbl_FCV_CURSORX, W
0304  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0305  3002  	MOVLW 0x02
0306  00E8  	MOVWF FCD_LCDDis_00056_arg_y
0307  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg0A_rx_addr_p0_byte0)
	FCD_LCDDisplay0_PrintNumber(FCV_REG0A_RX_ADDR_P0_BYTE0);
0308  0852  	MOVF gbl_FCV_REG0A_RX_ADDR_P0_BYTE0, W
0309  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
030A  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
030B  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
030C  3003  	MOVLW 0x03
030D  0760  	ADDWF gbl_FCV_CURSORX, W
030E  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 2)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 2);
030F  0860  	MOVF gbl_FCV_CURSORX, W
0310  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0311  3002  	MOVLW 0x02
0312  00E8  	MOVWF FCD_LCDDis_00056_arg_y
0313  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg0A_rx_addr_p0_byte1)
	FCD_LCDDisplay0_PrintNumber(FCV_REG0A_RX_ADDR_P0_BYTE1);
0314  0855  	MOVF gbl_FCV_REG0A_RX_ADDR_P0_BYTE1, W
0315  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
0316  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
0317  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
0318  3003  	MOVLW 0x03
0319  0760  	ADDWF gbl_FCV_CURSORX, W
031A  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 2)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 2);
031B  0860  	MOVF gbl_FCV_CURSORX, W
031C  00E7  	MOVWF FCD_LCDDis_00056_arg_x
031D  3002  	MOVLW 0x02
031E  00E8  	MOVWF FCD_LCDDis_00056_arg_y
031F  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg0A_rx_addr_p0_byte2)
	FCD_LCDDisplay0_PrintNumber(FCV_REG0A_RX_ADDR_P0_BYTE2);
0320  0858  	MOVF gbl_FCV_REG0A_RX_ADDR_P0_BYTE2, W
0321  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
0322  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
0323  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
0324  3003  	MOVLW 0x03
0325  0760  	ADDWF gbl_FCV_CURSORX, W
0326  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 2)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 2);
0327  0860  	MOVF gbl_FCV_CURSORX, W
0328  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0329  3002  	MOVLW 0x02
032A  00E8  	MOVWF FCD_LCDDis_00056_arg_y
032B  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg0A_rx_addr_p0_byte3)
	FCD_LCDDisplay0_PrintNumber(FCV_REG0A_RX_ADDR_P0_BYTE3);
032C  085B  	MOVF gbl_FCV_REG0A_RX_ADDR_P0_BYTE3, W
032D  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
032E  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
032F  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
0330  3003  	MOVLW 0x03
0331  0760  	ADDWF gbl_FCV_CURSORX, W
0332  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 2)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 2);
0333  0860  	MOVF gbl_FCV_CURSORX, W
0334  00E7  	MOVWF FCD_LCDDis_00056_arg_x
0335  3002  	MOVLW 0x02
0336  00E8  	MOVWF FCD_LCDDis_00056_arg_y
0337  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg0A_rx_addr_p0_byte4)
	FCD_LCDDisplay0_PrintNumber(FCV_REG0A_RX_ADDR_P0_BYTE4);
0338  085E  	MOVF gbl_FCV_REG0A_RX_ADDR_P0_BYTE4, W
0339  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
033A  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
033B  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
033C  3003  	MOVLW 0x03
033D  0760  	ADDWF gbl_FCV_CURSORX, W
033E  00E0  	MOVWF gbl_FCV_CURSORX


}
033F  0008  	RETURN



void FCM_cmd_read_rx_addr()

{

	//Comment:
	//read rx addr

	//Calculation
	//Calculation:
	//  spi_data0 = 0x0A
	FCV_SPI_DATA0 = 0x0A;
0131  300A  	MOVLW 0x0A
0132  1283  	BCF STATUS, RP0
0133  1303  	BCF STATUS, RP1
0134  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
0135  30FB  	MOVLW 0xFB
0136  1683  	BSF STATUS, RP0
0137  0507  	ANDWF gbl_trisc, W
0138  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
0139  30FB  	MOVLW 0xFB
013A  1283  	BCF STATUS, RP0
013B  0507  	ANDWF gbl_portc, W
013C  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 5 us
	delay_us(5);
013D  3005  	MOVLW 0x05
013E  00E7  	MOVWF delay_us_00000_arg_del
013F  204A  	CALL delay_us_00000


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_data0)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_DATA0);
0140  084D  	MOVF gbl_FCV_SPI_DATA0, W
0141  00E7  	MOVWF FCD_SPI_Le_00053_arg_Char
0142  209F  	CALL FCD_SPI_Le_00053


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
0143  2094  	CALL FCD_SPI_Le_00054
0144  0868  	MOVF CompTempVarRet2189, W
0145  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg0A_rx_addr_p0_byte0 = spi_data1
	FCV_REG0A_RX_ADDR_P0_BYTE0 = FCV_SPI_DATA1;
0146  084F  	MOVF gbl_FCV_SPI_DATA1, W
0147  00D2  	MOVWF gbl_FCV_REG0A_RX_ADDR_P0_BYTE0


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
0148  2094  	CALL FCD_SPI_Le_00054
0149  0868  	MOVF CompTempVarRet2189, W
014A  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg0A_rx_addr_p0_byte1 = spi_data1
	FCV_REG0A_RX_ADDR_P0_BYTE1 = FCV_SPI_DATA1;
014B  084F  	MOVF gbl_FCV_SPI_DATA1, W
014C  00D5  	MOVWF gbl_FCV_REG0A_RX_ADDR_P0_BYTE1


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
014D  2094  	CALL FCD_SPI_Le_00054
014E  0868  	MOVF CompTempVarRet2189, W
014F  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg0A_rx_addr_p0_byte2 = spi_data1
	FCV_REG0A_RX_ADDR_P0_BYTE2 = FCV_SPI_DATA1;
0150  084F  	MOVF gbl_FCV_SPI_DATA1, W
0151  00D8  	MOVWF gbl_FCV_REG0A_RX_ADDR_P0_BYTE2


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
0152  2094  	CALL FCD_SPI_Le_00054
0153  0868  	MOVF CompTempVarRet2189, W
0154  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg0A_rx_addr_p0_byte3 = spi_data1
	FCV_REG0A_RX_ADDR_P0_BYTE3 = FCV_SPI_DATA1;
0155  084F  	MOVF gbl_FCV_SPI_DATA1, W
0156  00DB  	MOVWF gbl_FCV_REG0A_RX_ADDR_P0_BYTE3


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
0157  2094  	CALL FCD_SPI_Le_00054
0158  0868  	MOVF CompTempVarRet2189, W
0159  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg0A_rx_addr_p0_byte4 = spi_data1
	FCV_REG0A_RX_ADDR_P0_BYTE4 = FCV_SPI_DATA1;
015A  084F  	MOVF gbl_FCV_SPI_DATA1, W
015B  00DE  	MOVWF gbl_FCV_REG0A_RX_ADDR_P0_BYTE4


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
015C  30FB  	MOVLW 0xFB
015D  1683  	BSF STATUS, RP0
015E  0507  	ANDWF gbl_trisc, W
015F  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0160  30FB  	MOVLW 0xFB
0161  1283  	BCF STATUS, RP0
0162  0507  	ANDWF gbl_portc, W
0163  00E7  	MOVWF CompTempVar2210
0164  3004  	MOVLW 0x04
0165  0467  	IORWF CompTempVar2210, W
0166  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 5 us
	delay_us(5);
0167  3005  	MOVLW 0x05
0168  00E7  	MOVWF delay_us_00000_arg_del
0169  204A  	CALL delay_us_00000


}
016A  0008  	RETURN



void FCM_cmd_read_tx_addr()

{

	//Comment:
	//read rx addr

	//Calculation
	//Calculation:
	//  spi_data0 = 0x10
	FCV_SPI_DATA0 = 0x10;
00F7  3010  	MOVLW 0x10
00F8  1283  	BCF STATUS, RP0
00F9  1303  	BCF STATUS, RP1
00FA  00CD  	MOVWF gbl_FCV_SPI_DATA0


	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
00FB  30FB  	MOVLW 0xFB
00FC  1683  	BSF STATUS, RP0
00FD  0507  	ANDWF gbl_trisc, W
00FE  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;
00FF  30FB  	MOVLW 0xFB
0100  1283  	BCF STATUS, RP0
0101  0507  	ANDWF gbl_portc, W
0102  0087  	MOVWF gbl_portc


	//Delay
	//Delay: 5 us
	delay_us(5);
0103  3005  	MOVLW 0x05
0104  00E7  	MOVWF delay_us_00000_arg_del
0105  204A  	CALL delay_us_00000


	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_data0)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_DATA0);
0106  084D  	MOVF gbl_FCV_SPI_DATA0, W
0107  00E7  	MOVWF FCD_SPI_Le_00053_arg_Char
0108  209F  	CALL FCD_SPI_Le_00053


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
0109  2094  	CALL FCD_SPI_Le_00054
010A  0868  	MOVF CompTempVarRet2189, W
010B  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg10_tx_addr_byte0 = spi_data1
	FCV_REG10_TX_ADDR_BYTE0 = FCV_SPI_DATA1;
010C  084F  	MOVF gbl_FCV_SPI_DATA1, W
010D  00E6  	MOVWF gbl_FCV_REG10_TX_ADDR_BYTE0


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
010E  2094  	CALL FCD_SPI_Le_00054
010F  0868  	MOVF CompTempVarRet2189, W
0110  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg10_tx_addr_byte1 = spi_data1
	FCV_REG10_TX_ADDR_BYTE1 = FCV_SPI_DATA1;
0111  084F  	MOVF gbl_FCV_SPI_DATA1, W
0112  00C4  	MOVWF gbl_FCV_REG10_TX_ADDR_BYTE1


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
0113  2094  	CALL FCD_SPI_Le_00054
0114  0868  	MOVF CompTempVarRet2189, W
0115  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg10_tx_addr_byte2 = spi_data1
	FCV_REG10_TX_ADDR_BYTE2 = FCV_SPI_DATA1;
0116  084F  	MOVF gbl_FCV_SPI_DATA1, W
0117  00C8  	MOVWF gbl_FCV_REG10_TX_ADDR_BYTE2


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
0118  2094  	CALL FCD_SPI_Le_00054
0119  0868  	MOVF CompTempVarRet2189, W
011A  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg10_tx_addr_byte3 = spi_data1
	FCV_REG10_TX_ADDR_BYTE3 = FCV_SPI_DATA1;
011B  084F  	MOVF gbl_FCV_SPI_DATA1, W
011C  00C9  	MOVWF gbl_FCV_REG10_TX_ADDR_BYTE3


	//Call Component Macro
	//Call Component Macro: spi_data1=SPI_Get_Char()
	FCV_SPI_DATA1 = FCD_SPI_Legacy0_SPI_Get_Char();
011D  2094  	CALL FCD_SPI_Le_00054
011E  0868  	MOVF CompTempVarRet2189, W
011F  00CF  	MOVWF gbl_FCV_SPI_DATA1


	//Calculation
	//Calculation:
	//  reg10_tx_addr_byte4 = spi_data1
	FCV_REG10_TX_ADDR_BYTE4 = FCV_SPI_DATA1;
0120  084F  	MOVF gbl_FCV_SPI_DATA1, W
0121  00CC  	MOVWF gbl_FCV_REG10_TX_ADDR_BYTE4


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0122  30FB  	MOVLW 0xFB
0123  1683  	BSF STATUS, RP0
0124  0507  	ANDWF gbl_trisc, W
0125  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0126  30FB  	MOVLW 0xFB
0127  1283  	BCF STATUS, RP0
0128  0507  	ANDWF gbl_portc, W
0129  00E7  	MOVWF CompTempVar2211
012A  3004  	MOVLW 0x04
012B  0467  	IORWF CompTempVar2211, W
012C  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 5 us
	delay_us(5);
012D  3005  	MOVLW 0x05
012E  00E7  	MOVWF delay_us_00000_arg_del
012F  204A  	CALL delay_us_00000


}
0130  0008  	RETURN



void FCM_lcd_line3()

{

	//Call Macro
	//Call Macro: cmd_read_tx_addr()
	FCM_cmd_read_tx_addr();
02C2  20F7  	CALL FCM_cmd_re_0005B


	//Calculation
	//Calculation:
	//  cursorx = 0
	FCV_CURSORX = 0;
02C3  01E0  	CLRF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 3)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 3);
02C4  0860  	MOVF gbl_FCV_CURSORX, W
02C5  00E7  	MOVWF FCD_LCDDis_00056_arg_x
02C6  3003  	MOVLW 0x03
02C7  00E8  	MOVWF FCD_LCDDis_00056_arg_y
02C8  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg10_tx_addr_byte0)
	FCD_LCDDisplay0_PrintNumber(FCV_REG10_TX_ADDR_BYTE0);
02C9  0866  	MOVF gbl_FCV_REG10_TX_ADDR_BYTE0, W
02CA  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
02CB  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
02CC  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
02CD  3003  	MOVLW 0x03
02CE  0760  	ADDWF gbl_FCV_CURSORX, W
02CF  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 3)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 3);
02D0  0860  	MOVF gbl_FCV_CURSORX, W
02D1  00E7  	MOVWF FCD_LCDDis_00056_arg_x
02D2  3003  	MOVLW 0x03
02D3  00E8  	MOVWF FCD_LCDDis_00056_arg_y
02D4  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg10_tx_addr_byte1)
	FCD_LCDDisplay0_PrintNumber(FCV_REG10_TX_ADDR_BYTE1);
02D5  0844  	MOVF gbl_FCV_REG10_TX_ADDR_BYTE1, W
02D6  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
02D7  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
02D8  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
02D9  3003  	MOVLW 0x03
02DA  0760  	ADDWF gbl_FCV_CURSORX, W
02DB  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 3)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 3);
02DC  0860  	MOVF gbl_FCV_CURSORX, W
02DD  00E7  	MOVWF FCD_LCDDis_00056_arg_x
02DE  3003  	MOVLW 0x03
02DF  00E8  	MOVWF FCD_LCDDis_00056_arg_y
02E0  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg10_tx_addr_byte2)
	FCD_LCDDisplay0_PrintNumber(FCV_REG10_TX_ADDR_BYTE2);
02E1  0848  	MOVF gbl_FCV_REG10_TX_ADDR_BYTE2, W
02E2  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
02E3  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
02E4  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
02E5  3003  	MOVLW 0x03
02E6  0760  	ADDWF gbl_FCV_CURSORX, W
02E7  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 3)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 3);
02E8  0860  	MOVF gbl_FCV_CURSORX, W
02E9  00E7  	MOVWF FCD_LCDDis_00056_arg_x
02EA  3003  	MOVLW 0x03
02EB  00E8  	MOVWF FCD_LCDDis_00056_arg_y
02EC  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg10_tx_addr_byte3)
	FCD_LCDDisplay0_PrintNumber(FCV_REG10_TX_ADDR_BYTE3);
02ED  0849  	MOVF gbl_FCV_REG10_TX_ADDR_BYTE3, W
02EE  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
02EF  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
02F0  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
02F1  3003  	MOVLW 0x03
02F2  0760  	ADDWF gbl_FCV_CURSORX, W
02F3  00E0  	MOVWF gbl_FCV_CURSORX


	//Call Component Macro
	//Call Component Macro: Cursor(cursorx, 3)
	FCD_LCDDisplay0_Cursor(FCV_CURSORX, 3);
02F4  0860  	MOVF gbl_FCV_CURSORX, W
02F5  00E7  	MOVWF FCD_LCDDis_00056_arg_x
02F6  3003  	MOVLW 0x03
02F7  00E8  	MOVWF FCD_LCDDis_00056_arg_y
02F8  227A  	CALL FCD_LCDDis_00056


	//Call Component Macro
	//Call Component Macro: PrintNumber(reg10_tx_addr_byte4)
	FCD_LCDDisplay0_PrintNumber(FCV_REG10_TX_ADDR_BYTE4);
02F9  084C  	MOVF gbl_FCV_REG10_TX_ADDR_BYTE4, W
02FA  00E7  	MOVWF FCD_LCDDis_00057_arg_Number
02FB  01E8  	CLRF FCD_LCDDis_00057_arg_Number+D'1'
02FC  218C  	CALL FCD_LCDDis_00057


	//Calculation
	//Calculation:
	//  cursorx = cursorx + 3
	FCV_CURSORX = FCV_CURSORX + 3;
02FD  3003  	MOVLW 0x03
02FE  0760  	ADDWF gbl_FCV_CURSORX, W
02FF  00E0  	MOVWF gbl_FCV_CURSORX


}
0300  0008  	RETURN



void FCM_nrf_tx_init()
{

	//Calculation
	//Calculation:
	//  reg_to_write = 00
	//  data_to_write = 0x0E
	FCV_REG_TO_WRITE = 00;
	FCV_DATA_TO_WRITE = 0x0E;

	//Call Macro
	//Call Macro: cmd_write_reg()
	FCM_cmd_write_reg();

	//Calculation
	//Calculation:
	//  reg_to_write = 04
	//  data_to_write = 0x5F
	FCV_REG_TO_WRITE = 04;
	FCV_DATA_TO_WRITE = 0x5F;

	//Call Macro
	//Call Macro: cmd_write_reg()
	FCM_cmd_write_reg();

	//Calculation
	//Calculation:
	//  reg_to_write = 05
	//  data_to_write = 0x4C
	FCV_REG_TO_WRITE = 05;
	FCV_DATA_TO_WRITE = 0x4C;

	//Call Macro
	//Call Macro: cmd_write_reg()
	FCM_cmd_write_reg();

	//Calculation
	//Calculation:
	//  reg_to_write = 05
	//  data_to_write = 0x4C
	FCV_REG_TO_WRITE = 05;
	FCV_DATA_TO_WRITE = 0x4C;

	//Call Macro
	//Call Macro: cmd_write_reg()
	FCM_cmd_write_reg();

}


void FCM_cmd_write_reg()
{

	//CSN
	//Output: 0 -> C2
	trisc = trisc & 0xFB;
	if ((0))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 5 us
	delay_us(5);

	//Calculation
	//Calculation:
	//  spi_data0 = reg_to_write + 0x20
	FCV_SPI_DATA0 = FCV_REG_TO_WRITE + 0x20;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_data0)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_DATA0);

	//Calculation
	//Calculation:
	//  spi_data0 = data_to_write
	FCV_SPI_DATA0 = FCV_DATA_TO_WRITE;

	//Call Component Macro
	//Call Component Macro: SPI_Send_Char(spi_data0)
	FCD_SPI_Legacy0_SPI_Send_Char(FCV_SPI_DATA0);

	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
	if ((1))
		portc = (portc & 0xFB) | 0x04;
	else
		portc = portc & 0xFB;

	//Delay
	//Delay: 5 us
	delay_us(5);

}



void main()

{
	//Initialization
	adcon1 = 0x07;
0412  3007  	MOVLW 0x07
0413  1683  	BSF STATUS, RP0
0414  1303  	BCF STATUS, RP1
0415  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0416  30C0  	MOVLW 0xC0
0417  0081  	MOVWF gbl_option_reg



	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
0418  23BD  	CALL FCD_LCDDis_00060


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0419  23AC  	CALL FCD_LCDDis_00061


	//Call Component Macro
	//Call Component Macro: SPI_Init()
	FCD_SPI_Legacy0_SPI_Init();
041A  23A1  	CALL FCD_SPI_Le_0006C


	//CE
	//Output: 0 -> C1
	trisc = trisc & 0xFD;
041B  30FD  	MOVLW 0xFD
041C  1683  	BSF STATUS, RP0
041D  0507  	ANDWF gbl_trisc, W
041E  0087  	MOVWF gbl_trisc

	if ((0))
		portc = (portc & 0xFD) | 0x02;
	else
		portc = portc & 0xFD;
041F  30FD  	MOVLW 0xFD
0420  1283  	BCF STATUS, RP0
0421  0507  	ANDWF gbl_portc, W
0422  0087  	MOVWF gbl_portc


	//CSN
	//Output: 1 -> C2
	trisc = trisc & 0xFB;
0423  30FB  	MOVLW 0xFB
0424  1683  	BSF STATUS, RP0
0425  0507  	ANDWF gbl_trisc, W
0426  0087  	MOVWF gbl_trisc

	if ((1))
		portc = (portc & 0xFB) | 0x04;
0427  30FB  	MOVLW 0xFB
0428  1283  	BCF STATUS, RP0
0429  0507  	ANDWF gbl_portc, W
042A  00E7  	MOVWF CompTempVar2234
042B  3004  	MOVLW 0x04
042C  0467  	IORWF CompTempVar2234, W
042D  0087  	MOVWF gbl_portc

	else
		portc = portc & 0xFB;

	//Loop
	//Loop: While 1
	while (1)
042E        label37
0437  2C2E  	GOTO	label37

	{

		//Call Component Macro
		//Call Component Macro: Clear()
		FCD_LCDDisplay0_Clear();
042E  23AC  	CALL FCD_LCDDis_00061


		//Call Macro
		//Call Macro: spi_nrf_reg_read()
		FCM_spi_nrf_reg_read();
042F  2298  	CALL FCM_spi_nr_00051


		//Call Macro
		//Call Macro: lcd_line0()
		FCM_lcd_line0();
0430  2374  	CALL FCM_lcd_li_00055


		//Call Macro
		//Call Macro: lcd_line1()
		FCM_lcd_line1();
0431  2340  	CALL FCM_lcd_li_00058


		//Call Macro
		//Call Macro: lcd_line2()
		FCM_lcd_line2();
0432  2301  	CALL FCM_lcd_li_00059


		//Call Macro
		//Call Macro: lcd_line3()
		FCM_lcd_line3();
0433  22C2  	CALL FCM_lcd_li_0005C


		//Delay
		//Delay: 1 s
		delay_s(1);
0434  3001  	MOVLW 0x01
0435  00E7  	MOVWF delay_s_00000_arg_del
0436  204F  	CALL delay_s_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0488  1283  	BCF STATUS, RP0
0489  1303  	BCF STATUS, RP1
048A  0E36  	SWAPF Int1BContext+D'2', W
048B  0084  	MOVWF FSR
048C  0E35  	SWAPF Int1BContext+D'1', W
048D  008A  	MOVWF PCLATH
048E  0E34  	SWAPF Int1BContext, W
048F  0083  	MOVWF STATUS
0490  0EFF  	SWAPF Int1Context, F
0491  0E7F  	SWAPF Int1Context, W
0492  0009  	RETFIE





/*********************************************************************
 *                  Flowcode CAL SPI File
 *
 * File: PIC_CAL_SPI.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 * 150911 | BR | Updated variables with typedef alternatives
 * 011211 | BR | Converted to new dynamic defines mechanism
 *
 */


//When using hardware SPI channels override port and pin conns with FCD conn definitions
//Only overwrite CS pin defines when using SPI in slave mode on a hardware channel
//Also sort out postscale and prescale options for hardware channels
#ifdef MX_SPI_REF1
	#if MX_SPI_CHANNEL_1 > 0
		#undef MX_SPI_MOSI_PIN_1
		#undef MX_SPI_MOSI_PORT_1
		#undef MX_SPI_MOSI_TRIS_1
		#undef MX_SPI_MISO_PIN_1
		#undef MX_SPI_MISO_PORT_1
		#undef MX_SPI_MISO_TRIS_1
		#undef MX_SPI_SCK_PIN_1
		#undef MX_SPI_SCK_PORT_1
		#undef MX_SPI_SCK_TRIS_1
		#undef MX_SPI_CS_PIN_1
		#undef MX_SPI_CS_PORT_1
		#undef MX_SPI_CS_TRIS_1

		#if MX_SPI_PR_SCALE_1 == 4
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	0
		#endif
		#if MX_SPI_PR_SCALE_1 == 16
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	1
		#endif
		#if MX_SPI_PR_SCALE_1 == 64
			#undef MX_SPI_PR_SCALE_1
			#define MX_SPI_PR_SCALE_1	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_1 == 1
		#define MX_SPI_MOSI_PIN_1		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 2
		#define MX_SPI_MOSI_PIN_1		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 3
		#define MX_SPI_MOSI_PIN_1		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_1 == 4
		#define MX_SPI_MOSI_PIN_1		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_1		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_1		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_1		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_1		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_1		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_1		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_1		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_1		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_1			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_1		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_1		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF2
	#if MX_SPI_CHANNEL_2 > 0
		#undef MX_SPI_MOSI_PIN_2
		#undef MX_SPI_MOSI_PORT_2
		#undef MX_SPI_MOSI_TRIS_2
		#undef MX_SPI_MISO_PIN_2
		#undef MX_SPI_MISO_PORT_2
		#undef MX_SPI_MISO_TRIS_2
		#undef MX_SPI_SCK_PIN_2
		#undef MX_SPI_SCK_PORT_2
		#undef MX_SPI_SCK_TRIS_2
		#undef MX_SPI_CS_PIN_2
		#undef MX_SPI_CS_PORT_2
		#undef MX_SPI_CS_TRIS_2

		#if MX_SPI_PR_SCALE_2 == 4
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	0
		#endif
		#if MX_SPI_PR_SCALE_2 == 16
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	1
		#endif
		#if MX_SPI_PR_SCALE_2 == 64
			#undef MX_SPI_PR_SCALE_2
			#define MX_SPI_PR_SCALE_2	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_2 == 1
		#define MX_SPI_MOSI_PIN_2		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 2
		#define MX_SPI_MOSI_PIN_2		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 3
		#define MX_SPI_MOSI_PIN_2		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_2 == 4
		#define MX_SPI_MOSI_PIN_2		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_2		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_2		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_2		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_2		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_2		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_2		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_2		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_2		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_2			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_2		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_2		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF3
	#if MX_SPI_CHANNEL_3 > 0
		#undef MX_SPI_MOSI_PIN_3
		#undef MX_SPI_MOSI_PORT_3
		#undef MX_SPI_MOSI_TRIS_3
		#undef MX_SPI_MISO_PIN_3
		#undef MX_SPI_MISO_PORT_3
		#undef MX_SPI_MISO_TRIS_3
		#undef MX_SPI_SCK_PIN_3
		#undef MX_SPI_SCK_PORT_3
		#undef MX_SPI_SCK_TRIS_3
		#undef MX_SPI_CS_PIN_3
		#undef MX_SPI_CS_PORT_3
		#undef MX_SPI_CS_TRIS_3

		#if MX_SPI_PR_SCALE_3 == 4
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	0
		#endif
		#if MX_SPI_PR_SCALE_3 == 16
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	1
		#endif
		#if MX_SPI_PR_SCALE_3 == 64
			#undef MX_SPI_PR_SCALE_3
			#define MX_SPI_PR_SCALE_3	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_3 == 1
		#define MX_SPI_MOSI_PIN_3		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 2
		#define MX_SPI_MOSI_PIN_3		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 3
		#define MX_SPI_MOSI_PIN_3		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_3 == 4
		#define MX_SPI_MOSI_PIN_3		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_3		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_3		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_3		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_3		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_3		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_3		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_3		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_3		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_3			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_3		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_3		MX_SPI_4_SS_TRIS
	#endif
#endif
#ifdef MX_SPI_REF4
	#if MX_SPI_CHANNEL_4 > 0
		#undef MX_SPI_MOSI_PIN_4
		#undef MX_SPI_MOSI_PORT_4
		#undef MX_SPI_MOSI_TRIS_4
		#undef MX_SPI_MISO_PIN_4
		#undef MX_SPI_MISO_PORT_4
		#undef MX_SPI_MISO_TRIS_4
		#undef MX_SPI_SCK_PIN_4
		#undef MX_SPI_SCK_PORT_4
		#undef MX_SPI_SCK_TRIS_4
		#undef MX_SPI_CS_PIN_4
		#undef MX_SPI_CS_PORT_4
		#undef MX_SPI_CS_TRIS_4

		#if MX_SPI_PR_SCALE_4 == 4
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	0
		#endif
		#if MX_SPI_PR_SCALE_4 == 16
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	1
		#endif
		#if MX_SPI_PR_SCALE_4 == 64
			#undef MX_SPI_PR_SCALE_4
			#define MX_SPI_PR_SCALE_4	2
		#endif
	#endif
	#if MX_SPI_CHANNEL_4 == 1
		#define MX_SPI_MOSI_PIN_4		MX_SPI_1_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_1_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_1_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_1_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_1_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_1_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_1_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_1_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_1_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_1_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_1_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_1_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 2
		#define MX_SPI_MOSI_PIN_4		MX_SPI_2_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_2_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_2_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_2_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_2_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_2_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_2_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_2_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_2_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_2_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_2_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_2_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 3
		#define MX_SPI_MOSI_PIN_4		MX_SPI_3_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_3_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_3_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_3_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_3_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_3_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_3_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_3_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_3_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_3_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_3_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_3_SS_TRIS
	#endif
	#if MX_SPI_CHANNEL_4 == 4
		#define MX_SPI_MOSI_PIN_4		MX_SPI_4_MOSI_PIN
		#define MX_SPI_MOSI_PORT_4		MX_SPI_4_MOSI_PORT
		#define MX_SPI_MOSI_TRIS_4		MX_SPI_4_MOSI_TRIS
		#define MX_SPI_MISO_PIN_4		MX_SPI_4_MISO_PIN
		#define MX_SPI_MISO_PORT_4		MX_SPI_4_MISO_PORT
		#define MX_SPI_MISO_TRIS_4		MX_SPI_4_MISO_TRIS
		#define MX_SPI_SCK_PIN_4		MX_SPI_4_CLK_PIN
		#define MX_SPI_SCK_PORT_4		MX_SPI_4_CLK_PORT
		#define MX_SPI_SCK_TRIS_4		MX_SPI_4_CLK_TRIS
		#define MX_SPI_CS_PIN_4			MX_SPI_4_SS_PIN
		#define MX_SPI_CS_PORT_4		MX_SPI_4_SS_PORT
		#define MX_SPI_CS_TRIS_4		MX_SPI_4_SS_TRIS
	#endif
#endif

#define MX_SPI_CHANNEL_X		CAL_APPEND(MX_SPI_CHANNEL_, MX_SPI_NUM)
#define MX_SPI_MOSI_PIN_X		CAL_APPEND(MX_SPI_MOSI_PIN_, MX_SPI_NUM)
#define MX_SPI_MOSI_PORT_X		CAL_APPEND(MX_SPI_MOSI_PORT_, MX_SPI_NUM)
#define MX_SPI_MOSI_TRIS_X		CAL_APPEND(MX_SPI_MOSI_TRIS_, MX_SPI_NUM)
#define MX_SPI_MISO_PIN_X		CAL_APPEND(MX_SPI_MISO_PIN_, MX_SPI_NUM)
#define MX_SPI_MISO_PORT_X		CAL_APPEND(MX_SPI_MISO_PORT_, MX_SPI_NUM)
#define MX_SPI_MISO_TRIS_X		CAL_APPEND(MX_SPI_MISO_TRIS_, MX_SPI_NUM)
#define MX_SPI_SCK_PIN_X		CAL_APPEND(MX_SPI_SCK_PIN_, MX_SPI_NUM)
#define MX_SPI_SCK_PORT_X		CAL_APPEND(MX_SPI_SCK_PORT_, MX_SPI_NUM)
#define MX_SPI_SCK_TRIS_X		CAL_APPEND(MX_SPI_SCK_TRIS_, MX_SPI_NUM)
#define MX_SPI_CS_PIN_X			CAL_APPEND(MX_SPI_CS_PIN_, MX_SPI_NUM)
#define MX_SPI_CS_PORT_X		CAL_APPEND(MX_SPI_CS_PORT_, MX_SPI_NUM)
#define MX_SPI_CS_TRIS_X		CAL_APPEND(MX_SPI_CS_TRIS_, MX_SPI_NUM)
#define MX_SPI_BMODE_X			CAL_APPEND(MX_SPI_BMODE_, MX_SPI_NUM)
#define MX_SPI_PR_SCALE_X		CAL_APPEND(MX_SPI_PR_SCALE_, MX_SPI_NUM)
#define MX_SPI_PO_SCALE_X		CAL_APPEND(MX_SPI_PO_SCALE_, MX_SPI_NUM)
#define MX_SPI_INT_X			CAL_APPEND(MX_SPI_INT_, MX_SPI_NUM)


//Function Prototypes
CALFUNCTION(void, FC_CAL_SPI_Master_Init_, (void));
CALFUNCTION(void, FC_CAL_SPI_Master_Uninit_, (void));
CALFUNCTION(MX_UINT8, FC_CAL_SPI_Master_Byte_, (MX_UINT8 DataOut));

CALFUNCTION(void, FC_CAL_SPI_Slave_Init_, (void));
CALFUNCTION(void, FC_CAL_SPI_Slave_Uninit_, (void));
CALFUNCTION(void, FC_CAL_SPI_Slave_SetTxData_, (MX_UINT8 Data));
CALFUNCTION(MX_UINT8, FC_CAL_SPI_Slave_GetRxData_, (void));


#if (MX_SPI_CHANNEL_X == 0)
  #ifndef MX_SPI_SW_DEL
    #define MX_SPI_SW_DEL
	MX_UINT8 SPI_SW_DELAY = 1;
  #endif
#endif


//Bus Mode - Bit0=CPOL, Bit1=CPHA, Bit2=CSMP
//CPOL - Clock Polarity - Idle State of the clock 0=0, 1=1
//CPHA - Clock Phase - Clock Edge 0=leading edge, 1=trailing edge
//CSMP - Input Data Bit Sample Phase
//CRAT - SPI Clock Rate 0=1/4, 1=1/16, 2=1/64


//Ensure SSPCON register is defined correctly
#ifndef SSPCON
  #ifdef SSPCON1
	#define sspcon	sspcon1
  #else
	#ifdef SSP1CON1
		#define sspcon	ssp1con1
	#endif
  #endif
#endif
#ifndef SSPBUF
  #ifdef SSP1BUF
	#define sspbuf	ssp1buf
  #endif
#endif

#ifndef SSP2CON
	#ifdef SSP2CON1
		#define ssp2con	ssp2con1
	#endif
#endif




CALFUNCTION(void, FC_CAL_SPI_Master_Init_, (void))

{
	FC_CAL_Bit_High_DDR (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_TRIS_X, MX_SPI_MOSI_PIN_X);		// MOSI pin is default high
00E4  1683  	BSF STATUS, RP0
00E5  1303  	BCF STATUS, RP1
00E6  1287  	BCF gbl_trisc,5
00E7  1283  	BCF STATUS, RP0
00E8  1687  	BSF gbl_portc,5

	FC_CAL_Bit_In_DDR   (MX_SPI_MISO_PORT_X, MX_SPI_MISO_TRIS_X, MX_SPI_MISO_PIN_X);		// MISO pin is a input
00E9  1683  	BSF STATUS, RP0
00EA  1607  	BSF gbl_trisc,4


	#if (MX_SPI_BMODE_X & 0x02)
		FC_CAL_Bit_Low_DDR  (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);		// Clock pin is default low
00EB  1187  	BCF gbl_trisc,3
00EC  1283  	BCF STATUS, RP0
00ED  1187  	BCF gbl_portc,3

	#else
		FC_CAL_Bit_High_DDR (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);		// Clock pin is default high
	#endif

	#if (MX_SPI_CHANNEL_X == 1)
	 #ifndef MX_SPI_1
	 	#error "SPI channel 1 not available on this device"
	 #else
		sspcon 		 = MX_SPI_PR_SCALE_X & 0x03;			//Assign Clock Prescaler
00EE  3002  	MOVLW 0x02
00EF  0094  	MOVWF gbl_sspcon

		sspcon.CKP 	 = MX_SPI_BMODE_X & 0x01;				//Assign Clock Polarity
00F0  1214  	BCF gbl_sspcon,4

		sspstat.CKE  = (MX_SPI_BMODE_X & 0x02) >> 1;		//Assign Clock Phase
00F1  1683  	BSF STATUS, RP0
00F2  1714  	BSF gbl_sspstat,6

		sspstat.SMP  = (MX_SPI_BMODE_X & 0x04) >> 2;		//Assign Input Data Phase
00F3  1794  	BSF gbl_sspstat,7

		sspcon.SSPEN = 1;									//Activate SPI Peripheral
00F4  1283  	BCF STATUS, RP0
00F5  1694  	BSF gbl_sspcon,5

	 #endif
	#endif

	#if (MX_SPI_CHANNEL_X == 2)
	 #ifndef MX_SPI_2
	 	#error "SPI channel 2 not available on this device"
	 #else

	  #ifdef MX_SPI_2_REMAPPABLE
		RPINR21 = 3; 										//MISO - RB0 - RP3
		RPOR4 = 9;											//MOSI - RB1 - RP4
		RPOR5 = 10;											//SCK  - RB2 - RP5
	  #endif

		ssp2con 	  = MX_SPI_PR_SCALE_X & 0x03;		//Assign Clock Prescaler
		ssp2con.CKP   = MX_SPI_BMODE_X & 0x01;			//Assign Clock Polarity
		ssp2stat.CKE  = (MX_SPI_BMODE_X & 0x02) >> 1;	//Assign Clock Phase
		ssp2stat.SMP  = (MX_SPI_BMODE_X & 0x04) >> 2;	//Assign Input Data Phase
		ssp2con.SSPEN = 1;									//Activate SPI Peripheral
	 #endif
	#endif
}
00F6  0008  	RETURN



CALFUNCTION(void, FC_CAL_SPI_Master_Uninit_, (void))
{
	#if (MX_SPI_CHANNEL_X == 1)
		sspcon = 0;
	#endif

	#if (MX_SPI_CHANNEL_X == 2)
		ssp2con = 0;
    #endif

	//Reset Pins to Inputs
	FC_CAL_Bit_In_DDR (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_TRIS_X, MX_SPI_MOSI_PIN_X);
	FC_CAL_Bit_In_DDR (MX_SPI_MISO_PORT_X, MX_SPI_MISO_TRIS_X, MX_SPI_MISO_PIN_X);
	FC_CAL_Bit_In_DDR (MX_SPI_SCK_PORT_X, MX_SPI_SCK_TRIS_X, MX_SPI_SCK_PIN_X);
}


CALFUNCTION(MX_UINT8, FC_CAL_SPI_Master_Byte_, (MX_UINT8 DataOut))

{
	MX_UINT8 retVal = 0;
005E  01E9  	CLRF FC_CAL_SPI_0006B_1_retVal


	#if (MX_SPI_CHANNEL_X == 0)
		SPI_SW_DELAY = MX_SPI_PR_SCALE_X;

		MX_UINT8 idx;
		for (idx = 0; idx < 8; idx++)
		{
			retVal = retVal << 1;

			#if ((MX_SPI_BMODE_X & 0x02) == 0x00)									//CKE = 0; Set SCK active before data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			if (DataOut & 0x80)														//Test Data bit
				FC_CAL_Bit_High(MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_PIN_X);				//Set SDO bit
			else
				FC_CAL_Bit_Low (MX_SPI_MOSI_PORT_X, MX_SPI_MOSI_PIN_X);				//Clear SDO bit

			delay_us(SPI_SW_DELAY);

			#if ((MX_SPI_BMODE_X & 0x02) == 0x02)									//CKE = 1; Set SCK active after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#else																	//CKE = 0; Set SCK idle after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			#if ((MX_SPI_BMODE_X & 0x04) == 0)										//Sample at the middle of period
				if(FC_CAL_Bit_In(MX_SPI_MISO_PORT_X, MX_SPI_MISO_PIN_X))
					retVal = retVal | 0x01;
				else
					retVal = retVal & 0xFE;
			#endif

			delay_us(SPI_SW_DELAY);

			#if ((MX_SPI_BMODE_X & 0x02) == 0x02)									//CKE = 1; Set SCK idle to complete cycle																	//CKE = 0; Set SCK idle after data
				#if ((MX_SPI_BMODE_X & 0x01) == 0x00)								//CKP = 0
					FC_CAL_Bit_Low(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#else
					FC_CAL_Bit_High(MX_SPI_SCK_PORT_X, MX_SPI_SCK_PIN_X);
				#endif
			#endif

			#if ((MX_SPI_BMODE_X & 0x04) == 0x04)									//Sample at the end of period
				if(FC_CAL_Bit_In(MX_SPI_MISO_PORT_X, MX_SPI_MISO_PIN_X))
					retVal = retVal | 0x01;
				else
					retVal = retVal & 0xFE;
			#endif

			DataOut = DataOut << 1;							//Move to next data bit
		}
    #endif

	#if (MX_SPI_CHANNEL_X == 1)
		sspbuf = DataOut;					//Send outgoing byte
005F  0868  	MOVF FC_CAL_SPI_0006B_arg_DataOut, W
0060  0093  	MOVWF gbl_sspbuf

		while ((sspstat & 0x01) == 0);		//Wait until sspbuf is empty
0061        label7
0061  1683  	BSF STATUS, RP0
0062  1C14  	BTFSS gbl_sspstat,0
0063  2861  	GOTO	label7

		retVal = sspbuf;					//Collect incoming byte
0064  1283  	BCF STATUS, RP0
0065  0813  	MOVF gbl_sspbuf, W
0066  00E9  	MOVWF FC_CAL_SPI_0006B_1_retVal

	#endif

	#if (MX_SPI_CHANNEL_X == 2)
		ssp2buf = DataOut;					//Send outgoing byte
		while ((ssp2stat & 0x01) == 0);		//Wait until sspbuf is empty
		retVal = ssp2buf;					//Collect incoming byte
	#endif

	return (retVal);
0067  0869  	MOVF FC_CAL_SPI_0006B_1_retVal, W
0068  00EA  	MOVWF CompTempVarRet2222

}
0069  0008  	RETURN






CALFUNCTION(void, FC_CAL_SPI_Slave_Init_, (void))
{

}

CALFUNCTION(void, FC_CAL_SPI_Slave_Uninit_, (void))
{

}

CALFUNCTION(void, FC_CAL_SPI_Slave_SetTxData_, (MX_UINT8 Data))
{

}

CALFUNCTION(MX_UINT8, FC_CAL_SPI_Slave_GetRxData_, (void))
{

}



////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2C38  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2C88  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08EB  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  2815  	GOTO	label2
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0000  	NOP
0036  0000  	NOP
0037  0000  	NOP
0038  0000  	NOP
0039  0BEB  	DECFSZ delay_ms_00000_arg_del, F
003A  2814  	GOTO	label1
003B  0008  	RETURN
003C        ; } delay_ms function end

003C        delay_10us_00000
003C        ; { delay_10us ; function begin
003C  08EF  	MOVF delay_10us_00000_arg_del, F
003D  1D03  	BTFSS STATUS,Z
003E  2840  	GOTO	label3
003F  0008  	RETURN
0040        label3
0040  3009  	MOVLW 0x09
0041        label4
0041  0000  	NOP
0042  3EFF  	ADDLW 0xFF
0043  1D03  	BTFSS STATUS,Z
0044  2841  	GOTO	label4
0045  0000  	NOP
0046  0000  	NOP
0047  0BEF  	DECFSZ delay_10us_00000_arg_del, F
0048  2840  	GOTO	label3
0049  0008  	RETURN
004A        ; } delay_10us function end

004A        delay_us_00000
004A        ; { delay_us ; function begin
004A        label5
004A  0000  	NOP
004B  0000  	NOP
004C  0BE7  	DECFSZ delay_us_00000_arg_del, F
004D  284A  	GOTO	label5
004E  0008  	RETURN
004F        ; } delay_us function end

004F        delay_s_00000
004F        ; { delay_s ; function begin
004F        label6
004F  30FA  	MOVLW 0xFA
0050  00EB  	MOVWF delay_ms_00000_arg_del
0051  2010  	CALL delay_ms_00000
0052  30FA  	MOVLW 0xFA
0053  00EB  	MOVWF delay_ms_00000_arg_del
0054  2010  	CALL delay_ms_00000
0055  30FA  	MOVLW 0xFA
0056  00EB  	MOVWF delay_ms_00000_arg_del
0057  2010  	CALL delay_ms_00000
0058  30FA  	MOVLW 0xFA
0059  00EB  	MOVWF delay_ms_00000_arg_del
005A  2010  	CALL delay_ms_00000
005B  0BE7  	DECFSZ delay_s_00000_arg_del, F
005C  284F  	GOTO	label6
005D  0008  	RETURN
005E        ; } delay_s function end


006A        __div_16_1_00003
006A        ; { __div_16_16 ; function begin
006A  01F2  	CLRF __div_16_1_00003_1_r
006B  01F3  	CLRF __div_16_1_00003_1_r+D'1'
006C  01F5  	CLRF CompTempVarRet214
006D  01F6  	CLRF CompTempVarRet214+D'1'
006E  01F4  	CLRF __div_16_1_00003_1_i
006F        label8
006F  1A74  	BTFSC __div_16_1_00003_1_i,4
0070  0008  	RETURN
0071  1003  	BCF STATUS,C
0072  0DF5  	RLF CompTempVarRet214, F
0073  0DF6  	RLF CompTempVarRet214+D'1', F
0074  0DEC  	RLF __div_16_1_00003_arg_a, F
0075  0DED  	RLF __div_16_1_00003_arg_a+D'1', F
0076  0DF2  	RLF __div_16_1_00003_1_r, F
0077  0DF3  	RLF __div_16_1_00003_1_r+D'1', F
0078  086F  	MOVF __div_16_1_00003_arg_b+D'1', W
0079  0273  	SUBWF __div_16_1_00003_1_r+D'1', W
007A  1D03  	BTFSS STATUS,Z
007B  287E  	GOTO	label9
007C  086E  	MOVF __div_16_1_00003_arg_b, W
007D  0272  	SUBWF __div_16_1_00003_1_r, W
007E        label9
007E  1C03  	BTFSS STATUS,C
007F  2887  	GOTO	label10
0080  086E  	MOVF __div_16_1_00003_arg_b, W
0081  02F2  	SUBWF __div_16_1_00003_1_r, F
0082  086F  	MOVF __div_16_1_00003_arg_b+D'1', W
0083  1C03  	BTFSS STATUS,C
0084  03F3  	DECF __div_16_1_00003_1_r+D'1', F
0085  02F3  	SUBWF __div_16_1_00003_1_r+D'1', F
0086  1475  	BSF CompTempVarRet214,0
0087        label10
0087  0AF4  	INCF __div_16_1_00003_1_i, F
0088  286F  	GOTO	label8
0089        ; } __div_16_16 function end


0438        _startup
0438  30D5  	MOVLW 0xD5
0439  1283  	BCF STATUS, RP0
043A  1303  	BCF STATUS, RP1
043B  00A0  	MOVWF gbl_14_LSR
043C  30C4  	MOVLW 0xC4
043D  00A1  	MOVWF gbl_14_LSR+D'1'
043E  30BB  	MOVLW 0xBB
043F  00A2  	MOVWF gbl_14_LSR+D'2'
0440  30DC  	MOVLW 0xDC
0441  00A3  	MOVWF gbl_14_LSR+D'3'
0442  01A4  	CLRF gbl_15_gbl_aSig
0443  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0444  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0445  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0446  01A8  	CLRF gbl_15_gbl_bSig
0447  01A9  	CLRF gbl_15_gbl_bSig+D'1'
0448  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0449  01AB  	CLRF gbl_15_gbl_bSig+D'3'
044A  01AC  	CLRF gbl_15_gbl_zSig
044B  01AD  	CLRF gbl_15_gbl_zSig+D'1'
044C  01AE  	CLRF gbl_15_gbl_zSig+D'2'
044D  01AF  	CLRF gbl_15_gbl_zSig+D'3'
044E  01BC  	CLRF gbl_15_gbl_aExp
044F  01BD  	CLRF gbl_15_gbl_bExp
0450  01B7  	CLRF gbl_15_gbl_zExp
0451  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0452  01BE  	CLRF gbl_15_gbl_aSign
0453  01BF  	CLRF gbl_15_gbl_bSign
0454  01C0  	CLRF gbl_15_gbl_zSign
0455  01C1  	CLRF gbl_15_gbl_zSigZero
0456  01B0  	CLRF gbl_15_gbl_ret
0457  01B1  	CLRF gbl_15_gbl_ret+D'1'
0458  01B2  	CLRF gbl_15_gbl_ret+D'2'
0459  01B3  	CLRF gbl_15_gbl_ret+D'3'
045A  01BA  	CLRF gbl_float_rounding_mode
045B  01BB  	CLRF gbl_float_exception_flags
045C  01B9  	CLRF gbl_float_detect_tininess

0485  118A  	BCF PCLATH,3
0486  120A  	BCF PCLATH,4
0487  2C12  	GOTO	main

2007  3F3A  	DW 0x3F3A
